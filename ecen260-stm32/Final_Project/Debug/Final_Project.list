
Final_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009314  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  0800949c  0800949c  0000a49c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009514  08009514  0000b218  2**0
                  CONTENTS
  4 .ARM          00000008  08009514  08009514  0000a514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800951c  0800951c  0000b218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800951c  0800951c  0000a51c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009520  08009520  0000a520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000218  20000000  08009524  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000544  20000218  0800973c  0000b218  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000075c  0800973c  0000b75c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b218  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c57e  00000000  00000000  0000b248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034f5  00000000  00000000  000277c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a78  00000000  00000000  0002acc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014cd  00000000  00000000  0002c738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a4cd  00000000  00000000  0002dc05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f382  00000000  00000000  000580d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010d48d  00000000  00000000  00077454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001848e1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007314  00000000  00000000  00184924  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  0018bc38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000218 	.word	0x20000218
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009484 	.word	0x08009484

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000021c 	.word	0x2000021c
 80001c4:	08009484 	.word	0x08009484

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <lcd_write_nibble>:
void draw_wave(uint32_t new_Vpp);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void lcd_write_nibble(uint8_t nibble, uint8_t rs) {
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b086      	sub	sp, #24
 80004bc:	af02      	add	r7, sp, #8
 80004be:	4603      	mov	r3, r0
 80004c0:	460a      	mov	r2, r1
 80004c2:	71fb      	strb	r3, [r7, #7]
 80004c4:	4613      	mov	r3, r2
 80004c6:	71bb      	strb	r3, [r7, #6]
	 uint8_t data = nibble << D4_BIT;
 80004c8:	79fb      	ldrb	r3, [r7, #7]
 80004ca:	011b      	lsls	r3, r3, #4
 80004cc:	b2db      	uxtb	r3, r3
 80004ce:	73fb      	strb	r3, [r7, #15]
	 data |= rs << RS_BIT;
 80004d0:	7bfa      	ldrb	r2, [r7, #15]
 80004d2:	79bb      	ldrb	r3, [r7, #6]
 80004d4:	4313      	orrs	r3, r2
 80004d6:	b2db      	uxtb	r3, r3
 80004d8:	73fb      	strb	r3, [r7, #15]
	 data |= backlight_state << BL_BIT; // Include backlight state in data
 80004da:	4b16      	ldr	r3, [pc, #88]	@ (8000534 <lcd_write_nibble+0x7c>)
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	00db      	lsls	r3, r3, #3
 80004e0:	b25a      	sxtb	r2, r3
 80004e2:	7bfb      	ldrb	r3, [r7, #15]
 80004e4:	b25b      	sxtb	r3, r3
 80004e6:	4313      	orrs	r3, r2
 80004e8:	b25b      	sxtb	r3, r3
 80004ea:	b2db      	uxtb	r3, r3
 80004ec:	73fb      	strb	r3, [r7, #15]
	 data |= 1 << EN_BIT;
 80004ee:	7bfb      	ldrb	r3, [r7, #15]
 80004f0:	f043 0304 	orr.w	r3, r3, #4
 80004f4:	b2db      	uxtb	r3, r3
 80004f6:	73fb      	strb	r3, [r7, #15]
	 HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 80004f8:	f107 020f 	add.w	r2, r7, #15
 80004fc:	2364      	movs	r3, #100	@ 0x64
 80004fe:	9300      	str	r3, [sp, #0]
 8000500:	2301      	movs	r3, #1
 8000502:	214e      	movs	r1, #78	@ 0x4e
 8000504:	480c      	ldr	r0, [pc, #48]	@ (8000538 <lcd_write_nibble+0x80>)
 8000506:	f004 fb27 	bl	8004b58 <HAL_I2C_Master_Transmit>
	 HAL_Delay(1);
 800050a:	2001      	movs	r0, #1
 800050c:	f001 ff70 	bl	80023f0 <HAL_Delay>
	 data &= ~(1 << EN_BIT);
 8000510:	7bfb      	ldrb	r3, [r7, #15]
 8000512:	f023 0304 	bic.w	r3, r3, #4
 8000516:	b2db      	uxtb	r3, r3
 8000518:	73fb      	strb	r3, [r7, #15]
	 HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 800051a:	f107 020f 	add.w	r2, r7, #15
 800051e:	2364      	movs	r3, #100	@ 0x64
 8000520:	9300      	str	r3, [sp, #0]
 8000522:	2301      	movs	r3, #1
 8000524:	214e      	movs	r1, #78	@ 0x4e
 8000526:	4804      	ldr	r0, [pc, #16]	@ (8000538 <lcd_write_nibble+0x80>)
 8000528:	f004 fb16 	bl	8004b58 <HAL_I2C_Master_Transmit>
}
 800052c:	bf00      	nop
 800052e:	3710      	adds	r7, #16
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	20000000 	.word	0x20000000
 8000538:	20000358 	.word	0x20000358

0800053c <lcd_send_cmd>:
void lcd_send_cmd(uint8_t cmd) {
 800053c:	b580      	push	{r7, lr}
 800053e:	b084      	sub	sp, #16
 8000540:	af00      	add	r7, sp, #0
 8000542:	4603      	mov	r3, r0
 8000544:	71fb      	strb	r3, [r7, #7]
	 uint8_t upper_nibble = cmd >> 4;
 8000546:	79fb      	ldrb	r3, [r7, #7]
 8000548:	091b      	lsrs	r3, r3, #4
 800054a:	73fb      	strb	r3, [r7, #15]
	 uint8_t lower_nibble = cmd & 0x0F;
 800054c:	79fb      	ldrb	r3, [r7, #7]
 800054e:	f003 030f 	and.w	r3, r3, #15
 8000552:	73bb      	strb	r3, [r7, #14]
	 lcd_write_nibble(upper_nibble, 0);
 8000554:	7bfb      	ldrb	r3, [r7, #15]
 8000556:	2100      	movs	r1, #0
 8000558:	4618      	mov	r0, r3
 800055a:	f7ff ffad 	bl	80004b8 <lcd_write_nibble>
	 lcd_write_nibble(lower_nibble, 0);
 800055e:	7bbb      	ldrb	r3, [r7, #14]
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f7ff ffa8 	bl	80004b8 <lcd_write_nibble>
	 if (cmd == 0x01 || cmd == 0x02) {
 8000568:	79fb      	ldrb	r3, [r7, #7]
 800056a:	2b01      	cmp	r3, #1
 800056c:	d002      	beq.n	8000574 <lcd_send_cmd+0x38>
 800056e:	79fb      	ldrb	r3, [r7, #7]
 8000570:	2b02      	cmp	r3, #2
 8000572:	d102      	bne.n	800057a <lcd_send_cmd+0x3e>
		 HAL_Delay(2);
 8000574:	2002      	movs	r0, #2
 8000576:	f001 ff3b 	bl	80023f0 <HAL_Delay>
	 }
}
 800057a:	bf00      	nop
 800057c:	3710      	adds	r7, #16
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}

08000582 <lcd_send_data>:
void lcd_send_data(uint8_t data) {
 8000582:	b580      	push	{r7, lr}
 8000584:	b084      	sub	sp, #16
 8000586:	af00      	add	r7, sp, #0
 8000588:	4603      	mov	r3, r0
 800058a:	71fb      	strb	r3, [r7, #7]
	 uint8_t upper_nibble = data >> 4;
 800058c:	79fb      	ldrb	r3, [r7, #7]
 800058e:	091b      	lsrs	r3, r3, #4
 8000590:	73fb      	strb	r3, [r7, #15]
	 uint8_t lower_nibble = data & 0x0F;
 8000592:	79fb      	ldrb	r3, [r7, #7]
 8000594:	f003 030f 	and.w	r3, r3, #15
 8000598:	73bb      	strb	r3, [r7, #14]
	 lcd_write_nibble(upper_nibble, 1);
 800059a:	7bfb      	ldrb	r3, [r7, #15]
 800059c:	2101      	movs	r1, #1
 800059e:	4618      	mov	r0, r3
 80005a0:	f7ff ff8a 	bl	80004b8 <lcd_write_nibble>
	 lcd_write_nibble(lower_nibble, 1);
 80005a4:	7bbb      	ldrb	r3, [r7, #14]
 80005a6:	2101      	movs	r1, #1
 80005a8:	4618      	mov	r0, r3
 80005aa:	f7ff ff85 	bl	80004b8 <lcd_write_nibble>
}
 80005ae:	bf00      	nop
 80005b0:	3710      	adds	r7, #16
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}

080005b6 <lcd_init>:
void lcd_init() {
 80005b6:	b580      	push	{r7, lr}
 80005b8:	af00      	add	r7, sp, #0
	 HAL_Delay(50);
 80005ba:	2032      	movs	r0, #50	@ 0x32
 80005bc:	f001 ff18 	bl	80023f0 <HAL_Delay>
	 lcd_write_nibble(0x03, 0);
 80005c0:	2100      	movs	r1, #0
 80005c2:	2003      	movs	r0, #3
 80005c4:	f7ff ff78 	bl	80004b8 <lcd_write_nibble>
	 HAL_Delay(5);
 80005c8:	2005      	movs	r0, #5
 80005ca:	f001 ff11 	bl	80023f0 <HAL_Delay>
	 lcd_write_nibble(0x03, 0);
 80005ce:	2100      	movs	r1, #0
 80005d0:	2003      	movs	r0, #3
 80005d2:	f7ff ff71 	bl	80004b8 <lcd_write_nibble>
	 HAL_Delay(1);
 80005d6:	2001      	movs	r0, #1
 80005d8:	f001 ff0a 	bl	80023f0 <HAL_Delay>
	 lcd_write_nibble(0x03, 0);
 80005dc:	2100      	movs	r1, #0
 80005de:	2003      	movs	r0, #3
 80005e0:	f7ff ff6a 	bl	80004b8 <lcd_write_nibble>
	 HAL_Delay(1);
 80005e4:	2001      	movs	r0, #1
 80005e6:	f001 ff03 	bl	80023f0 <HAL_Delay>
	 lcd_write_nibble(0x02, 0);
 80005ea:	2100      	movs	r1, #0
 80005ec:	2002      	movs	r0, #2
 80005ee:	f7ff ff63 	bl	80004b8 <lcd_write_nibble>
	 lcd_send_cmd(0x28);
 80005f2:	2028      	movs	r0, #40	@ 0x28
 80005f4:	f7ff ffa2 	bl	800053c <lcd_send_cmd>
	 lcd_send_cmd(0x0C);
 80005f8:	200c      	movs	r0, #12
 80005fa:	f7ff ff9f 	bl	800053c <lcd_send_cmd>
	 lcd_send_cmd(0x06);
 80005fe:	2006      	movs	r0, #6
 8000600:	f7ff ff9c 	bl	800053c <lcd_send_cmd>
	 lcd_send_cmd(0x01);
 8000604:	2001      	movs	r0, #1
 8000606:	f7ff ff99 	bl	800053c <lcd_send_cmd>
	 HAL_Delay(2);
 800060a:	2002      	movs	r0, #2
 800060c:	f001 fef0 	bl	80023f0 <HAL_Delay>
}
 8000610:	bf00      	nop
 8000612:	bd80      	pop	{r7, pc}

08000614 <lcd_write_string>:
void lcd_write_string(char *str) {
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
	 while (*str) {
 800061c:	e006      	b.n	800062c <lcd_write_string+0x18>
		 lcd_send_data(*str++);
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	1c5a      	adds	r2, r3, #1
 8000622:	607a      	str	r2, [r7, #4]
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	4618      	mov	r0, r3
 8000628:	f7ff ffab 	bl	8000582 <lcd_send_data>
	 while (*str) {
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d1f4      	bne.n	800061e <lcd_write_string+0xa>
	 }
}
 8000634:	bf00      	nop
 8000636:	bf00      	nop
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}

0800063e <lcd_set_cursor>:
void lcd_set_cursor(uint8_t row, uint8_t column) {
 800063e:	b580      	push	{r7, lr}
 8000640:	b084      	sub	sp, #16
 8000642:	af00      	add	r7, sp, #0
 8000644:	4603      	mov	r3, r0
 8000646:	460a      	mov	r2, r1
 8000648:	71fb      	strb	r3, [r7, #7]
 800064a:	4613      	mov	r3, r2
 800064c:	71bb      	strb	r3, [r7, #6]
	 uint8_t address;
	 switch (row) {
 800064e:	79fb      	ldrb	r3, [r7, #7]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d002      	beq.n	800065a <lcd_set_cursor+0x1c>
 8000654:	2b01      	cmp	r3, #1
 8000656:	d003      	beq.n	8000660 <lcd_set_cursor+0x22>
 8000658:	e005      	b.n	8000666 <lcd_set_cursor+0x28>
		 case 0:
			 address = 0x00;
 800065a:	2300      	movs	r3, #0
 800065c:	73fb      	strb	r3, [r7, #15]
			 break;
 800065e:	e004      	b.n	800066a <lcd_set_cursor+0x2c>
		 case 1:
			 address = 0x40;
 8000660:	2340      	movs	r3, #64	@ 0x40
 8000662:	73fb      	strb	r3, [r7, #15]
			 break;
 8000664:	e001      	b.n	800066a <lcd_set_cursor+0x2c>
		 default:
			 address = 0x00;
 8000666:	2300      	movs	r3, #0
 8000668:	73fb      	strb	r3, [r7, #15]
	 }
	 address += column;
 800066a:	7bfa      	ldrb	r2, [r7, #15]
 800066c:	79bb      	ldrb	r3, [r7, #6]
 800066e:	4413      	add	r3, r2
 8000670:	73fb      	strb	r3, [r7, #15]
	 lcd_send_cmd(0x80 | address);
 8000672:	7bfb      	ldrb	r3, [r7, #15]
 8000674:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000678:	b2db      	uxtb	r3, r3
 800067a:	4618      	mov	r0, r3
 800067c:	f7ff ff5e 	bl	800053c <lcd_send_cmd>
}
 8000680:	bf00      	nop
 8000682:	3710      	adds	r7, #16
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}

08000688 <lcd_backlight>:
void lcd_clear(void) {
	 lcd_send_cmd(0x01);
	 HAL_Delay(2);
}
void lcd_backlight(uint8_t state) {
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	71fb      	strb	r3, [r7, #7]
	 if (state) {
 8000692:	79fb      	ldrb	r3, [r7, #7]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d003      	beq.n	80006a0 <lcd_backlight+0x18>
		 backlight_state = 1;
 8000698:	4b06      	ldr	r3, [pc, #24]	@ (80006b4 <lcd_backlight+0x2c>)
 800069a:	2201      	movs	r2, #1
 800069c:	701a      	strb	r2, [r3, #0]
	 } else {
		 backlight_state = 0;
	 }
}
 800069e:	e002      	b.n	80006a6 <lcd_backlight+0x1e>
		 backlight_state = 0;
 80006a0:	4b04      	ldr	r3, [pc, #16]	@ (80006b4 <lcd_backlight+0x2c>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
}
 80006a6:	bf00      	nop
 80006a8:	370c      	adds	r7, #12
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	20000000 	.word	0x20000000

080006b8 <Vpp_to_string>:
int float_equals(float a, float b) {
	// checks if two floats are nearly equal within epsilon tolerance
    return fabs(a - b) <= 0.0001;
}

char* Vpp_to_string(uint32_t num, char *str) {
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
 80006c0:	6039      	str	r1, [r7, #0]
    switch (num) {
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	2b21      	cmp	r3, #33	@ 0x21
 80006c6:	f200 82ef 	bhi.w	8000ca8 <Vpp_to_string+0x5f0>
 80006ca:	a201      	add	r2, pc, #4	@ (adr r2, 80006d0 <Vpp_to_string+0x18>)
 80006cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006d0:	08000759 	.word	0x08000759
 80006d4:	08000781 	.word	0x08000781
 80006d8:	080007a9 	.word	0x080007a9
 80006dc:	080007d1 	.word	0x080007d1
 80006e0:	080007f9 	.word	0x080007f9
 80006e4:	08000821 	.word	0x08000821
 80006e8:	08000849 	.word	0x08000849
 80006ec:	08000871 	.word	0x08000871
 80006f0:	08000899 	.word	0x08000899
 80006f4:	080008c1 	.word	0x080008c1
 80006f8:	080008e9 	.word	0x080008e9
 80006fc:	08000911 	.word	0x08000911
 8000700:	08000939 	.word	0x08000939
 8000704:	08000961 	.word	0x08000961
 8000708:	08000989 	.word	0x08000989
 800070c:	080009b1 	.word	0x080009b1
 8000710:	080009d9 	.word	0x080009d9
 8000714:	08000a01 	.word	0x08000a01
 8000718:	08000a29 	.word	0x08000a29
 800071c:	08000a51 	.word	0x08000a51
 8000720:	08000a79 	.word	0x08000a79
 8000724:	08000aa1 	.word	0x08000aa1
 8000728:	08000ac9 	.word	0x08000ac9
 800072c:	08000af1 	.word	0x08000af1
 8000730:	08000b19 	.word	0x08000b19
 8000734:	08000b41 	.word	0x08000b41
 8000738:	08000b69 	.word	0x08000b69
 800073c:	08000b91 	.word	0x08000b91
 8000740:	08000bb9 	.word	0x08000bb9
 8000744:	08000be1 	.word	0x08000be1
 8000748:	08000c09 	.word	0x08000c09
 800074c:	08000c31 	.word	0x08000c31
 8000750:	08000c59 	.word	0x08000c59
 8000754:	08000c81 	.word	0x08000c81
        case 0: str[0] = '0'; str[1] = '.'; str[2] = '0'; str[3] = 'V'; str[4] = '\0'; break;
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	2230      	movs	r2, #48	@ 0x30
 800075c:	701a      	strb	r2, [r3, #0]
 800075e:	683b      	ldr	r3, [r7, #0]
 8000760:	3301      	adds	r3, #1
 8000762:	222e      	movs	r2, #46	@ 0x2e
 8000764:	701a      	strb	r2, [r3, #0]
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	3302      	adds	r3, #2
 800076a:	2230      	movs	r2, #48	@ 0x30
 800076c:	701a      	strb	r2, [r3, #0]
 800076e:	683b      	ldr	r3, [r7, #0]
 8000770:	3303      	adds	r3, #3
 8000772:	2256      	movs	r2, #86	@ 0x56
 8000774:	701a      	strb	r2, [r3, #0]
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	3304      	adds	r3, #4
 800077a:	2200      	movs	r2, #0
 800077c:	701a      	strb	r2, [r3, #0]
 800077e:	e2a7      	b.n	8000cd0 <Vpp_to_string+0x618>
        case 1: str[0] = '0'; str[1] = '.'; str[2] = '1'; str[3] = 'V'; str[4] = '\0'; break;
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	2230      	movs	r2, #48	@ 0x30
 8000784:	701a      	strb	r2, [r3, #0]
 8000786:	683b      	ldr	r3, [r7, #0]
 8000788:	3301      	adds	r3, #1
 800078a:	222e      	movs	r2, #46	@ 0x2e
 800078c:	701a      	strb	r2, [r3, #0]
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	3302      	adds	r3, #2
 8000792:	2231      	movs	r2, #49	@ 0x31
 8000794:	701a      	strb	r2, [r3, #0]
 8000796:	683b      	ldr	r3, [r7, #0]
 8000798:	3303      	adds	r3, #3
 800079a:	2256      	movs	r2, #86	@ 0x56
 800079c:	701a      	strb	r2, [r3, #0]
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	3304      	adds	r3, #4
 80007a2:	2200      	movs	r2, #0
 80007a4:	701a      	strb	r2, [r3, #0]
 80007a6:	e293      	b.n	8000cd0 <Vpp_to_string+0x618>
        case 2: str[0] = '0'; str[1] = '.'; str[2] = '2'; str[3] = 'V'; str[4] = '\0'; break;
 80007a8:	683b      	ldr	r3, [r7, #0]
 80007aa:	2230      	movs	r2, #48	@ 0x30
 80007ac:	701a      	strb	r2, [r3, #0]
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	3301      	adds	r3, #1
 80007b2:	222e      	movs	r2, #46	@ 0x2e
 80007b4:	701a      	strb	r2, [r3, #0]
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	3302      	adds	r3, #2
 80007ba:	2232      	movs	r2, #50	@ 0x32
 80007bc:	701a      	strb	r2, [r3, #0]
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	3303      	adds	r3, #3
 80007c2:	2256      	movs	r2, #86	@ 0x56
 80007c4:	701a      	strb	r2, [r3, #0]
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	3304      	adds	r3, #4
 80007ca:	2200      	movs	r2, #0
 80007cc:	701a      	strb	r2, [r3, #0]
 80007ce:	e27f      	b.n	8000cd0 <Vpp_to_string+0x618>
        case 3: str[0] = '0'; str[1] = '.'; str[2] = '3'; str[3] = 'V'; str[4] = '\0'; break;
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	2230      	movs	r2, #48	@ 0x30
 80007d4:	701a      	strb	r2, [r3, #0]
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	3301      	adds	r3, #1
 80007da:	222e      	movs	r2, #46	@ 0x2e
 80007dc:	701a      	strb	r2, [r3, #0]
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	3302      	adds	r3, #2
 80007e2:	2233      	movs	r2, #51	@ 0x33
 80007e4:	701a      	strb	r2, [r3, #0]
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	3303      	adds	r3, #3
 80007ea:	2256      	movs	r2, #86	@ 0x56
 80007ec:	701a      	strb	r2, [r3, #0]
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	3304      	adds	r3, #4
 80007f2:	2200      	movs	r2, #0
 80007f4:	701a      	strb	r2, [r3, #0]
 80007f6:	e26b      	b.n	8000cd0 <Vpp_to_string+0x618>
        case 4: str[0] = '0'; str[1] = '.'; str[2] = '4'; str[3] = 'V'; str[4] = '\0'; break;
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	2230      	movs	r2, #48	@ 0x30
 80007fc:	701a      	strb	r2, [r3, #0]
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	3301      	adds	r3, #1
 8000802:	222e      	movs	r2, #46	@ 0x2e
 8000804:	701a      	strb	r2, [r3, #0]
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	3302      	adds	r3, #2
 800080a:	2234      	movs	r2, #52	@ 0x34
 800080c:	701a      	strb	r2, [r3, #0]
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	3303      	adds	r3, #3
 8000812:	2256      	movs	r2, #86	@ 0x56
 8000814:	701a      	strb	r2, [r3, #0]
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	3304      	adds	r3, #4
 800081a:	2200      	movs	r2, #0
 800081c:	701a      	strb	r2, [r3, #0]
 800081e:	e257      	b.n	8000cd0 <Vpp_to_string+0x618>
        case 5: str[0] = '0'; str[1] = '.'; str[2] = '5'; str[3] = 'V'; str[4] = '\0'; break;
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	2230      	movs	r2, #48	@ 0x30
 8000824:	701a      	strb	r2, [r3, #0]
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	3301      	adds	r3, #1
 800082a:	222e      	movs	r2, #46	@ 0x2e
 800082c:	701a      	strb	r2, [r3, #0]
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	3302      	adds	r3, #2
 8000832:	2235      	movs	r2, #53	@ 0x35
 8000834:	701a      	strb	r2, [r3, #0]
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	3303      	adds	r3, #3
 800083a:	2256      	movs	r2, #86	@ 0x56
 800083c:	701a      	strb	r2, [r3, #0]
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	3304      	adds	r3, #4
 8000842:	2200      	movs	r2, #0
 8000844:	701a      	strb	r2, [r3, #0]
 8000846:	e243      	b.n	8000cd0 <Vpp_to_string+0x618>
        case 6: str[0] = '0'; str[1] = '.'; str[2] = '6'; str[3] = 'V'; str[4] = '\0'; break;
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	2230      	movs	r2, #48	@ 0x30
 800084c:	701a      	strb	r2, [r3, #0]
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	3301      	adds	r3, #1
 8000852:	222e      	movs	r2, #46	@ 0x2e
 8000854:	701a      	strb	r2, [r3, #0]
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	3302      	adds	r3, #2
 800085a:	2236      	movs	r2, #54	@ 0x36
 800085c:	701a      	strb	r2, [r3, #0]
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	3303      	adds	r3, #3
 8000862:	2256      	movs	r2, #86	@ 0x56
 8000864:	701a      	strb	r2, [r3, #0]
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	3304      	adds	r3, #4
 800086a:	2200      	movs	r2, #0
 800086c:	701a      	strb	r2, [r3, #0]
 800086e:	e22f      	b.n	8000cd0 <Vpp_to_string+0x618>
        case 7: str[0] = '0'; str[1] = '.'; str[2] = '7'; str[3] = 'V'; str[4] = '\0'; break;
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	2230      	movs	r2, #48	@ 0x30
 8000874:	701a      	strb	r2, [r3, #0]
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	3301      	adds	r3, #1
 800087a:	222e      	movs	r2, #46	@ 0x2e
 800087c:	701a      	strb	r2, [r3, #0]
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	3302      	adds	r3, #2
 8000882:	2237      	movs	r2, #55	@ 0x37
 8000884:	701a      	strb	r2, [r3, #0]
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	3303      	adds	r3, #3
 800088a:	2256      	movs	r2, #86	@ 0x56
 800088c:	701a      	strb	r2, [r3, #0]
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	3304      	adds	r3, #4
 8000892:	2200      	movs	r2, #0
 8000894:	701a      	strb	r2, [r3, #0]
 8000896:	e21b      	b.n	8000cd0 <Vpp_to_string+0x618>
        case 8: str[0] = '0'; str[1] = '.'; str[2] = '8'; str[3] = 'V'; str[4] = '\0'; break;
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	2230      	movs	r2, #48	@ 0x30
 800089c:	701a      	strb	r2, [r3, #0]
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	3301      	adds	r3, #1
 80008a2:	222e      	movs	r2, #46	@ 0x2e
 80008a4:	701a      	strb	r2, [r3, #0]
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	3302      	adds	r3, #2
 80008aa:	2238      	movs	r2, #56	@ 0x38
 80008ac:	701a      	strb	r2, [r3, #0]
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	3303      	adds	r3, #3
 80008b2:	2256      	movs	r2, #86	@ 0x56
 80008b4:	701a      	strb	r2, [r3, #0]
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	3304      	adds	r3, #4
 80008ba:	2200      	movs	r2, #0
 80008bc:	701a      	strb	r2, [r3, #0]
 80008be:	e207      	b.n	8000cd0 <Vpp_to_string+0x618>
        case 9: str[0] = '0'; str[1] = '.'; str[2] = '9'; str[3] = 'V'; str[4] = '\0'; break;
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	2230      	movs	r2, #48	@ 0x30
 80008c4:	701a      	strb	r2, [r3, #0]
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	3301      	adds	r3, #1
 80008ca:	222e      	movs	r2, #46	@ 0x2e
 80008cc:	701a      	strb	r2, [r3, #0]
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	3302      	adds	r3, #2
 80008d2:	2239      	movs	r2, #57	@ 0x39
 80008d4:	701a      	strb	r2, [r3, #0]
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	3303      	adds	r3, #3
 80008da:	2256      	movs	r2, #86	@ 0x56
 80008dc:	701a      	strb	r2, [r3, #0]
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	3304      	adds	r3, #4
 80008e2:	2200      	movs	r2, #0
 80008e4:	701a      	strb	r2, [r3, #0]
 80008e6:	e1f3      	b.n	8000cd0 <Vpp_to_string+0x618>
        case 10: str[0] = '1'; str[1] = '.'; str[2] = '0'; str[3] = 'V'; str[4] = '\0'; break;
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	2231      	movs	r2, #49	@ 0x31
 80008ec:	701a      	strb	r2, [r3, #0]
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	3301      	adds	r3, #1
 80008f2:	222e      	movs	r2, #46	@ 0x2e
 80008f4:	701a      	strb	r2, [r3, #0]
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	3302      	adds	r3, #2
 80008fa:	2230      	movs	r2, #48	@ 0x30
 80008fc:	701a      	strb	r2, [r3, #0]
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	3303      	adds	r3, #3
 8000902:	2256      	movs	r2, #86	@ 0x56
 8000904:	701a      	strb	r2, [r3, #0]
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	3304      	adds	r3, #4
 800090a:	2200      	movs	r2, #0
 800090c:	701a      	strb	r2, [r3, #0]
 800090e:	e1df      	b.n	8000cd0 <Vpp_to_string+0x618>
        case 11: str[0] = '1'; str[1] = '.'; str[2] = '1'; str[3] = 'V'; str[4] = '\0'; break;
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	2231      	movs	r2, #49	@ 0x31
 8000914:	701a      	strb	r2, [r3, #0]
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	3301      	adds	r3, #1
 800091a:	222e      	movs	r2, #46	@ 0x2e
 800091c:	701a      	strb	r2, [r3, #0]
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	3302      	adds	r3, #2
 8000922:	2231      	movs	r2, #49	@ 0x31
 8000924:	701a      	strb	r2, [r3, #0]
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	3303      	adds	r3, #3
 800092a:	2256      	movs	r2, #86	@ 0x56
 800092c:	701a      	strb	r2, [r3, #0]
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	3304      	adds	r3, #4
 8000932:	2200      	movs	r2, #0
 8000934:	701a      	strb	r2, [r3, #0]
 8000936:	e1cb      	b.n	8000cd0 <Vpp_to_string+0x618>
        case 12: str[0] = '1'; str[1] = '.'; str[2] = '2'; str[3] = 'V'; str[4] = '\0'; break;
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	2231      	movs	r2, #49	@ 0x31
 800093c:	701a      	strb	r2, [r3, #0]
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	3301      	adds	r3, #1
 8000942:	222e      	movs	r2, #46	@ 0x2e
 8000944:	701a      	strb	r2, [r3, #0]
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	3302      	adds	r3, #2
 800094a:	2232      	movs	r2, #50	@ 0x32
 800094c:	701a      	strb	r2, [r3, #0]
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	3303      	adds	r3, #3
 8000952:	2256      	movs	r2, #86	@ 0x56
 8000954:	701a      	strb	r2, [r3, #0]
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	3304      	adds	r3, #4
 800095a:	2200      	movs	r2, #0
 800095c:	701a      	strb	r2, [r3, #0]
 800095e:	e1b7      	b.n	8000cd0 <Vpp_to_string+0x618>
        case 13: str[0] = '1'; str[1] = '.'; str[2] = '3'; str[3] = 'V'; str[4] = '\0'; break;
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	2231      	movs	r2, #49	@ 0x31
 8000964:	701a      	strb	r2, [r3, #0]
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	3301      	adds	r3, #1
 800096a:	222e      	movs	r2, #46	@ 0x2e
 800096c:	701a      	strb	r2, [r3, #0]
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	3302      	adds	r3, #2
 8000972:	2233      	movs	r2, #51	@ 0x33
 8000974:	701a      	strb	r2, [r3, #0]
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	3303      	adds	r3, #3
 800097a:	2256      	movs	r2, #86	@ 0x56
 800097c:	701a      	strb	r2, [r3, #0]
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	3304      	adds	r3, #4
 8000982:	2200      	movs	r2, #0
 8000984:	701a      	strb	r2, [r3, #0]
 8000986:	e1a3      	b.n	8000cd0 <Vpp_to_string+0x618>
        case 14: str[0] = '1'; str[1] = '.'; str[2] = '4'; str[3] = 'V'; str[4] = '\0'; break;
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	2231      	movs	r2, #49	@ 0x31
 800098c:	701a      	strb	r2, [r3, #0]
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	3301      	adds	r3, #1
 8000992:	222e      	movs	r2, #46	@ 0x2e
 8000994:	701a      	strb	r2, [r3, #0]
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	3302      	adds	r3, #2
 800099a:	2234      	movs	r2, #52	@ 0x34
 800099c:	701a      	strb	r2, [r3, #0]
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	3303      	adds	r3, #3
 80009a2:	2256      	movs	r2, #86	@ 0x56
 80009a4:	701a      	strb	r2, [r3, #0]
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	3304      	adds	r3, #4
 80009aa:	2200      	movs	r2, #0
 80009ac:	701a      	strb	r2, [r3, #0]
 80009ae:	e18f      	b.n	8000cd0 <Vpp_to_string+0x618>
        case 15: str[0] = '1'; str[1] = '.'; str[2] = '5'; str[3] = 'V'; str[4] = '\0'; break;
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	2231      	movs	r2, #49	@ 0x31
 80009b4:	701a      	strb	r2, [r3, #0]
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	3301      	adds	r3, #1
 80009ba:	222e      	movs	r2, #46	@ 0x2e
 80009bc:	701a      	strb	r2, [r3, #0]
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	3302      	adds	r3, #2
 80009c2:	2235      	movs	r2, #53	@ 0x35
 80009c4:	701a      	strb	r2, [r3, #0]
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	3303      	adds	r3, #3
 80009ca:	2256      	movs	r2, #86	@ 0x56
 80009cc:	701a      	strb	r2, [r3, #0]
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	3304      	adds	r3, #4
 80009d2:	2200      	movs	r2, #0
 80009d4:	701a      	strb	r2, [r3, #0]
 80009d6:	e17b      	b.n	8000cd0 <Vpp_to_string+0x618>
        case 16: str[0] = '1'; str[1] = '.'; str[2] = '6'; str[3] = 'V'; str[4] = '\0'; break;
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	2231      	movs	r2, #49	@ 0x31
 80009dc:	701a      	strb	r2, [r3, #0]
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	3301      	adds	r3, #1
 80009e2:	222e      	movs	r2, #46	@ 0x2e
 80009e4:	701a      	strb	r2, [r3, #0]
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	3302      	adds	r3, #2
 80009ea:	2236      	movs	r2, #54	@ 0x36
 80009ec:	701a      	strb	r2, [r3, #0]
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	3303      	adds	r3, #3
 80009f2:	2256      	movs	r2, #86	@ 0x56
 80009f4:	701a      	strb	r2, [r3, #0]
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	3304      	adds	r3, #4
 80009fa:	2200      	movs	r2, #0
 80009fc:	701a      	strb	r2, [r3, #0]
 80009fe:	e167      	b.n	8000cd0 <Vpp_to_string+0x618>
        case 17: str[0] = '1'; str[1] = '.'; str[2] = '7'; str[3] = 'V'; str[4] = '\0'; break;
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	2231      	movs	r2, #49	@ 0x31
 8000a04:	701a      	strb	r2, [r3, #0]
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	3301      	adds	r3, #1
 8000a0a:	222e      	movs	r2, #46	@ 0x2e
 8000a0c:	701a      	strb	r2, [r3, #0]
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	3302      	adds	r3, #2
 8000a12:	2237      	movs	r2, #55	@ 0x37
 8000a14:	701a      	strb	r2, [r3, #0]
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	3303      	adds	r3, #3
 8000a1a:	2256      	movs	r2, #86	@ 0x56
 8000a1c:	701a      	strb	r2, [r3, #0]
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	3304      	adds	r3, #4
 8000a22:	2200      	movs	r2, #0
 8000a24:	701a      	strb	r2, [r3, #0]
 8000a26:	e153      	b.n	8000cd0 <Vpp_to_string+0x618>
        case 18: str[0] = '1'; str[1] = '.'; str[2] = '8'; str[3] = 'V'; str[4] = '\0'; break;
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	2231      	movs	r2, #49	@ 0x31
 8000a2c:	701a      	strb	r2, [r3, #0]
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	3301      	adds	r3, #1
 8000a32:	222e      	movs	r2, #46	@ 0x2e
 8000a34:	701a      	strb	r2, [r3, #0]
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	3302      	adds	r3, #2
 8000a3a:	2238      	movs	r2, #56	@ 0x38
 8000a3c:	701a      	strb	r2, [r3, #0]
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	3303      	adds	r3, #3
 8000a42:	2256      	movs	r2, #86	@ 0x56
 8000a44:	701a      	strb	r2, [r3, #0]
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	3304      	adds	r3, #4
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	701a      	strb	r2, [r3, #0]
 8000a4e:	e13f      	b.n	8000cd0 <Vpp_to_string+0x618>
        case 19: str[0] = '1'; str[1] = '.'; str[2] = '9'; str[3] = 'V'; str[4] = '\0'; break;
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	2231      	movs	r2, #49	@ 0x31
 8000a54:	701a      	strb	r2, [r3, #0]
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	3301      	adds	r3, #1
 8000a5a:	222e      	movs	r2, #46	@ 0x2e
 8000a5c:	701a      	strb	r2, [r3, #0]
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	3302      	adds	r3, #2
 8000a62:	2239      	movs	r2, #57	@ 0x39
 8000a64:	701a      	strb	r2, [r3, #0]
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	3303      	adds	r3, #3
 8000a6a:	2256      	movs	r2, #86	@ 0x56
 8000a6c:	701a      	strb	r2, [r3, #0]
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	3304      	adds	r3, #4
 8000a72:	2200      	movs	r2, #0
 8000a74:	701a      	strb	r2, [r3, #0]
 8000a76:	e12b      	b.n	8000cd0 <Vpp_to_string+0x618>
        case 20: str[0] = '2'; str[1] = '.'; str[2] = '0'; str[3] = 'V'; str[4] = '\0'; break;
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	2232      	movs	r2, #50	@ 0x32
 8000a7c:	701a      	strb	r2, [r3, #0]
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	3301      	adds	r3, #1
 8000a82:	222e      	movs	r2, #46	@ 0x2e
 8000a84:	701a      	strb	r2, [r3, #0]
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	3302      	adds	r3, #2
 8000a8a:	2230      	movs	r2, #48	@ 0x30
 8000a8c:	701a      	strb	r2, [r3, #0]
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	3303      	adds	r3, #3
 8000a92:	2256      	movs	r2, #86	@ 0x56
 8000a94:	701a      	strb	r2, [r3, #0]
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	3304      	adds	r3, #4
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	701a      	strb	r2, [r3, #0]
 8000a9e:	e117      	b.n	8000cd0 <Vpp_to_string+0x618>
        case 21: str[0] = '2'; str[1] = '.'; str[2] = '1'; str[3] = 'V'; str[4] = '\0'; break;
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	2232      	movs	r2, #50	@ 0x32
 8000aa4:	701a      	strb	r2, [r3, #0]
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	222e      	movs	r2, #46	@ 0x2e
 8000aac:	701a      	strb	r2, [r3, #0]
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	3302      	adds	r3, #2
 8000ab2:	2231      	movs	r2, #49	@ 0x31
 8000ab4:	701a      	strb	r2, [r3, #0]
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	3303      	adds	r3, #3
 8000aba:	2256      	movs	r2, #86	@ 0x56
 8000abc:	701a      	strb	r2, [r3, #0]
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	3304      	adds	r3, #4
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	701a      	strb	r2, [r3, #0]
 8000ac6:	e103      	b.n	8000cd0 <Vpp_to_string+0x618>
        case 22: str[0] = '2'; str[1] = '.'; str[2] = '2'; str[3] = 'V'; str[4] = '\0'; break;
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	2232      	movs	r2, #50	@ 0x32
 8000acc:	701a      	strb	r2, [r3, #0]
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	222e      	movs	r2, #46	@ 0x2e
 8000ad4:	701a      	strb	r2, [r3, #0]
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	3302      	adds	r3, #2
 8000ada:	2232      	movs	r2, #50	@ 0x32
 8000adc:	701a      	strb	r2, [r3, #0]
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	3303      	adds	r3, #3
 8000ae2:	2256      	movs	r2, #86	@ 0x56
 8000ae4:	701a      	strb	r2, [r3, #0]
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	3304      	adds	r3, #4
 8000aea:	2200      	movs	r2, #0
 8000aec:	701a      	strb	r2, [r3, #0]
 8000aee:	e0ef      	b.n	8000cd0 <Vpp_to_string+0x618>
        case 23: str[0] = '2'; str[1] = '.'; str[2] = '3'; str[3] = 'V'; str[4] = '\0'; break;
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	2232      	movs	r2, #50	@ 0x32
 8000af4:	701a      	strb	r2, [r3, #0]
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	3301      	adds	r3, #1
 8000afa:	222e      	movs	r2, #46	@ 0x2e
 8000afc:	701a      	strb	r2, [r3, #0]
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	3302      	adds	r3, #2
 8000b02:	2233      	movs	r2, #51	@ 0x33
 8000b04:	701a      	strb	r2, [r3, #0]
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	3303      	adds	r3, #3
 8000b0a:	2256      	movs	r2, #86	@ 0x56
 8000b0c:	701a      	strb	r2, [r3, #0]
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	3304      	adds	r3, #4
 8000b12:	2200      	movs	r2, #0
 8000b14:	701a      	strb	r2, [r3, #0]
 8000b16:	e0db      	b.n	8000cd0 <Vpp_to_string+0x618>
        case 24: str[0] = '2'; str[1] = '.'; str[2] = '4'; str[3] = 'V'; str[4] = '\0'; break;
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	2232      	movs	r2, #50	@ 0x32
 8000b1c:	701a      	strb	r2, [r3, #0]
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	3301      	adds	r3, #1
 8000b22:	222e      	movs	r2, #46	@ 0x2e
 8000b24:	701a      	strb	r2, [r3, #0]
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	3302      	adds	r3, #2
 8000b2a:	2234      	movs	r2, #52	@ 0x34
 8000b2c:	701a      	strb	r2, [r3, #0]
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	3303      	adds	r3, #3
 8000b32:	2256      	movs	r2, #86	@ 0x56
 8000b34:	701a      	strb	r2, [r3, #0]
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	3304      	adds	r3, #4
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	701a      	strb	r2, [r3, #0]
 8000b3e:	e0c7      	b.n	8000cd0 <Vpp_to_string+0x618>
        case 25: str[0] = '2'; str[1] = '.'; str[2] = '5'; str[3] = 'V'; str[4] = '\0'; break;
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	2232      	movs	r2, #50	@ 0x32
 8000b44:	701a      	strb	r2, [r3, #0]
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	222e      	movs	r2, #46	@ 0x2e
 8000b4c:	701a      	strb	r2, [r3, #0]
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	3302      	adds	r3, #2
 8000b52:	2235      	movs	r2, #53	@ 0x35
 8000b54:	701a      	strb	r2, [r3, #0]
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	3303      	adds	r3, #3
 8000b5a:	2256      	movs	r2, #86	@ 0x56
 8000b5c:	701a      	strb	r2, [r3, #0]
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	3304      	adds	r3, #4
 8000b62:	2200      	movs	r2, #0
 8000b64:	701a      	strb	r2, [r3, #0]
 8000b66:	e0b3      	b.n	8000cd0 <Vpp_to_string+0x618>
        case 26: str[0] = '2'; str[1] = '.'; str[2] = '6'; str[3] = 'V'; str[4] = '\0'; break;
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	2232      	movs	r2, #50	@ 0x32
 8000b6c:	701a      	strb	r2, [r3, #0]
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	3301      	adds	r3, #1
 8000b72:	222e      	movs	r2, #46	@ 0x2e
 8000b74:	701a      	strb	r2, [r3, #0]
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	3302      	adds	r3, #2
 8000b7a:	2236      	movs	r2, #54	@ 0x36
 8000b7c:	701a      	strb	r2, [r3, #0]
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	3303      	adds	r3, #3
 8000b82:	2256      	movs	r2, #86	@ 0x56
 8000b84:	701a      	strb	r2, [r3, #0]
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	3304      	adds	r3, #4
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	701a      	strb	r2, [r3, #0]
 8000b8e:	e09f      	b.n	8000cd0 <Vpp_to_string+0x618>
        case 27: str[0] = '2'; str[1] = '.'; str[2] = '7'; str[3] = 'V'; str[4] = '\0'; break;
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	2232      	movs	r2, #50	@ 0x32
 8000b94:	701a      	strb	r2, [r3, #0]
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	3301      	adds	r3, #1
 8000b9a:	222e      	movs	r2, #46	@ 0x2e
 8000b9c:	701a      	strb	r2, [r3, #0]
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	3302      	adds	r3, #2
 8000ba2:	2237      	movs	r2, #55	@ 0x37
 8000ba4:	701a      	strb	r2, [r3, #0]
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	3303      	adds	r3, #3
 8000baa:	2256      	movs	r2, #86	@ 0x56
 8000bac:	701a      	strb	r2, [r3, #0]
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	3304      	adds	r3, #4
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	701a      	strb	r2, [r3, #0]
 8000bb6:	e08b      	b.n	8000cd0 <Vpp_to_string+0x618>
        case 28: str[0] = '2'; str[1] = '.'; str[2] = '8'; str[3] = 'V'; str[4] = '\0'; break;
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	2232      	movs	r2, #50	@ 0x32
 8000bbc:	701a      	strb	r2, [r3, #0]
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	222e      	movs	r2, #46	@ 0x2e
 8000bc4:	701a      	strb	r2, [r3, #0]
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	3302      	adds	r3, #2
 8000bca:	2238      	movs	r2, #56	@ 0x38
 8000bcc:	701a      	strb	r2, [r3, #0]
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	3303      	adds	r3, #3
 8000bd2:	2256      	movs	r2, #86	@ 0x56
 8000bd4:	701a      	strb	r2, [r3, #0]
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	3304      	adds	r3, #4
 8000bda:	2200      	movs	r2, #0
 8000bdc:	701a      	strb	r2, [r3, #0]
 8000bde:	e077      	b.n	8000cd0 <Vpp_to_string+0x618>
        case 29: str[0] = '2'; str[1] = '.'; str[2] = '9'; str[3] = 'V'; str[4] = '\0'; break;
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	2232      	movs	r2, #50	@ 0x32
 8000be4:	701a      	strb	r2, [r3, #0]
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	3301      	adds	r3, #1
 8000bea:	222e      	movs	r2, #46	@ 0x2e
 8000bec:	701a      	strb	r2, [r3, #0]
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	3302      	adds	r3, #2
 8000bf2:	2239      	movs	r2, #57	@ 0x39
 8000bf4:	701a      	strb	r2, [r3, #0]
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	3303      	adds	r3, #3
 8000bfa:	2256      	movs	r2, #86	@ 0x56
 8000bfc:	701a      	strb	r2, [r3, #0]
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	3304      	adds	r3, #4
 8000c02:	2200      	movs	r2, #0
 8000c04:	701a      	strb	r2, [r3, #0]
 8000c06:	e063      	b.n	8000cd0 <Vpp_to_string+0x618>
        case 30: str[0] = '3'; str[1] = '.'; str[2] = '0'; str[3] = 'V'; str[4] = '\0'; break;
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	2233      	movs	r2, #51	@ 0x33
 8000c0c:	701a      	strb	r2, [r3, #0]
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	3301      	adds	r3, #1
 8000c12:	222e      	movs	r2, #46	@ 0x2e
 8000c14:	701a      	strb	r2, [r3, #0]
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	3302      	adds	r3, #2
 8000c1a:	2230      	movs	r2, #48	@ 0x30
 8000c1c:	701a      	strb	r2, [r3, #0]
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	3303      	adds	r3, #3
 8000c22:	2256      	movs	r2, #86	@ 0x56
 8000c24:	701a      	strb	r2, [r3, #0]
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	3304      	adds	r3, #4
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	701a      	strb	r2, [r3, #0]
 8000c2e:	e04f      	b.n	8000cd0 <Vpp_to_string+0x618>
        case 31: str[0] = '3'; str[1] = '.'; str[2] = '1'; str[3] = 'V'; str[4] = '\0'; break;
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	2233      	movs	r2, #51	@ 0x33
 8000c34:	701a      	strb	r2, [r3, #0]
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	3301      	adds	r3, #1
 8000c3a:	222e      	movs	r2, #46	@ 0x2e
 8000c3c:	701a      	strb	r2, [r3, #0]
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	3302      	adds	r3, #2
 8000c42:	2231      	movs	r2, #49	@ 0x31
 8000c44:	701a      	strb	r2, [r3, #0]
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	3303      	adds	r3, #3
 8000c4a:	2256      	movs	r2, #86	@ 0x56
 8000c4c:	701a      	strb	r2, [r3, #0]
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	3304      	adds	r3, #4
 8000c52:	2200      	movs	r2, #0
 8000c54:	701a      	strb	r2, [r3, #0]
 8000c56:	e03b      	b.n	8000cd0 <Vpp_to_string+0x618>
        case 32: str[0] = '3'; str[1] = '.'; str[2] = '2'; str[3] = 'V'; str[4] = '\0'; break;
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	2233      	movs	r2, #51	@ 0x33
 8000c5c:	701a      	strb	r2, [r3, #0]
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	3301      	adds	r3, #1
 8000c62:	222e      	movs	r2, #46	@ 0x2e
 8000c64:	701a      	strb	r2, [r3, #0]
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	3302      	adds	r3, #2
 8000c6a:	2232      	movs	r2, #50	@ 0x32
 8000c6c:	701a      	strb	r2, [r3, #0]
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	3303      	adds	r3, #3
 8000c72:	2256      	movs	r2, #86	@ 0x56
 8000c74:	701a      	strb	r2, [r3, #0]
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	3304      	adds	r3, #4
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	701a      	strb	r2, [r3, #0]
 8000c7e:	e027      	b.n	8000cd0 <Vpp_to_string+0x618>
        case 33: str[0] = '3'; str[1] = '.'; str[2] = '3'; str[3] = 'V'; str[4] = '\0'; break;
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	2233      	movs	r2, #51	@ 0x33
 8000c84:	701a      	strb	r2, [r3, #0]
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	3301      	adds	r3, #1
 8000c8a:	222e      	movs	r2, #46	@ 0x2e
 8000c8c:	701a      	strb	r2, [r3, #0]
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	3302      	adds	r3, #2
 8000c92:	2233      	movs	r2, #51	@ 0x33
 8000c94:	701a      	strb	r2, [r3, #0]
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	3303      	adds	r3, #3
 8000c9a:	2256      	movs	r2, #86	@ 0x56
 8000c9c:	701a      	strb	r2, [r3, #0]
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	3304      	adds	r3, #4
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	701a      	strb	r2, [r3, #0]
 8000ca6:	e013      	b.n	8000cd0 <Vpp_to_string+0x618>
        default: str[0] = '-'; str[1] = '-'; str[2] = '-'; str[3] = '-'; str[4] = '\0'; break;
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	222d      	movs	r2, #45	@ 0x2d
 8000cac:	701a      	strb	r2, [r3, #0]
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	222d      	movs	r2, #45	@ 0x2d
 8000cb4:	701a      	strb	r2, [r3, #0]
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	3302      	adds	r3, #2
 8000cba:	222d      	movs	r2, #45	@ 0x2d
 8000cbc:	701a      	strb	r2, [r3, #0]
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	3303      	adds	r3, #3
 8000cc2:	222d      	movs	r2, #45	@ 0x2d
 8000cc4:	701a      	strb	r2, [r3, #0]
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	3304      	adds	r3, #4
 8000cca:	2200      	movs	r2, #0
 8000ccc:	701a      	strb	r2, [r3, #0]
 8000cce:	bf00      	nop
    }
    return str;
 8000cd0:	683b      	ldr	r3, [r7, #0]
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop

08000ce0 <freq_to_string>:

char* freq_to_string(uint32_t num, char *str) {
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	6039      	str	r1, [r7, #0]
    switch (num) {
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4a6c      	ldr	r2, [pc, #432]	@ (8000ea0 <freq_to_string+0x1c0>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	f000 809f 	beq.w	8000e32 <freq_to_string+0x152>
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	4a6a      	ldr	r2, [pc, #424]	@ (8000ea0 <freq_to_string+0x1c0>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	f200 80b2 	bhi.w	8000e62 <freq_to_string+0x182>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d07c      	beq.n	8000e02 <freq_to_string+0x122>
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	f200 80a7 	bhi.w	8000e62 <freq_to_string+0x182>
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000d1a:	d05a      	beq.n	8000dd2 <freq_to_string+0xf2>
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000d22:	f200 809e 	bhi.w	8000e62 <freq_to_string+0x182>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2b64      	cmp	r3, #100	@ 0x64
 8000d2a:	d03a      	beq.n	8000da2 <freq_to_string+0xc2>
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2b64      	cmp	r3, #100	@ 0x64
 8000d30:	f200 8097 	bhi.w	8000e62 <freq_to_string+0x182>
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d003      	beq.n	8000d42 <freq_to_string+0x62>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2b0a      	cmp	r3, #10
 8000d3e:	d018      	beq.n	8000d72 <freq_to_string+0x92>
 8000d40:	e08f      	b.n	8000e62 <freq_to_string+0x182>
        case 1: 	str[0] = '1'; str[1] = 'H'; str[2] = 'z'; str[3] = ' '; str[4] = ' '; str[5] = '\0'; break;
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	2231      	movs	r2, #49	@ 0x31
 8000d46:	701a      	strb	r2, [r3, #0]
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	2248      	movs	r2, #72	@ 0x48
 8000d4e:	701a      	strb	r2, [r3, #0]
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	3302      	adds	r3, #2
 8000d54:	227a      	movs	r2, #122	@ 0x7a
 8000d56:	701a      	strb	r2, [r3, #0]
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	3303      	adds	r3, #3
 8000d5c:	2220      	movs	r2, #32
 8000d5e:	701a      	strb	r2, [r3, #0]
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	3304      	adds	r3, #4
 8000d64:	2220      	movs	r2, #32
 8000d66:	701a      	strb	r2, [r3, #0]
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	3305      	adds	r3, #5
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	701a      	strb	r2, [r3, #0]
 8000d70:	e08f      	b.n	8000e92 <freq_to_string+0x1b2>
        case 10: 	str[0] = '1'; str[1] = '0'; str[2] = 'H'; str[3] = 'z'; str[4] = ' '; str[5] = '\0'; break;
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	2231      	movs	r2, #49	@ 0x31
 8000d76:	701a      	strb	r2, [r3, #0]
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	2230      	movs	r2, #48	@ 0x30
 8000d7e:	701a      	strb	r2, [r3, #0]
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	3302      	adds	r3, #2
 8000d84:	2248      	movs	r2, #72	@ 0x48
 8000d86:	701a      	strb	r2, [r3, #0]
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	3303      	adds	r3, #3
 8000d8c:	227a      	movs	r2, #122	@ 0x7a
 8000d8e:	701a      	strb	r2, [r3, #0]
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	3304      	adds	r3, #4
 8000d94:	2220      	movs	r2, #32
 8000d96:	701a      	strb	r2, [r3, #0]
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	3305      	adds	r3, #5
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	701a      	strb	r2, [r3, #0]
 8000da0:	e077      	b.n	8000e92 <freq_to_string+0x1b2>
        case 100: 	str[0] = '1'; str[1] = '0'; str[2] = '0'; str[3] = 'H'; str[4] = 'z'; str[5] = '\0'; break;
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	2231      	movs	r2, #49	@ 0x31
 8000da6:	701a      	strb	r2, [r3, #0]
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	3301      	adds	r3, #1
 8000dac:	2230      	movs	r2, #48	@ 0x30
 8000dae:	701a      	strb	r2, [r3, #0]
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	3302      	adds	r3, #2
 8000db4:	2230      	movs	r2, #48	@ 0x30
 8000db6:	701a      	strb	r2, [r3, #0]
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	3303      	adds	r3, #3
 8000dbc:	2248      	movs	r2, #72	@ 0x48
 8000dbe:	701a      	strb	r2, [r3, #0]
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	3304      	adds	r3, #4
 8000dc4:	227a      	movs	r2, #122	@ 0x7a
 8000dc6:	701a      	strb	r2, [r3, #0]
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	3305      	adds	r3, #5
 8000dcc:	2200      	movs	r2, #0
 8000dce:	701a      	strb	r2, [r3, #0]
 8000dd0:	e05f      	b.n	8000e92 <freq_to_string+0x1b2>
        case 1000: 	str[0] = '1'; str[1] = 'k'; str[2] = 'H'; str[3] = 'z'; str[4] = ' '; str[5] = '\0'; break;
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	2231      	movs	r2, #49	@ 0x31
 8000dd6:	701a      	strb	r2, [r3, #0]
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	3301      	adds	r3, #1
 8000ddc:	226b      	movs	r2, #107	@ 0x6b
 8000dde:	701a      	strb	r2, [r3, #0]
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	3302      	adds	r3, #2
 8000de4:	2248      	movs	r2, #72	@ 0x48
 8000de6:	701a      	strb	r2, [r3, #0]
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	3303      	adds	r3, #3
 8000dec:	227a      	movs	r2, #122	@ 0x7a
 8000dee:	701a      	strb	r2, [r3, #0]
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	3304      	adds	r3, #4
 8000df4:	2220      	movs	r2, #32
 8000df6:	701a      	strb	r2, [r3, #0]
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	3305      	adds	r3, #5
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	701a      	strb	r2, [r3, #0]
 8000e00:	e047      	b.n	8000e92 <freq_to_string+0x1b2>
        case 10000: str[0] = '1'; str[1] = '0'; str[2] = 'k'; str[3] = 'H'; str[4] = 'z'; str[5] = '\0'; break;
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	2231      	movs	r2, #49	@ 0x31
 8000e06:	701a      	strb	r2, [r3, #0]
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	2230      	movs	r2, #48	@ 0x30
 8000e0e:	701a      	strb	r2, [r3, #0]
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	3302      	adds	r3, #2
 8000e14:	226b      	movs	r2, #107	@ 0x6b
 8000e16:	701a      	strb	r2, [r3, #0]
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	3303      	adds	r3, #3
 8000e1c:	2248      	movs	r2, #72	@ 0x48
 8000e1e:	701a      	strb	r2, [r3, #0]
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	3304      	adds	r3, #4
 8000e24:	227a      	movs	r2, #122	@ 0x7a
 8000e26:	701a      	strb	r2, [r3, #0]
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	3305      	adds	r3, #5
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	701a      	strb	r2, [r3, #0]
 8000e30:	e02f      	b.n	8000e92 <freq_to_string+0x1b2>
        case 100000:str[0] = '1'; str[1] = '0'; str[2] = '0'; str[3] = 'k'; str[4] = ' '; str[5] = '\0'; break;
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	2231      	movs	r2, #49	@ 0x31
 8000e36:	701a      	strb	r2, [r3, #0]
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	2230      	movs	r2, #48	@ 0x30
 8000e3e:	701a      	strb	r2, [r3, #0]
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	3302      	adds	r3, #2
 8000e44:	2230      	movs	r2, #48	@ 0x30
 8000e46:	701a      	strb	r2, [r3, #0]
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	3303      	adds	r3, #3
 8000e4c:	226b      	movs	r2, #107	@ 0x6b
 8000e4e:	701a      	strb	r2, [r3, #0]
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	3304      	adds	r3, #4
 8000e54:	2220      	movs	r2, #32
 8000e56:	701a      	strb	r2, [r3, #0]
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	3305      	adds	r3, #5
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	701a      	strb	r2, [r3, #0]
 8000e60:	e017      	b.n	8000e92 <freq_to_string+0x1b2>
        default: 	str[0] = '-'; str[1] = '-'; str[2] = '-'; str[3] = '-'; str[4] = '-'; str[5] = '\0'; break;
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	222d      	movs	r2, #45	@ 0x2d
 8000e66:	701a      	strb	r2, [r3, #0]
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	222d      	movs	r2, #45	@ 0x2d
 8000e6e:	701a      	strb	r2, [r3, #0]
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	3302      	adds	r3, #2
 8000e74:	222d      	movs	r2, #45	@ 0x2d
 8000e76:	701a      	strb	r2, [r3, #0]
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	3303      	adds	r3, #3
 8000e7c:	222d      	movs	r2, #45	@ 0x2d
 8000e7e:	701a      	strb	r2, [r3, #0]
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	3304      	adds	r3, #4
 8000e84:	222d      	movs	r2, #45	@ 0x2d
 8000e86:	701a      	strb	r2, [r3, #0]
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	3305      	adds	r3, #5
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	701a      	strb	r2, [r3, #0]
 8000e90:	bf00      	nop
    }
    return str;
 8000e92:	683b      	ldr	r3, [r7, #0]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	000186a0 	.word	0x000186a0

08000ea4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b08c      	sub	sp, #48	@ 0x30
 8000ea8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eaa:	f001 fa25 	bl	80022f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eae:	f000 f8db 	bl	8001068 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000eb2:	f000 f92a 	bl	800110a <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eb6:	f000 fba9 	bl	800160c <MX_GPIO_Init>
  MX_DMA_Init();
 8000eba:	f000 fb81 	bl	80015c0 <MX_DMA_Init>
  MX_ADC1_Init();
 8000ebe:	f000 f94f 	bl	8001160 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000ec2:	f000 f9c3 	bl	800124c <MX_ADC2_Init>
  MX_SPI2_Init();
 8000ec6:	f000 fa97 	bl	80013f8 <MX_SPI2_Init>
  MX_I2C1_Init();
 8000eca:	f000 fa55 	bl	8001378 <MX_I2C1_Init>
  MX_DAC1_Init();
 8000ece:	f000 fa21 	bl	8001314 <MX_DAC1_Init>
  MX_TIM2_Init();
 8000ed2:	f000 facf 	bl	8001474 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000ed6:	f000 fb43 	bl	8001560 <MX_USART2_UART_Init>
//  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // start PWM on Timer3’s Channel 1
//  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); // start PWM on Timer3’s Channel 2

  // LCD
  // I2C pull-up resistors
  GPIOB->PUPDR |= 0b01 << (8*2);
 8000eda:	4b58      	ldr	r3, [pc, #352]	@ (800103c <main+0x198>)
 8000edc:	68db      	ldr	r3, [r3, #12]
 8000ede:	4a57      	ldr	r2, [pc, #348]	@ (800103c <main+0x198>)
 8000ee0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ee4:	60d3      	str	r3, [r2, #12]
  GPIOB->PUPDR |= 0b01 << (9*2);
 8000ee6:	4b55      	ldr	r3, [pc, #340]	@ (800103c <main+0x198>)
 8000ee8:	68db      	ldr	r3, [r3, #12]
 8000eea:	4a54      	ldr	r2, [pc, #336]	@ (800103c <main+0x198>)
 8000eec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ef0:	60d3      	str	r3, [r2, #12]
  // Initialize the LCD
  lcd_init();
 8000ef2:	f7ff fb60 	bl	80005b6 <lcd_init>
  lcd_backlight(1); // Turn on backlight
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	f7ff fbc6 	bl	8000688 <lcd_backlight>
  // TODO
  // Write a string to the LCD
  lcd_write_string("Peak-Peak: "); // ends column 11 (4 columns left)
 8000efc:	4850      	ldr	r0, [pc, #320]	@ (8001040 <main+0x19c>)
 8000efe:	f7ff fb89 	bl	8000614 <lcd_write_string>
//  Vpp_float_to_string(Vpp, Vpp_str);
//  lcd_write_string(Vpp_str);

  lcd_set_cursor(1, 0);
 8000f02:	2100      	movs	r1, #0
 8000f04:	2001      	movs	r0, #1
 8000f06:	f7ff fb9a 	bl	800063e <lcd_set_cursor>
  lcd_write_string("Frequency: "); // ends column 11 (4 columns left)
 8000f0a:	484e      	ldr	r0, [pc, #312]	@ (8001044 <main+0x1a0>)
 8000f0c:	f7ff fb82 	bl	8000614 <lcd_write_string>
//  lcd_write_string(freq_str);


  // TODO
  // display sin wave?
  GLCD_init(); // initialize the screen
 8000f10:	f000 fd3a 	bl	8001988 <GLCD_init>
  GLCD_clear(); // clear the screen
 8000f14:	f000 fd7a 	bl	8001a0c <GLCD_clear>
  GLCD_putchar(1); // 'A'
 8000f18:	2001      	movs	r0, #1
 8000f1a:	f000 fd8f 	bl	8001a3c <GLCD_putchar>
  GLCD_putchar(2); // 'B'
 8000f1e:	2002      	movs	r0, #2
 8000f20:	f000 fd8c 	bl	8001a3c <GLCD_putchar>
  GLCD_putchar(3); // 'C'
 8000f24:	2003      	movs	r0, #3
 8000f26:	f000 fd89 	bl	8001a3c <GLCD_putchar>
//  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, threeVoltValue);
//  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);

//  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)digital_sine_wave, 128, DAC_ALIGN_12B_R);

  HAL_TIM_Base_Start(&htim2);
 8000f2a:	4847      	ldr	r0, [pc, #284]	@ (8001048 <main+0x1a4>)
 8000f2c:	f006 f8d4 	bl	80070d8 <HAL_TIM_Base_Start>
  update_sine_wave(Vpp, freq);
 8000f30:	4b46      	ldr	r3, [pc, #280]	@ (800104c <main+0x1a8>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a46      	ldr	r2, [pc, #280]	@ (8001050 <main+0x1ac>)
 8000f36:	6812      	ldr	r2, [r2, #0]
 8000f38:	4611      	mov	r1, r2
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f000 fcb8 	bl	80018b0 <update_sine_wave>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		lcd_set_cursor(0, 11);
 8000f40:	210b      	movs	r1, #11
 8000f42:	2000      	movs	r0, #0
 8000f44:	f7ff fb7b 	bl	800063e <lcd_set_cursor>
		Vpp_to_string(Vpp, Vpp_str);
 8000f48:	4b40      	ldr	r3, [pc, #256]	@ (800104c <main+0x1a8>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4941      	ldr	r1, [pc, #260]	@ (8001054 <main+0x1b0>)
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f7ff fbb2 	bl	80006b8 <Vpp_to_string>
		lcd_write_string(Vpp_str);
 8000f54:	483f      	ldr	r0, [pc, #252]	@ (8001054 <main+0x1b0>)
 8000f56:	f7ff fb5d 	bl	8000614 <lcd_write_string>

		lcd_set_cursor(1, 11);
 8000f5a:	210b      	movs	r1, #11
 8000f5c:	2001      	movs	r0, #1
 8000f5e:	f7ff fb6e 	bl	800063e <lcd_set_cursor>
	    freq_to_string(freq, freq_str);
 8000f62:	4b3b      	ldr	r3, [pc, #236]	@ (8001050 <main+0x1ac>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	493c      	ldr	r1, [pc, #240]	@ (8001058 <main+0x1b4>)
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff feb9 	bl	8000ce0 <freq_to_string>
	    lcd_write_string(freq_str);
 8000f6e:	483a      	ldr	r0, [pc, #232]	@ (8001058 <main+0x1b4>)
 8000f70:	f7ff fb50 	bl	8000614 <lcd_write_string>



		HAL_ADC_Start(&hadc1);
 8000f74:	4839      	ldr	r0, [pc, #228]	@ (800105c <main+0x1b8>)
 8000f76:	f001 fd93 	bl	8002aa0 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000f7a:	f04f 31ff 	mov.w	r1, #4294967295
 8000f7e:	4837      	ldr	r0, [pc, #220]	@ (800105c <main+0x1b8>)
 8000f80:	f001 fe48 	bl	8002c14 <HAL_ADC_PollForConversion>
		uint16_t channel_1 = HAL_ADC_GetValue(&hadc1);
 8000f84:	4835      	ldr	r0, [pc, #212]	@ (800105c <main+0x1b8>)
 8000f86:	f001 ff1d 	bl	8002dc4 <HAL_ADC_GetValue>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	847b      	strh	r3, [r7, #34]	@ 0x22

		HAL_ADC_Start(&hadc2);
 8000f8e:	4834      	ldr	r0, [pc, #208]	@ (8001060 <main+0x1bc>)
 8000f90:	f001 fd86 	bl	8002aa0 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 8000f94:	f04f 31ff 	mov.w	r1, #4294967295
 8000f98:	4831      	ldr	r0, [pc, #196]	@ (8001060 <main+0x1bc>)
 8000f9a:	f001 fe3b 	bl	8002c14 <HAL_ADC_PollForConversion>
		uint16_t channel_2 = HAL_ADC_GetValue(&hadc2);
 8000f9e:	4830      	ldr	r0, [pc, #192]	@ (8001060 <main+0x1bc>)
 8000fa0:	f001 ff10 	bl	8002dc4 <HAL_ADC_GetValue>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	843b      	strh	r3, [r7, #32]

		char buffer[16];
		char *ptr = buffer;
 8000fa8:	f107 0310 	add.w	r3, r7, #16
 8000fac:	62fb      	str	r3, [r7, #44]	@ 0x2c

		// TODO
		// Convert channel_1
		char str1[6]; // Max 5 digits + null
		uint16_to_str(channel_1, str1);
 8000fae:	f107 0208 	add.w	r2, r7, #8
 8000fb2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000fb4:	4611      	mov	r1, r2
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f000 fbd6 	bl	8001768 <uint16_to_str>
		char *s1 = str1;  // pointer to traverse the array
 8000fbc:	f107 0308 	add.w	r3, r7, #8
 8000fc0:	62bb      	str	r3, [r7, #40]	@ 0x28
		while (*s1) *ptr++ = *s1++;
 8000fc2:	e007      	b.n	8000fd4 <main+0x130>
 8000fc4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000fc6:	1c53      	adds	r3, r2, #1
 8000fc8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000fca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fcc:	1c59      	adds	r1, r3, #1
 8000fce:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8000fd0:	7812      	ldrb	r2, [r2, #0]
 8000fd2:	701a      	strb	r2, [r3, #0]
 8000fd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d1f3      	bne.n	8000fc4 <main+0x120>

		*ptr++ = ',';
 8000fdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fde:	1c5a      	adds	r2, r3, #1
 8000fe0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000fe2:	222c      	movs	r2, #44	@ 0x2c
 8000fe4:	701a      	strb	r2, [r3, #0]

		// Convert channel_2
		char str2[6];
		uint16_to_str(channel_2, str2);
 8000fe6:	463a      	mov	r2, r7
 8000fe8:	8c3b      	ldrh	r3, [r7, #32]
 8000fea:	4611      	mov	r1, r2
 8000fec:	4618      	mov	r0, r3
 8000fee:	f000 fbbb 	bl	8001768 <uint16_to_str>
		char *s2 = str2;  // pointer to traverse the second string
 8000ff2:	463b      	mov	r3, r7
 8000ff4:	627b      	str	r3, [r7, #36]	@ 0x24
		while (*s2) *ptr++ = *s2++;
 8000ff6:	e007      	b.n	8001008 <main+0x164>
 8000ff8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ffa:	1c53      	adds	r3, r2, #1
 8000ffc:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ffe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001000:	1c59      	adds	r1, r3, #1
 8001002:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8001004:	7812      	ldrb	r2, [r2, #0]
 8001006:	701a      	strb	r2, [r3, #0]
 8001008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d1f3      	bne.n	8000ff8 <main+0x154>

		*ptr++ = '\n';
 8001010:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001012:	1c5a      	adds	r2, r3, #1
 8001014:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001016:	220a      	movs	r2, #10
 8001018:	701a      	strb	r2, [r3, #0]
		*ptr = '\0';
 800101a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800101c:	2200      	movs	r2, #0
 800101e:	701a      	strb	r2, [r3, #0]

		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, (uint16_t)(ptr - buffer), HAL_MAX_DELAY);
 8001020:	f107 0310 	add.w	r3, r7, #16
 8001024:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001026:	1ad3      	subs	r3, r2, r3
 8001028:	b29a      	uxth	r2, r3
 800102a:	f107 0110 	add.w	r1, r7, #16
 800102e:	f04f 33ff 	mov.w	r3, #4294967295
 8001032:	480c      	ldr	r0, [pc, #48]	@ (8001064 <main+0x1c0>)
 8001034:	f007 f92c 	bl	8008290 <HAL_UART_Transmit>
  {
 8001038:	e782      	b.n	8000f40 <main+0x9c>
 800103a:	bf00      	nop
 800103c:	48000400 	.word	0x48000400
 8001040:	0800949c 	.word	0x0800949c
 8001044:	080094a8 	.word	0x080094a8
 8001048:	20000410 	.word	0x20000410
 800104c:	20000204 	.word	0x20000204
 8001050:	20000208 	.word	0x20000208
 8001054:	2000072c 	.word	0x2000072c
 8001058:	20000738 	.word	0x20000738
 800105c:	20000234 	.word	0x20000234
 8001060:	20000298 	.word	0x20000298
 8001064:	2000045c 	.word	0x2000045c

08001068 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b096      	sub	sp, #88	@ 0x58
 800106c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800106e:	f107 0314 	add.w	r3, r7, #20
 8001072:	2244      	movs	r2, #68	@ 0x44
 8001074:	2100      	movs	r1, #0
 8001076:	4618      	mov	r0, r3
 8001078:	f008 f9d7 	bl	800942a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800107c:	463b      	mov	r3, r7
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	605a      	str	r2, [r3, #4]
 8001084:	609a      	str	r2, [r3, #8]
 8001086:	60da      	str	r2, [r3, #12]
 8001088:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800108a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800108e:	f004 f93b 	bl	8005308 <HAL_PWREx_ControlVoltageScaling>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001098:	f000 fdbc 	bl	8001c14 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800109c:	2302      	movs	r3, #2
 800109e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010a4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010a6:	2310      	movs	r3, #16
 80010a8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010aa:	2302      	movs	r3, #2
 80010ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010ae:	2302      	movs	r3, #2
 80010b0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80010b2:	2301      	movs	r3, #1
 80010b4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80010b6:	230a      	movs	r3, #10
 80010b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80010ba:	2307      	movs	r3, #7
 80010bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010be:	2302      	movs	r3, #2
 80010c0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010c2:	2302      	movs	r3, #2
 80010c4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010c6:	f107 0314 	add.w	r3, r7, #20
 80010ca:	4618      	mov	r0, r3
 80010cc:	f004 f972 	bl	80053b4 <HAL_RCC_OscConfig>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <SystemClock_Config+0x72>
  {
    Error_Handler();
 80010d6:	f000 fd9d 	bl	8001c14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010da:	230f      	movs	r3, #15
 80010dc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010de:	2303      	movs	r3, #3
 80010e0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010e2:	2300      	movs	r3, #0
 80010e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010e6:	2300      	movs	r3, #0
 80010e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010ea:	2300      	movs	r3, #0
 80010ec:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010ee:	463b      	mov	r3, r7
 80010f0:	2104      	movs	r1, #4
 80010f2:	4618      	mov	r0, r3
 80010f4:	f004 fd3a 	bl	8005b6c <HAL_RCC_ClockConfig>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80010fe:	f000 fd89 	bl	8001c14 <Error_Handler>
  }
}
 8001102:	bf00      	nop
 8001104:	3758      	adds	r7, #88	@ 0x58
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	b0a2      	sub	sp, #136	@ 0x88
 800110e:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001110:	463b      	mov	r3, r7
 8001112:	2288      	movs	r2, #136	@ 0x88
 8001114:	2100      	movs	r1, #0
 8001116:	4618      	mov	r0, r3
 8001118:	f008 f987 	bl	800942a <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800111c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001120:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001122:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001126:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001128:	2302      	movs	r3, #2
 800112a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800112c:	2301      	movs	r3, #1
 800112e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001130:	2308      	movs	r3, #8
 8001132:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001134:	2307      	movs	r3, #7
 8001136:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001138:	2302      	movs	r3, #2
 800113a:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800113c:	2302      	movs	r3, #2
 800113e:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001140:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001144:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001146:	463b      	mov	r3, r7
 8001148:	4618      	mov	r0, r3
 800114a:	f004 ff33 	bl	8005fb4 <HAL_RCCEx_PeriphCLKConfig>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 8001154:	f000 fd5e 	bl	8001c14 <Error_Handler>
  }
}
 8001158:	bf00      	nop
 800115a:	3788      	adds	r7, #136	@ 0x88
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b08a      	sub	sp, #40	@ 0x28
 8001164:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001166:	f107 031c 	add.w	r3, r7, #28
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	605a      	str	r2, [r3, #4]
 8001170:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001172:	1d3b      	adds	r3, r7, #4
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
 800117e:	611a      	str	r2, [r3, #16]
 8001180:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001182:	4b2f      	ldr	r3, [pc, #188]	@ (8001240 <MX_ADC1_Init+0xe0>)
 8001184:	4a2f      	ldr	r2, [pc, #188]	@ (8001244 <MX_ADC1_Init+0xe4>)
 8001186:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001188:	4b2d      	ldr	r3, [pc, #180]	@ (8001240 <MX_ADC1_Init+0xe0>)
 800118a:	2200      	movs	r2, #0
 800118c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800118e:	4b2c      	ldr	r3, [pc, #176]	@ (8001240 <MX_ADC1_Init+0xe0>)
 8001190:	2200      	movs	r2, #0
 8001192:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001194:	4b2a      	ldr	r3, [pc, #168]	@ (8001240 <MX_ADC1_Init+0xe0>)
 8001196:	2200      	movs	r2, #0
 8001198:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800119a:	4b29      	ldr	r3, [pc, #164]	@ (8001240 <MX_ADC1_Init+0xe0>)
 800119c:	2200      	movs	r2, #0
 800119e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011a0:	4b27      	ldr	r3, [pc, #156]	@ (8001240 <MX_ADC1_Init+0xe0>)
 80011a2:	2204      	movs	r2, #4
 80011a4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80011a6:	4b26      	ldr	r3, [pc, #152]	@ (8001240 <MX_ADC1_Init+0xe0>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011ac:	4b24      	ldr	r3, [pc, #144]	@ (8001240 <MX_ADC1_Init+0xe0>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80011b2:	4b23      	ldr	r3, [pc, #140]	@ (8001240 <MX_ADC1_Init+0xe0>)
 80011b4:	2201      	movs	r2, #1
 80011b6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011b8:	4b21      	ldr	r3, [pc, #132]	@ (8001240 <MX_ADC1_Init+0xe0>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001240 <MX_ADC1_Init+0xe0>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011c6:	4b1e      	ldr	r3, [pc, #120]	@ (8001240 <MX_ADC1_Init+0xe0>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011cc:	4b1c      	ldr	r3, [pc, #112]	@ (8001240 <MX_ADC1_Init+0xe0>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001240 <MX_ADC1_Init+0xe0>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80011da:	4b19      	ldr	r3, [pc, #100]	@ (8001240 <MX_ADC1_Init+0xe0>)
 80011dc:	2200      	movs	r2, #0
 80011de:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011e2:	4817      	ldr	r0, [pc, #92]	@ (8001240 <MX_ADC1_Init+0xe0>)
 80011e4:	f001 fb0c 	bl	8002800 <HAL_ADC_Init>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80011ee:	f000 fd11 	bl	8001c14 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80011f2:	2300      	movs	r3, #0
 80011f4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80011f6:	f107 031c 	add.w	r3, r7, #28
 80011fa:	4619      	mov	r1, r3
 80011fc:	4810      	ldr	r0, [pc, #64]	@ (8001240 <MX_ADC1_Init+0xe0>)
 80011fe:	f002 fa8d 	bl	800371c <HAL_ADCEx_MultiModeConfigChannel>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001208:	f000 fd04 	bl	8001c14 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800120c:	4b0e      	ldr	r3, [pc, #56]	@ (8001248 <MX_ADC1_Init+0xe8>)
 800120e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001210:	2306      	movs	r3, #6
 8001212:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001214:	2300      	movs	r3, #0
 8001216:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001218:	237f      	movs	r3, #127	@ 0x7f
 800121a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800121c:	2304      	movs	r3, #4
 800121e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001220:	2300      	movs	r3, #0
 8001222:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001224:	1d3b      	adds	r3, r7, #4
 8001226:	4619      	mov	r1, r3
 8001228:	4805      	ldr	r0, [pc, #20]	@ (8001240 <MX_ADC1_Init+0xe0>)
 800122a:	f001 fdd9 	bl	8002de0 <HAL_ADC_ConfigChannel>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001234:	f000 fcee 	bl	8001c14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001238:	bf00      	nop
 800123a:	3728      	adds	r7, #40	@ 0x28
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	20000234 	.word	0x20000234
 8001244:	50040000 	.word	0x50040000
 8001248:	14f00020 	.word	0x14f00020

0800124c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001252:	463b      	mov	r3, r7
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	611a      	str	r2, [r3, #16]
 8001260:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001262:	4b29      	ldr	r3, [pc, #164]	@ (8001308 <MX_ADC2_Init+0xbc>)
 8001264:	4a29      	ldr	r2, [pc, #164]	@ (800130c <MX_ADC2_Init+0xc0>)
 8001266:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001268:	4b27      	ldr	r3, [pc, #156]	@ (8001308 <MX_ADC2_Init+0xbc>)
 800126a:	2200      	movs	r2, #0
 800126c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800126e:	4b26      	ldr	r3, [pc, #152]	@ (8001308 <MX_ADC2_Init+0xbc>)
 8001270:	2200      	movs	r2, #0
 8001272:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001274:	4b24      	ldr	r3, [pc, #144]	@ (8001308 <MX_ADC2_Init+0xbc>)
 8001276:	2200      	movs	r2, #0
 8001278:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800127a:	4b23      	ldr	r3, [pc, #140]	@ (8001308 <MX_ADC2_Init+0xbc>)
 800127c:	2200      	movs	r2, #0
 800127e:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001280:	4b21      	ldr	r3, [pc, #132]	@ (8001308 <MX_ADC2_Init+0xbc>)
 8001282:	2204      	movs	r2, #4
 8001284:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001286:	4b20      	ldr	r3, [pc, #128]	@ (8001308 <MX_ADC2_Init+0xbc>)
 8001288:	2200      	movs	r2, #0
 800128a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800128c:	4b1e      	ldr	r3, [pc, #120]	@ (8001308 <MX_ADC2_Init+0xbc>)
 800128e:	2200      	movs	r2, #0
 8001290:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8001292:	4b1d      	ldr	r3, [pc, #116]	@ (8001308 <MX_ADC2_Init+0xbc>)
 8001294:	2201      	movs	r2, #1
 8001296:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001298:	4b1b      	ldr	r3, [pc, #108]	@ (8001308 <MX_ADC2_Init+0xbc>)
 800129a:	2200      	movs	r2, #0
 800129c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012a0:	4b19      	ldr	r3, [pc, #100]	@ (8001308 <MX_ADC2_Init+0xbc>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012a6:	4b18      	ldr	r3, [pc, #96]	@ (8001308 <MX_ADC2_Init+0xbc>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80012ac:	4b16      	ldr	r3, [pc, #88]	@ (8001308 <MX_ADC2_Init+0xbc>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012b4:	4b14      	ldr	r3, [pc, #80]	@ (8001308 <MX_ADC2_Init+0xbc>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80012ba:	4b13      	ldr	r3, [pc, #76]	@ (8001308 <MX_ADC2_Init+0xbc>)
 80012bc:	2200      	movs	r2, #0
 80012be:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80012c2:	4811      	ldr	r0, [pc, #68]	@ (8001308 <MX_ADC2_Init+0xbc>)
 80012c4:	f001 fa9c 	bl	8002800 <HAL_ADC_Init>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 80012ce:	f000 fca1 	bl	8001c14 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80012d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001310 <MX_ADC2_Init+0xc4>)
 80012d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012d6:	2306      	movs	r3, #6
 80012d8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80012da:	2300      	movs	r3, #0
 80012dc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012de:	237f      	movs	r3, #127	@ 0x7f
 80012e0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012e2:	2304      	movs	r3, #4
 80012e4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80012e6:	2300      	movs	r3, #0
 80012e8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80012ea:	463b      	mov	r3, r7
 80012ec:	4619      	mov	r1, r3
 80012ee:	4806      	ldr	r0, [pc, #24]	@ (8001308 <MX_ADC2_Init+0xbc>)
 80012f0:	f001 fd76 	bl	8002de0 <HAL_ADC_ConfigChannel>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 80012fa:	f000 fc8b 	bl	8001c14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80012fe:	bf00      	nop
 8001300:	3718      	adds	r7, #24
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	20000298 	.word	0x20000298
 800130c:	50040100 	.word	0x50040100
 8001310:	19200040 	.word	0x19200040

08001314 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b08a      	sub	sp, #40	@ 0x28
 8001318:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800131a:	1d3b      	adds	r3, r7, #4
 800131c:	2224      	movs	r2, #36	@ 0x24
 800131e:	2100      	movs	r1, #0
 8001320:	4618      	mov	r0, r3
 8001322:	f008 f882 	bl	800942a <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001326:	4b12      	ldr	r3, [pc, #72]	@ (8001370 <MX_DAC1_Init+0x5c>)
 8001328:	4a12      	ldr	r2, [pc, #72]	@ (8001374 <MX_DAC1_Init+0x60>)
 800132a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800132c:	4810      	ldr	r0, [pc, #64]	@ (8001370 <MX_DAC1_Init+0x5c>)
 800132e:	f002 fbb6 	bl	8003a9e <HAL_DAC_Init>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001338:	f000 fc6c 	bl	8001c14 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800133c:	2300      	movs	r3, #0
 800133e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001340:	2324      	movs	r3, #36	@ 0x24
 8001342:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001344:	2300      	movs	r3, #0
 8001346:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001348:	2300      	movs	r3, #0
 800134a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800134c:	2300      	movs	r3, #0
 800134e:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001350:	1d3b      	adds	r3, r7, #4
 8001352:	2200      	movs	r2, #0
 8001354:	4619      	mov	r1, r3
 8001356:	4806      	ldr	r0, [pc, #24]	@ (8001370 <MX_DAC1_Init+0x5c>)
 8001358:	f002 fd57 	bl	8003e0a <HAL_DAC_ConfigChannel>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001362:	f000 fc57 	bl	8001c14 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001366:	bf00      	nop
 8001368:	3728      	adds	r7, #40	@ 0x28
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	200002fc 	.word	0x200002fc
 8001374:	40007400 	.word	0x40007400

08001378 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800137c:	4b1b      	ldr	r3, [pc, #108]	@ (80013ec <MX_I2C1_Init+0x74>)
 800137e:	4a1c      	ldr	r2, [pc, #112]	@ (80013f0 <MX_I2C1_Init+0x78>)
 8001380:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 8001382:	4b1a      	ldr	r3, [pc, #104]	@ (80013ec <MX_I2C1_Init+0x74>)
 8001384:	4a1b      	ldr	r2, [pc, #108]	@ (80013f4 <MX_I2C1_Init+0x7c>)
 8001386:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001388:	4b18      	ldr	r3, [pc, #96]	@ (80013ec <MX_I2C1_Init+0x74>)
 800138a:	2200      	movs	r2, #0
 800138c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800138e:	4b17      	ldr	r3, [pc, #92]	@ (80013ec <MX_I2C1_Init+0x74>)
 8001390:	2201      	movs	r2, #1
 8001392:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001394:	4b15      	ldr	r3, [pc, #84]	@ (80013ec <MX_I2C1_Init+0x74>)
 8001396:	2200      	movs	r2, #0
 8001398:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800139a:	4b14      	ldr	r3, [pc, #80]	@ (80013ec <MX_I2C1_Init+0x74>)
 800139c:	2200      	movs	r2, #0
 800139e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80013a0:	4b12      	ldr	r3, [pc, #72]	@ (80013ec <MX_I2C1_Init+0x74>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013a6:	4b11      	ldr	r3, [pc, #68]	@ (80013ec <MX_I2C1_Init+0x74>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013ac:	4b0f      	ldr	r3, [pc, #60]	@ (80013ec <MX_I2C1_Init+0x74>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013b2:	480e      	ldr	r0, [pc, #56]	@ (80013ec <MX_I2C1_Init+0x74>)
 80013b4:	f003 fb34 	bl	8004a20 <HAL_I2C_Init>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80013be:	f000 fc29 	bl	8001c14 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013c2:	2100      	movs	r1, #0
 80013c4:	4809      	ldr	r0, [pc, #36]	@ (80013ec <MX_I2C1_Init+0x74>)
 80013c6:	f003 fef9 	bl	80051bc <HAL_I2CEx_ConfigAnalogFilter>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80013d0:	f000 fc20 	bl	8001c14 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80013d4:	2100      	movs	r1, #0
 80013d6:	4805      	ldr	r0, [pc, #20]	@ (80013ec <MX_I2C1_Init+0x74>)
 80013d8:	f003 ff3b 	bl	8005252 <HAL_I2CEx_ConfigDigitalFilter>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80013e2:	f000 fc17 	bl	8001c14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	20000358 	.word	0x20000358
 80013f0:	40005400 	.word	0x40005400
 80013f4:	10d19ce4 	.word	0x10d19ce4

080013f8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80013fc:	4b1b      	ldr	r3, [pc, #108]	@ (800146c <MX_SPI2_Init+0x74>)
 80013fe:	4a1c      	ldr	r2, [pc, #112]	@ (8001470 <MX_SPI2_Init+0x78>)
 8001400:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001402:	4b1a      	ldr	r3, [pc, #104]	@ (800146c <MX_SPI2_Init+0x74>)
 8001404:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001408:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800140a:	4b18      	ldr	r3, [pc, #96]	@ (800146c <MX_SPI2_Init+0x74>)
 800140c:	2200      	movs	r2, #0
 800140e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001410:	4b16      	ldr	r3, [pc, #88]	@ (800146c <MX_SPI2_Init+0x74>)
 8001412:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001416:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001418:	4b14      	ldr	r3, [pc, #80]	@ (800146c <MX_SPI2_Init+0x74>)
 800141a:	2200      	movs	r2, #0
 800141c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800141e:	4b13      	ldr	r3, [pc, #76]	@ (800146c <MX_SPI2_Init+0x74>)
 8001420:	2200      	movs	r2, #0
 8001422:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001424:	4b11      	ldr	r3, [pc, #68]	@ (800146c <MX_SPI2_Init+0x74>)
 8001426:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800142a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800142c:	4b0f      	ldr	r3, [pc, #60]	@ (800146c <MX_SPI2_Init+0x74>)
 800142e:	2220      	movs	r2, #32
 8001430:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001432:	4b0e      	ldr	r3, [pc, #56]	@ (800146c <MX_SPI2_Init+0x74>)
 8001434:	2200      	movs	r2, #0
 8001436:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001438:	4b0c      	ldr	r3, [pc, #48]	@ (800146c <MX_SPI2_Init+0x74>)
 800143a:	2200      	movs	r2, #0
 800143c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800143e:	4b0b      	ldr	r3, [pc, #44]	@ (800146c <MX_SPI2_Init+0x74>)
 8001440:	2200      	movs	r2, #0
 8001442:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001444:	4b09      	ldr	r3, [pc, #36]	@ (800146c <MX_SPI2_Init+0x74>)
 8001446:	2207      	movs	r2, #7
 8001448:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800144a:	4b08      	ldr	r3, [pc, #32]	@ (800146c <MX_SPI2_Init+0x74>)
 800144c:	2200      	movs	r2, #0
 800144e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001450:	4b06      	ldr	r3, [pc, #24]	@ (800146c <MX_SPI2_Init+0x74>)
 8001452:	2208      	movs	r2, #8
 8001454:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001456:	4805      	ldr	r0, [pc, #20]	@ (800146c <MX_SPI2_Init+0x74>)
 8001458:	f005 fa68 	bl	800692c <HAL_SPI_Init>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001462:	f000 fbd7 	bl	8001c14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	200003ac 	.word	0x200003ac
 8001470:	40003800 	.word	0x40003800

08001474 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b08e      	sub	sp, #56	@ 0x38
 8001478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800147a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	605a      	str	r2, [r3, #4]
 8001484:	609a      	str	r2, [r3, #8]
 8001486:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001488:	f107 031c 	add.w	r3, r7, #28
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001494:	463b      	mov	r3, r7
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	605a      	str	r2, [r3, #4]
 800149c:	609a      	str	r2, [r3, #8]
 800149e:	60da      	str	r2, [r3, #12]
 80014a0:	611a      	str	r2, [r3, #16]
 80014a2:	615a      	str	r2, [r3, #20]
 80014a4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014a6:	4b2d      	ldr	r3, [pc, #180]	@ (800155c <MX_TIM2_Init+0xe8>)
 80014a8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014ac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80014ae:	4b2b      	ldr	r3, [pc, #172]	@ (800155c <MX_TIM2_Init+0xe8>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014b4:	4b29      	ldr	r3, [pc, #164]	@ (800155c <MX_TIM2_Init+0xe8>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 624;
 80014ba:	4b28      	ldr	r3, [pc, #160]	@ (800155c <MX_TIM2_Init+0xe8>)
 80014bc:	f44f 721c 	mov.w	r2, #624	@ 0x270
 80014c0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014c2:	4b26      	ldr	r3, [pc, #152]	@ (800155c <MX_TIM2_Init+0xe8>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014c8:	4b24      	ldr	r3, [pc, #144]	@ (800155c <MX_TIM2_Init+0xe8>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014ce:	4823      	ldr	r0, [pc, #140]	@ (800155c <MX_TIM2_Init+0xe8>)
 80014d0:	f005 fdaa 	bl	8007028 <HAL_TIM_Base_Init>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80014da:	f000 fb9b 	bl	8001c14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014e4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014e8:	4619      	mov	r1, r3
 80014ea:	481c      	ldr	r0, [pc, #112]	@ (800155c <MX_TIM2_Init+0xe8>)
 80014ec:	f006 f8d5 	bl	800769a <HAL_TIM_ConfigClockSource>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80014f6:	f000 fb8d 	bl	8001c14 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80014fa:	4818      	ldr	r0, [pc, #96]	@ (800155c <MX_TIM2_Init+0xe8>)
 80014fc:	f005 fec4 	bl	8007288 <HAL_TIM_OC_Init>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001506:	f000 fb85 	bl	8001c14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800150a:	2320      	movs	r3, #32
 800150c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800150e:	2300      	movs	r3, #0
 8001510:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001512:	f107 031c 	add.w	r3, r7, #28
 8001516:	4619      	mov	r1, r3
 8001518:	4810      	ldr	r0, [pc, #64]	@ (800155c <MX_TIM2_Init+0xe8>)
 800151a:	f006 fdc5 	bl	80080a8 <HAL_TIMEx_MasterConfigSynchronization>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001524:	f000 fb76 	bl	8001c14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001528:	2300      	movs	r3, #0
 800152a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800152c:	2300      	movs	r3, #0
 800152e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001530:	2300      	movs	r3, #0
 8001532:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001534:	2300      	movs	r3, #0
 8001536:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001538:	463b      	mov	r3, r7
 800153a:	2200      	movs	r2, #0
 800153c:	4619      	mov	r1, r3
 800153e:	4807      	ldr	r0, [pc, #28]	@ (800155c <MX_TIM2_Init+0xe8>)
 8001540:	f006 f80a 	bl	8007558 <HAL_TIM_OC_ConfigChannel>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800154a:	f000 fb63 	bl	8001c14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800154e:	4803      	ldr	r0, [pc, #12]	@ (800155c <MX_TIM2_Init+0xe8>)
 8001550:	f000 fd46 	bl	8001fe0 <HAL_TIM_MspPostInit>

}
 8001554:	bf00      	nop
 8001556:	3738      	adds	r7, #56	@ 0x38
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	20000410 	.word	0x20000410

08001560 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001564:	4b14      	ldr	r3, [pc, #80]	@ (80015b8 <MX_USART2_UART_Init+0x58>)
 8001566:	4a15      	ldr	r2, [pc, #84]	@ (80015bc <MX_USART2_UART_Init+0x5c>)
 8001568:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800156a:	4b13      	ldr	r3, [pc, #76]	@ (80015b8 <MX_USART2_UART_Init+0x58>)
 800156c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001570:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001572:	4b11      	ldr	r3, [pc, #68]	@ (80015b8 <MX_USART2_UART_Init+0x58>)
 8001574:	2200      	movs	r2, #0
 8001576:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001578:	4b0f      	ldr	r3, [pc, #60]	@ (80015b8 <MX_USART2_UART_Init+0x58>)
 800157a:	2200      	movs	r2, #0
 800157c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800157e:	4b0e      	ldr	r3, [pc, #56]	@ (80015b8 <MX_USART2_UART_Init+0x58>)
 8001580:	2200      	movs	r2, #0
 8001582:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 8001584:	4b0c      	ldr	r3, [pc, #48]	@ (80015b8 <MX_USART2_UART_Init+0x58>)
 8001586:	2208      	movs	r2, #8
 8001588:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800158a:	4b0b      	ldr	r3, [pc, #44]	@ (80015b8 <MX_USART2_UART_Init+0x58>)
 800158c:	2200      	movs	r2, #0
 800158e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001590:	4b09      	ldr	r3, [pc, #36]	@ (80015b8 <MX_USART2_UART_Init+0x58>)
 8001592:	2200      	movs	r2, #0
 8001594:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001596:	4b08      	ldr	r3, [pc, #32]	@ (80015b8 <MX_USART2_UART_Init+0x58>)
 8001598:	2200      	movs	r2, #0
 800159a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800159c:	4b06      	ldr	r3, [pc, #24]	@ (80015b8 <MX_USART2_UART_Init+0x58>)
 800159e:	2200      	movs	r2, #0
 80015a0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015a2:	4805      	ldr	r0, [pc, #20]	@ (80015b8 <MX_USART2_UART_Init+0x58>)
 80015a4:	f006 fe26 	bl	80081f4 <HAL_UART_Init>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80015ae:	f000 fb31 	bl	8001c14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015b2:	bf00      	nop
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	2000045c 	.word	0x2000045c
 80015bc:	40004400 	.word	0x40004400

080015c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015c6:	4b10      	ldr	r3, [pc, #64]	@ (8001608 <MX_DMA_Init+0x48>)
 80015c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015ca:	4a0f      	ldr	r2, [pc, #60]	@ (8001608 <MX_DMA_Init+0x48>)
 80015cc:	f043 0301 	orr.w	r3, r3, #1
 80015d0:	6493      	str	r3, [r2, #72]	@ 0x48
 80015d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001608 <MX_DMA_Init+0x48>)
 80015d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	607b      	str	r3, [r7, #4]
 80015dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80015de:	2200      	movs	r2, #0
 80015e0:	2100      	movs	r1, #0
 80015e2:	200d      	movs	r0, #13
 80015e4:	f002 fa25 	bl	8003a32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80015e8:	200d      	movs	r0, #13
 80015ea:	f002 fa3e 	bl	8003a6a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80015ee:	2200      	movs	r2, #0
 80015f0:	2100      	movs	r1, #0
 80015f2:	2011      	movs	r0, #17
 80015f4:	f002 fa1d 	bl	8003a32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80015f8:	2011      	movs	r0, #17
 80015fa:	f002 fa36 	bl	8003a6a <HAL_NVIC_EnableIRQ>

}
 80015fe:	bf00      	nop
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40021000 	.word	0x40021000

0800160c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b08a      	sub	sp, #40	@ 0x28
 8001610:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001612:	f107 0314 	add.w	r3, r7, #20
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
 800161a:	605a      	str	r2, [r3, #4]
 800161c:	609a      	str	r2, [r3, #8]
 800161e:	60da      	str	r2, [r3, #12]
 8001620:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001622:	4b49      	ldr	r3, [pc, #292]	@ (8001748 <MX_GPIO_Init+0x13c>)
 8001624:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001626:	4a48      	ldr	r2, [pc, #288]	@ (8001748 <MX_GPIO_Init+0x13c>)
 8001628:	f043 0304 	orr.w	r3, r3, #4
 800162c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800162e:	4b46      	ldr	r3, [pc, #280]	@ (8001748 <MX_GPIO_Init+0x13c>)
 8001630:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001632:	f003 0304 	and.w	r3, r3, #4
 8001636:	613b      	str	r3, [r7, #16]
 8001638:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800163a:	4b43      	ldr	r3, [pc, #268]	@ (8001748 <MX_GPIO_Init+0x13c>)
 800163c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800163e:	4a42      	ldr	r2, [pc, #264]	@ (8001748 <MX_GPIO_Init+0x13c>)
 8001640:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001644:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001646:	4b40      	ldr	r3, [pc, #256]	@ (8001748 <MX_GPIO_Init+0x13c>)
 8001648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800164a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001652:	4b3d      	ldr	r3, [pc, #244]	@ (8001748 <MX_GPIO_Init+0x13c>)
 8001654:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001656:	4a3c      	ldr	r2, [pc, #240]	@ (8001748 <MX_GPIO_Init+0x13c>)
 8001658:	f043 0301 	orr.w	r3, r3, #1
 800165c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800165e:	4b3a      	ldr	r3, [pc, #232]	@ (8001748 <MX_GPIO_Init+0x13c>)
 8001660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	60bb      	str	r3, [r7, #8]
 8001668:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800166a:	4b37      	ldr	r3, [pc, #220]	@ (8001748 <MX_GPIO_Init+0x13c>)
 800166c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800166e:	4a36      	ldr	r2, [pc, #216]	@ (8001748 <MX_GPIO_Init+0x13c>)
 8001670:	f043 0302 	orr.w	r3, r3, #2
 8001674:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001676:	4b34      	ldr	r3, [pc, #208]	@ (8001748 <MX_GPIO_Init+0x13c>)
 8001678:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800167a:	f003 0302 	and.w	r3, r3, #2
 800167e:	607b      	str	r3, [r7, #4]
 8001680:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DC_Pin|GPIO_PIN_2|CE_Pin, GPIO_PIN_RESET);
 8001682:	2200      	movs	r2, #0
 8001684:	f244 0106 	movw	r1, #16390	@ 0x4006
 8001688:	4830      	ldr	r0, [pc, #192]	@ (800174c <MX_GPIO_Init+0x140>)
 800168a:	f003 f999 	bl	80049c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800168e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001692:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001694:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001698:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	2300      	movs	r3, #0
 800169c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800169e:	f107 0314 	add.w	r3, r7, #20
 80016a2:	4619      	mov	r1, r3
 80016a4:	482a      	ldr	r0, [pc, #168]	@ (8001750 <MX_GPIO_Init+0x144>)
 80016a6:	f002 ffe1 	bl	800466c <HAL_GPIO_Init>

  /*Configure GPIO pins : DC_Pin PB2 CE_Pin */
  GPIO_InitStruct.Pin = DC_Pin|GPIO_PIN_2|CE_Pin;
 80016aa:	f244 0306 	movw	r3, #16390	@ 0x4006
 80016ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b0:	2301      	movs	r3, #1
 80016b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b4:	2300      	movs	r3, #0
 80016b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b8:	2300      	movs	r3, #0
 80016ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016bc:	f107 0314 	add.w	r3, r7, #20
 80016c0:	4619      	mov	r1, r3
 80016c2:	4822      	ldr	r0, [pc, #136]	@ (800174c <MX_GPIO_Init+0x140>)
 80016c4:	f002 ffd2 	bl	800466c <HAL_GPIO_Init>

  /*Configure GPIO pins : REVERSE_Pin FREQ_BIG_Pin */
  GPIO_InitStruct.Pin = REVERSE_Pin|FREQ_BIG_Pin;
 80016c8:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 80016cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016ce:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80016d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d4:	2300      	movs	r3, #0
 80016d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d8:	f107 0314 	add.w	r3, r7, #20
 80016dc:	4619      	mov	r1, r3
 80016de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016e2:	f002 ffc3 	bl	800466c <HAL_GPIO_Init>

  /*Configure GPIO pins : FREQ_SMALL_Pin VPP_SMALL_Pin VPP_BIG_Pin */
  GPIO_InitStruct.Pin = FREQ_SMALL_Pin|VPP_SMALL_Pin|VPP_BIG_Pin;
 80016e6:	2338      	movs	r3, #56	@ 0x38
 80016e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016ea:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80016ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016f0:	2301      	movs	r3, #1
 80016f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f4:	f107 0314 	add.w	r3, r7, #20
 80016f8:	4619      	mov	r1, r3
 80016fa:	4814      	ldr	r0, [pc, #80]	@ (800174c <MX_GPIO_Init+0x140>)
 80016fc:	f002 ffb6 	bl	800466c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001700:	2200      	movs	r2, #0
 8001702:	2100      	movs	r1, #0
 8001704:	2009      	movs	r0, #9
 8001706:	f002 f994 	bl	8003a32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800170a:	2009      	movs	r0, #9
 800170c:	f002 f9ad 	bl	8003a6a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001710:	2200      	movs	r2, #0
 8001712:	2100      	movs	r1, #0
 8001714:	200a      	movs	r0, #10
 8001716:	f002 f98c 	bl	8003a32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800171a:	200a      	movs	r0, #10
 800171c:	f002 f9a5 	bl	8003a6a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001720:	2200      	movs	r2, #0
 8001722:	2100      	movs	r1, #0
 8001724:	2017      	movs	r0, #23
 8001726:	f002 f984 	bl	8003a32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800172a:	2017      	movs	r0, #23
 800172c:	f002 f99d 	bl	8003a6a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001730:	2200      	movs	r2, #0
 8001732:	2100      	movs	r1, #0
 8001734:	2028      	movs	r0, #40	@ 0x28
 8001736:	f002 f97c 	bl	8003a32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800173a:	2028      	movs	r0, #40	@ 0x28
 800173c:	f002 f995 	bl	8003a6a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001740:	bf00      	nop
 8001742:	3728      	adds	r7, #40	@ 0x28
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	40021000 	.word	0x40021000
 800174c:	48000400 	.word	0x48000400
 8001750:	48000800 	.word	0x48000800

08001754 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Callback: this ISR is triggered whenever a timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]

}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <uint16_to_str>:


char* uint16_to_str(uint16_t num, char *str) {
 8001768:	b480      	push	{r7}
 800176a:	b087      	sub	sp, #28
 800176c:	af00      	add	r7, sp, #0
 800176e:	4603      	mov	r3, r0
 8001770:	6039      	str	r1, [r7, #0]
 8001772:	80fb      	strh	r3, [r7, #6]
    int i = 0;
 8001774:	2300      	movs	r3, #0
 8001776:	617b      	str	r3, [r7, #20]
    if (num == 0) {
 8001778:	88fb      	ldrh	r3, [r7, #6]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d108      	bne.n	8001790 <uint16_to_str+0x28>
        str[i++] = '0';
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	1c5a      	adds	r2, r3, #1
 8001782:	617a      	str	r2, [r7, #20]
 8001784:	461a      	mov	r2, r3
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	4413      	add	r3, r2
 800178a:	2230      	movs	r2, #48	@ 0x30
 800178c:	701a      	strb	r2, [r3, #0]
 800178e:	e033      	b.n	80017f8 <uint16_to_str+0x90>
    } else {
        char temp[5];
        int j = 0;
 8001790:	2300      	movs	r3, #0
 8001792:	613b      	str	r3, [r7, #16]
        while (num > 0) {
 8001794:	e01a      	b.n	80017cc <uint16_to_str+0x64>
            temp[j++] = (num % 10) + '0';
 8001796:	88fa      	ldrh	r2, [r7, #6]
 8001798:	4b1d      	ldr	r3, [pc, #116]	@ (8001810 <uint16_to_str+0xa8>)
 800179a:	fba3 1302 	umull	r1, r3, r3, r2
 800179e:	08d9      	lsrs	r1, r3, #3
 80017a0:	460b      	mov	r3, r1
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	440b      	add	r3, r1
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	b2da      	uxtb	r2, r3
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	1c59      	adds	r1, r3, #1
 80017b2:	6139      	str	r1, [r7, #16]
 80017b4:	3230      	adds	r2, #48	@ 0x30
 80017b6:	b2d2      	uxtb	r2, r2
 80017b8:	3318      	adds	r3, #24
 80017ba:	443b      	add	r3, r7
 80017bc:	f803 2c10 	strb.w	r2, [r3, #-16]
            num /= 10;
 80017c0:	88fb      	ldrh	r3, [r7, #6]
 80017c2:	4a13      	ldr	r2, [pc, #76]	@ (8001810 <uint16_to_str+0xa8>)
 80017c4:	fba2 2303 	umull	r2, r3, r2, r3
 80017c8:	08db      	lsrs	r3, r3, #3
 80017ca:	80fb      	strh	r3, [r7, #6]
        while (num > 0) {
 80017cc:	88fb      	ldrh	r3, [r7, #6]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d1e1      	bne.n	8001796 <uint16_to_str+0x2e>
        }
        while (j > 0) {
 80017d2:	e00e      	b.n	80017f2 <uint16_to_str+0x8a>
            str[i++] = temp[--j];
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	3b01      	subs	r3, #1
 80017d8:	613b      	str	r3, [r7, #16]
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	1c5a      	adds	r2, r3, #1
 80017de:	617a      	str	r2, [r7, #20]
 80017e0:	461a      	mov	r2, r3
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	4413      	add	r3, r2
 80017e6:	f107 0108 	add.w	r1, r7, #8
 80017ea:	693a      	ldr	r2, [r7, #16]
 80017ec:	440a      	add	r2, r1
 80017ee:	7812      	ldrb	r2, [r2, #0]
 80017f0:	701a      	strb	r2, [r3, #0]
        while (j > 0) {
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	dced      	bgt.n	80017d4 <uint16_to_str+0x6c>
        }
    }
    str[i] = '\0';
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	683a      	ldr	r2, [r7, #0]
 80017fc:	4413      	add	r3, r2
 80017fe:	2200      	movs	r2, #0
 8001800:	701a      	strb	r2, [r3, #0]
    return str;
 8001802:	683b      	ldr	r3, [r7, #0]
}
 8001804:	4618      	mov	r0, r3
 8001806:	371c      	adds	r7, #28
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr
 8001810:	cccccccd 	.word	0xcccccccd

08001814 <generate_sine_wave>:


void generate_sine_wave(uint32_t new_Vpp)
{
 8001814:	b480      	push	{r7}
 8001816:	b085      	sub	sp, #20
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 128; i++) {
 800181c:	2300      	movs	r3, #0
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	e011      	b.n	8001846 <generate_sine_wave+0x32>
		new_sine_wave[i] = (uint32_t)((sine33[i] * new_Vpp) / 33);
 8001822:	4a0e      	ldr	r2, [pc, #56]	@ (800185c <generate_sine_wave+0x48>)
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	fb02 f303 	mul.w	r3, r2, r3
 8001830:	4a0b      	ldr	r2, [pc, #44]	@ (8001860 <generate_sine_wave+0x4c>)
 8001832:	fba2 2303 	umull	r2, r3, r2, r3
 8001836:	08da      	lsrs	r2, r3, #3
 8001838:	490a      	ldr	r1, [pc, #40]	@ (8001864 <generate_sine_wave+0x50>)
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < 128; i++) {
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	3301      	adds	r3, #1
 8001844:	60fb      	str	r3, [r7, #12]
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	2b7f      	cmp	r3, #127	@ 0x7f
 800184a:	ddea      	ble.n	8001822 <generate_sine_wave+0xe>
	}
}
 800184c:	bf00      	nop
 800184e:	bf00      	nop
 8001850:	3714      	adds	r7, #20
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	20000004 	.word	0x20000004
 8001860:	3e0f83e1 	.word	0x3e0f83e1
 8001864:	2000052c 	.word	0x2000052c

08001868 <set_trigger_frequency>:

void set_trigger_frequency(uint32_t wave_frequency) {
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
	uint32_t trigger_frequency = wave_frequency * SAMPLES;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	01db      	lsls	r3, r3, #7
 8001874:	60fb      	str	r3, [r7, #12]
	uint32_t arr = (80000000 / trigger_frequency) - 1;
 8001876:	4a0c      	ldr	r2, [pc, #48]	@ (80018a8 <set_trigger_frequency+0x40>)
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	fbb2 f3f3 	udiv	r3, r2, r3
 800187e:	3b01      	subs	r3, #1
 8001880:	60bb      	str	r3, [r7, #8]

    __HAL_TIM_SET_AUTORELOAD(&htim2, arr);
 8001882:	4b0a      	ldr	r3, [pc, #40]	@ (80018ac <set_trigger_frequency+0x44>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	68ba      	ldr	r2, [r7, #8]
 8001888:	62da      	str	r2, [r3, #44]	@ 0x2c
 800188a:	4a08      	ldr	r2, [pc, #32]	@ (80018ac <set_trigger_frequency+0x44>)
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	60d3      	str	r3, [r2, #12]
    HAL_TIM_GenerateEvent(&htim2, TIM_EVENTSOURCE_UPDATE);
 8001890:	2101      	movs	r1, #1
 8001892:	4806      	ldr	r0, [pc, #24]	@ (80018ac <set_trigger_frequency+0x44>)
 8001894:	f005 feda 	bl	800764c <HAL_TIM_GenerateEvent>
    HAL_TIM_Base_Start(&htim2);  // Restart timer
 8001898:	4804      	ldr	r0, [pc, #16]	@ (80018ac <set_trigger_frequency+0x44>)
 800189a:	f005 fc1d 	bl	80070d8 <HAL_TIM_Base_Start>
}
 800189e:	bf00      	nop
 80018a0:	3710      	adds	r7, #16
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	04c4b400 	.word	0x04c4b400
 80018ac:	20000410 	.word	0x20000410

080018b0 <update_sine_wave>:

void update_sine_wave(uint32_t new_Vpp, uint32_t new_freq)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af02      	add	r7, sp, #8
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
    HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1); // Stop DAC DMA
 80018ba:	2100      	movs	r1, #0
 80018bc:	480b      	ldr	r0, [pc, #44]	@ (80018ec <update_sine_wave+0x3c>)
 80018be:	f002 f9dd 	bl	8003c7c <HAL_DAC_Stop_DMA>
    generate_sine_wave(new_Vpp);          // Update sine wave values
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f7ff ffa6 	bl	8001814 <generate_sine_wave>
    set_trigger_frequency(new_freq);          // Update frequency
 80018c8:	6838      	ldr	r0, [r7, #0]
 80018ca:	f7ff ffcd 	bl	8001868 <set_trigger_frequency>
    HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, new_sine_wave, SAMPLES, DAC_ALIGN_12B_R); // Restart DAC DMA
 80018ce:	2300      	movs	r3, #0
 80018d0:	9300      	str	r3, [sp, #0]
 80018d2:	2380      	movs	r3, #128	@ 0x80
 80018d4:	4a06      	ldr	r2, [pc, #24]	@ (80018f0 <update_sine_wave+0x40>)
 80018d6:	2100      	movs	r1, #0
 80018d8:	4804      	ldr	r0, [pc, #16]	@ (80018ec <update_sine_wave+0x3c>)
 80018da:	f002 f903 	bl	8003ae4 <HAL_DAC_Start_DMA>
    HAL_TIM_Base_Start_IT(&htim2);
 80018de:	4805      	ldr	r0, [pc, #20]	@ (80018f4 <update_sine_wave+0x44>)
 80018e0:	f005 fc62 	bl	80071a8 <HAL_TIM_Base_Start_IT>
}
 80018e4:	bf00      	nop
 80018e6:	3708      	adds	r7, #8
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	200002fc 	.word	0x200002fc
 80018f0:	2000052c 	.word	0x2000052c
 80018f4:	20000410 	.word	0x20000410

080018f8 <SPI_write>:


void SPI_write(unsigned char data){
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	4603      	mov	r3, r0
 8001900:	71fb      	strb	r3, [r7, #7]
	// Chip Enable (low is asserted)
	HAL_GPIO_WritePin(CE_PORT, CE_PIN, GPIO_PIN_RESET);
 8001902:	2200      	movs	r2, #0
 8001904:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001908:	4809      	ldr	r0, [pc, #36]	@ (8001930 <SPI_write+0x38>)
 800190a:	f003 f859 	bl	80049c0 <HAL_GPIO_WritePin>
	// Send data over SPI1
	HAL_SPI_Transmit(&hspi2, (uint8_t*) &data, 1, HAL_MAX_DELAY);
 800190e:	1df9      	adds	r1, r7, #7
 8001910:	f04f 33ff 	mov.w	r3, #4294967295
 8001914:	2201      	movs	r2, #1
 8001916:	4807      	ldr	r0, [pc, #28]	@ (8001934 <SPI_write+0x3c>)
 8001918:	f005 f8ab 	bl	8006a72 <HAL_SPI_Transmit>
	// Chip Disable
	HAL_GPIO_WritePin(CE_PORT, CE_PIN, GPIO_PIN_SET);
 800191c:	2201      	movs	r2, #1
 800191e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001922:	4803      	ldr	r0, [pc, #12]	@ (8001930 <SPI_write+0x38>)
 8001924:	f003 f84c 	bl	80049c0 <HAL_GPIO_WritePin>
}
 8001928:	bf00      	nop
 800192a:	3708      	adds	r7, #8
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	48000400 	.word	0x48000400
 8001934:	200003ac 	.word	0x200003ac

08001938 <GLCD_data_write>:

void GLCD_data_write(unsigned char data){
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	71fb      	strb	r3, [r7, #7]
	// Switch to "data" mode (D/C pin high)
	HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8001942:	2201      	movs	r2, #1
 8001944:	2102      	movs	r1, #2
 8001946:	4805      	ldr	r0, [pc, #20]	@ (800195c <GLCD_data_write+0x24>)
 8001948:	f003 f83a 	bl	80049c0 <HAL_GPIO_WritePin>
	// Send data over SPI
	SPI_write(data);
 800194c:	79fb      	ldrb	r3, [r7, #7]
 800194e:	4618      	mov	r0, r3
 8001950:	f7ff ffd2 	bl	80018f8 <SPI_write>
	}
 8001954:	bf00      	nop
 8001956:	3708      	adds	r7, #8
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	48000400 	.word	0x48000400

08001960 <GLCD_command_write>:

void GLCD_command_write(unsigned char data){
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	71fb      	strb	r3, [r7, #7]
	// Switch to "command" mode (D/C pin low)
	HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 800196a:	2200      	movs	r2, #0
 800196c:	2102      	movs	r1, #2
 800196e:	4805      	ldr	r0, [pc, #20]	@ (8001984 <GLCD_command_write+0x24>)
 8001970:	f003 f826 	bl	80049c0 <HAL_GPIO_WritePin>
	// Send data over SPI
	SPI_write(data);
 8001974:	79fb      	ldrb	r3, [r7, #7]
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff ffbe 	bl	80018f8 <SPI_write>
}
 800197c:	bf00      	nop
 800197e:	3708      	adds	r7, #8
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	48000400 	.word	0x48000400

08001988 <GLCD_init>:

void GLCD_init(void){
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
	// Keep CE high when not transmitting
	HAL_GPIO_WritePin(CE_PORT, CE_PIN, GPIO_PIN_SET);
 800198c:	2201      	movs	r2, #1
 800198e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001992:	4810      	ldr	r0, [pc, #64]	@ (80019d4 <GLCD_init+0x4c>)
 8001994:	f003 f814 	bl	80049c0 <HAL_GPIO_WritePin>
	// Reset the screen (low pulse - down & up)
	HAL_GPIO_WritePin(RESET_PORT, RESET_PIN, GPIO_PIN_RESET);
 8001998:	2200      	movs	r2, #0
 800199a:	2104      	movs	r1, #4
 800199c:	480d      	ldr	r0, [pc, #52]	@ (80019d4 <GLCD_init+0x4c>)
 800199e:	f003 f80f 	bl	80049c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RESET_PORT, RESET_PIN, GPIO_PIN_SET);
 80019a2:	2201      	movs	r2, #1
 80019a4:	2104      	movs	r1, #4
 80019a6:	480b      	ldr	r0, [pc, #44]	@ (80019d4 <GLCD_init+0x4c>)
 80019a8:	f003 f80a 	bl	80049c0 <HAL_GPIO_WritePin>
	// Configure the screen (according to the datasheet)
	GLCD_command_write(0x21); // enter extended command mode
 80019ac:	2021      	movs	r0, #33	@ 0x21
 80019ae:	f7ff ffd7 	bl	8001960 <GLCD_command_write>
	GLCD_command_write(0xB0); // set LCD Vop for contrast (this may be adjusted)
 80019b2:	20b0      	movs	r0, #176	@ 0xb0
 80019b4:	f7ff ffd4 	bl	8001960 <GLCD_command_write>
	GLCD_command_write(0x04); // set temp coefficient
 80019b8:	2004      	movs	r0, #4
 80019ba:	f7ff ffd1 	bl	8001960 <GLCD_command_write>
	GLCD_command_write(0x15); // set LCD bias mode (this may be adjusted)
 80019be:	2015      	movs	r0, #21
 80019c0:	f7ff ffce 	bl	8001960 <GLCD_command_write>
	GLCD_command_write(0x20); // return to normal command mode
 80019c4:	2020      	movs	r0, #32
 80019c6:	f7ff ffcb 	bl	8001960 <GLCD_command_write>
	GLCD_command_write(0x0C); // set display mode normal
 80019ca:	200c      	movs	r0, #12
 80019cc:	f7ff ffc8 	bl	8001960 <GLCD_command_write>
}
 80019d0:	bf00      	nop
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	48000400 	.word	0x48000400

080019d8 <GLCD_setCursor>:

void GLCD_setCursor(unsigned char x, unsigned char y){
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	4603      	mov	r3, r0
 80019e0:	460a      	mov	r2, r1
 80019e2:	71fb      	strb	r3, [r7, #7]
 80019e4:	4613      	mov	r3, r2
 80019e6:	71bb      	strb	r3, [r7, #6]
	GLCD_command_write(0x80 | x); // column
 80019e8:	79fb      	ldrb	r3, [r7, #7]
 80019ea:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff ffb5 	bl	8001960 <GLCD_command_write>
	GLCD_command_write(0x40 | y); // bank
 80019f6:	79bb      	ldrb	r3, [r7, #6]
 80019f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff ffae 	bl	8001960 <GLCD_command_write>
}
 8001a04:	bf00      	nop
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <GLCD_clear>:

void GLCD_clear(void){
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
	int i;
	for(i = 0; i < (GLCD_WIDTH * NUM_BANKS); i++){
 8001a12:	2300      	movs	r3, #0
 8001a14:	607b      	str	r3, [r7, #4]
 8001a16:	e005      	b.n	8001a24 <GLCD_clear+0x18>
		GLCD_data_write(0x00); // write zeros
 8001a18:	2000      	movs	r0, #0
 8001a1a:	f7ff ff8d 	bl	8001938 <GLCD_data_write>
	for(i = 0; i < (GLCD_WIDTH * NUM_BANKS); i++){
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	3301      	adds	r3, #1
 8001a22:	607b      	str	r3, [r7, #4]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f5b3 7ffc 	cmp.w	r3, #504	@ 0x1f8
 8001a2a:	dbf5      	blt.n	8001a18 <GLCD_clear+0xc>
	}
	GLCD_setCursor(0,0); // return cursor to top left
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	2000      	movs	r0, #0
 8001a30:	f7ff ffd2 	bl	80019d8 <GLCD_setCursor>
}
 8001a34:	bf00      	nop
 8001a36:	3708      	adds	r7, #8
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <GLCD_putchar>:

void GLCD_putchar(int font_table_row){
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
	 int i;
	 for (i=0; i<6; i++){
 8001a44:	2300      	movs	r3, #0
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	e00f      	b.n	8001a6a <GLCD_putchar+0x2e>
		 GLCD_data_write(font_table[font_table_row][i]);
 8001a4a:	490c      	ldr	r1, [pc, #48]	@ (8001a7c <GLCD_putchar+0x40>)
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	4613      	mov	r3, r2
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	4413      	add	r3, r2
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	18ca      	adds	r2, r1, r3
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff ff6a 	bl	8001938 <GLCD_data_write>
	 for (i=0; i<6; i++){
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	3301      	adds	r3, #1
 8001a68:	60fb      	str	r3, [r7, #12]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2b05      	cmp	r3, #5
 8001a6e:	ddec      	ble.n	8001a4a <GLCD_putchar+0xe>
	 }
}
 8001a70:	bf00      	nop
 8001a72:	bf00      	nop
 8001a74:	3710      	adds	r7, #16
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	080094b4 	.word	0x080094b4

08001a80 <HAL_GPIO_EXTI_Callback>:
//    	}
//    }
//}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4603      	mov	r3, r0
 8001a88:	80fb      	strh	r3, [r7, #6]
    uint32_t current_time = HAL_GetTick();
 8001a8a:	f000 fca5 	bl	80023d8 <HAL_GetTick>
 8001a8e:	60f8      	str	r0, [r7, #12]

    if (GPIO_Pin == VPP_SMALL_Pin) {
 8001a90:	88fb      	ldrh	r3, [r7, #6]
 8001a92:	2b10      	cmp	r3, #16
 8001a94:	d118      	bne.n	8001ac8 <HAL_GPIO_EXTI_Callback+0x48>
        if (current_time - last_Vpp_small_press > debounce_delay) {
 8001a96:	4b57      	ldr	r3, [pc, #348]	@ (8001bf4 <HAL_GPIO_EXTI_Callback+0x174>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	68fa      	ldr	r2, [r7, #12]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	22c8      	movs	r2, #200	@ 0xc8
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	f240 809a 	bls.w	8001bda <HAL_GPIO_EXTI_Callback+0x15a>
            last_Vpp_small_press = current_time;
 8001aa6:	4a53      	ldr	r2, [pc, #332]	@ (8001bf4 <HAL_GPIO_EXTI_Callback+0x174>)
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	6013      	str	r3, [r2, #0]
            if (REVERSE_Pin == 0){
            	if (Vpp > 0) Vpp -= 1;
            	else Vpp = 33;
            }
            if (Vpp < 33) Vpp += 1;
 8001aac:	4b52      	ldr	r3, [pc, #328]	@ (8001bf8 <HAL_GPIO_EXTI_Callback+0x178>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2b20      	cmp	r3, #32
 8001ab2:	d805      	bhi.n	8001ac0 <HAL_GPIO_EXTI_Callback+0x40>
 8001ab4:	4b50      	ldr	r3, [pc, #320]	@ (8001bf8 <HAL_GPIO_EXTI_Callback+0x178>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	4a4f      	ldr	r2, [pc, #316]	@ (8001bf8 <HAL_GPIO_EXTI_Callback+0x178>)
 8001abc:	6013      	str	r3, [r2, #0]
 8001abe:	e08c      	b.n	8001bda <HAL_GPIO_EXTI_Callback+0x15a>
            else Vpp = 0;
 8001ac0:	4b4d      	ldr	r3, [pc, #308]	@ (8001bf8 <HAL_GPIO_EXTI_Callback+0x178>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	e088      	b.n	8001bda <HAL_GPIO_EXTI_Callback+0x15a>
        }
    }

    else if (GPIO_Pin == VPP_BIG_Pin) {
 8001ac8:	88fb      	ldrh	r3, [r7, #6]
 8001aca:	2b20      	cmp	r3, #32
 8001acc:	d117      	bne.n	8001afe <HAL_GPIO_EXTI_Callback+0x7e>
        if (current_time - last_Vpp_big_press > debounce_delay) {
 8001ace:	4b4b      	ldr	r3, [pc, #300]	@ (8001bfc <HAL_GPIO_EXTI_Callback+0x17c>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	68fa      	ldr	r2, [r7, #12]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	22c8      	movs	r2, #200	@ 0xc8
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d97e      	bls.n	8001bda <HAL_GPIO_EXTI_Callback+0x15a>
            last_Vpp_big_press = current_time;
 8001adc:	4a47      	ldr	r2, [pc, #284]	@ (8001bfc <HAL_GPIO_EXTI_Callback+0x17c>)
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	6013      	str	r3, [r2, #0]
            if (REVERSE_Pin == 0){
            	if (Vpp >= 10) Vpp -= 10;
            	else Vpp = 33;
            }
            if (Vpp <= 23) Vpp += 10;
 8001ae2:	4b45      	ldr	r3, [pc, #276]	@ (8001bf8 <HAL_GPIO_EXTI_Callback+0x178>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2b17      	cmp	r3, #23
 8001ae8:	d805      	bhi.n	8001af6 <HAL_GPIO_EXTI_Callback+0x76>
 8001aea:	4b43      	ldr	r3, [pc, #268]	@ (8001bf8 <HAL_GPIO_EXTI_Callback+0x178>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	330a      	adds	r3, #10
 8001af0:	4a41      	ldr	r2, [pc, #260]	@ (8001bf8 <HAL_GPIO_EXTI_Callback+0x178>)
 8001af2:	6013      	str	r3, [r2, #0]
 8001af4:	e071      	b.n	8001bda <HAL_GPIO_EXTI_Callback+0x15a>
            else Vpp = 0;
 8001af6:	4b40      	ldr	r3, [pc, #256]	@ (8001bf8 <HAL_GPIO_EXTI_Callback+0x178>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	e06d      	b.n	8001bda <HAL_GPIO_EXTI_Callback+0x15a>
        }
    }

    else if (GPIO_Pin == FREQ_SMALL_Pin) {
 8001afe:	88fb      	ldrh	r3, [r7, #6]
 8001b00:	2b08      	cmp	r3, #8
 8001b02:	d14a      	bne.n	8001b9a <HAL_GPIO_EXTI_Callback+0x11a>
        if (current_time - last_freq_small_press > debounce_delay) {
 8001b04:	4b3e      	ldr	r3, [pc, #248]	@ (8001c00 <HAL_GPIO_EXTI_Callback+0x180>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	68fa      	ldr	r2, [r7, #12]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	22c8      	movs	r2, #200	@ 0xc8
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d963      	bls.n	8001bda <HAL_GPIO_EXTI_Callback+0x15a>
            last_freq_small_press = current_time;
 8001b12:	4a3b      	ldr	r2, [pc, #236]	@ (8001c00 <HAL_GPIO_EXTI_Callback+0x180>)
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	6013      	str	r3, [r2, #0]
            	else if (freq <= 100)	freq -= 10;
            	else if (freq <= 1000)	freq -= 100;
            	else if (freq <= 10000)	freq -= 1000;
            	else if (freq <= 100000)freq -= 10000;
            }
        	if 		(freq >= 900000)	freq = 1;
 8001b18:	4b3a      	ldr	r3, [pc, #232]	@ (8001c04 <HAL_GPIO_EXTI_Callback+0x184>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a3a      	ldr	r2, [pc, #232]	@ (8001c08 <HAL_GPIO_EXTI_Callback+0x188>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d903      	bls.n	8001b2a <HAL_GPIO_EXTI_Callback+0xaa>
 8001b22:	4b38      	ldr	r3, [pc, #224]	@ (8001c04 <HAL_GPIO_EXTI_Callback+0x184>)
 8001b24:	2201      	movs	r2, #1
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	e057      	b.n	8001bda <HAL_GPIO_EXTI_Callback+0x15a>
        	else if (freq >= 10000)		freq += 10000;
 8001b2a:	4b36      	ldr	r3, [pc, #216]	@ (8001c04 <HAL_GPIO_EXTI_Callback+0x184>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d907      	bls.n	8001b46 <HAL_GPIO_EXTI_Callback+0xc6>
 8001b36:	4b33      	ldr	r3, [pc, #204]	@ (8001c04 <HAL_GPIO_EXTI_Callback+0x184>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 8001b3e:	3310      	adds	r3, #16
 8001b40:	4a30      	ldr	r2, [pc, #192]	@ (8001c04 <HAL_GPIO_EXTI_Callback+0x184>)
 8001b42:	6013      	str	r3, [r2, #0]
 8001b44:	e049      	b.n	8001bda <HAL_GPIO_EXTI_Callback+0x15a>
        	else if (freq >= 1000)		freq += 1000;
 8001b46:	4b2f      	ldr	r3, [pc, #188]	@ (8001c04 <HAL_GPIO_EXTI_Callback+0x184>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001b4e:	d306      	bcc.n	8001b5e <HAL_GPIO_EXTI_Callback+0xde>
 8001b50:	4b2c      	ldr	r3, [pc, #176]	@ (8001c04 <HAL_GPIO_EXTI_Callback+0x184>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001b58:	4a2a      	ldr	r2, [pc, #168]	@ (8001c04 <HAL_GPIO_EXTI_Callback+0x184>)
 8001b5a:	6013      	str	r3, [r2, #0]
 8001b5c:	e03d      	b.n	8001bda <HAL_GPIO_EXTI_Callback+0x15a>
        	else if (freq >= 100)		freq += 100;
 8001b5e:	4b29      	ldr	r3, [pc, #164]	@ (8001c04 <HAL_GPIO_EXTI_Callback+0x184>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	2b63      	cmp	r3, #99	@ 0x63
 8001b64:	d905      	bls.n	8001b72 <HAL_GPIO_EXTI_Callback+0xf2>
 8001b66:	4b27      	ldr	r3, [pc, #156]	@ (8001c04 <HAL_GPIO_EXTI_Callback+0x184>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	3364      	adds	r3, #100	@ 0x64
 8001b6c:	4a25      	ldr	r2, [pc, #148]	@ (8001c04 <HAL_GPIO_EXTI_Callback+0x184>)
 8001b6e:	6013      	str	r3, [r2, #0]
 8001b70:	e033      	b.n	8001bda <HAL_GPIO_EXTI_Callback+0x15a>
        	else if (freq >= 10)		freq += 10;
 8001b72:	4b24      	ldr	r3, [pc, #144]	@ (8001c04 <HAL_GPIO_EXTI_Callback+0x184>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2b09      	cmp	r3, #9
 8001b78:	d905      	bls.n	8001b86 <HAL_GPIO_EXTI_Callback+0x106>
 8001b7a:	4b22      	ldr	r3, [pc, #136]	@ (8001c04 <HAL_GPIO_EXTI_Callback+0x184>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	330a      	adds	r3, #10
 8001b80:	4a20      	ldr	r2, [pc, #128]	@ (8001c04 <HAL_GPIO_EXTI_Callback+0x184>)
 8001b82:	6013      	str	r3, [r2, #0]
 8001b84:	e029      	b.n	8001bda <HAL_GPIO_EXTI_Callback+0x15a>
        	else if (freq >= 1) 		freq += 1;
 8001b86:	4b1f      	ldr	r3, [pc, #124]	@ (8001c04 <HAL_GPIO_EXTI_Callback+0x184>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d025      	beq.n	8001bda <HAL_GPIO_EXTI_Callback+0x15a>
 8001b8e:	4b1d      	ldr	r3, [pc, #116]	@ (8001c04 <HAL_GPIO_EXTI_Callback+0x184>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	3301      	adds	r3, #1
 8001b94:	4a1b      	ldr	r2, [pc, #108]	@ (8001c04 <HAL_GPIO_EXTI_Callback+0x184>)
 8001b96:	6013      	str	r3, [r2, #0]
 8001b98:	e01f      	b.n	8001bda <HAL_GPIO_EXTI_Callback+0x15a>
        }
    }

    else if (GPIO_Pin == FREQ_BIG_Pin) {
 8001b9a:	88fb      	ldrh	r3, [r7, #6]
 8001b9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ba0:	d11b      	bne.n	8001bda <HAL_GPIO_EXTI_Callback+0x15a>
        if (current_time - last_freq_big_press > debounce_delay) {
 8001ba2:	4b1a      	ldr	r3, [pc, #104]	@ (8001c0c <HAL_GPIO_EXTI_Callback+0x18c>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	68fa      	ldr	r2, [r7, #12]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	22c8      	movs	r2, #200	@ 0xc8
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d914      	bls.n	8001bda <HAL_GPIO_EXTI_Callback+0x15a>
            last_freq_small_press = current_time;
 8001bb0:	4a13      	ldr	r2, [pc, #76]	@ (8001c00 <HAL_GPIO_EXTI_Callback+0x180>)
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	6013      	str	r3, [r2, #0]
            if (REVERSE_Pin == 0){
            	if (freq > 1) freq /= 10;
            	else freq = 100000;
            }
            if (freq < 100000) freq *= 10;
 8001bb6:	4b13      	ldr	r3, [pc, #76]	@ (8001c04 <HAL_GPIO_EXTI_Callback+0x184>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a15      	ldr	r2, [pc, #84]	@ (8001c10 <HAL_GPIO_EXTI_Callback+0x190>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d809      	bhi.n	8001bd4 <HAL_GPIO_EXTI_Callback+0x154>
 8001bc0:	4b10      	ldr	r3, [pc, #64]	@ (8001c04 <HAL_GPIO_EXTI_Callback+0x184>)
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	4413      	add	r3, r2
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	461a      	mov	r2, r3
 8001bce:	4b0d      	ldr	r3, [pc, #52]	@ (8001c04 <HAL_GPIO_EXTI_Callback+0x184>)
 8001bd0:	601a      	str	r2, [r3, #0]
 8001bd2:	e002      	b.n	8001bda <HAL_GPIO_EXTI_Callback+0x15a>
			else freq = 1;
 8001bd4:	4b0b      	ldr	r3, [pc, #44]	@ (8001c04 <HAL_GPIO_EXTI_Callback+0x184>)
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	601a      	str	r2, [r3, #0]
//				}
//			}
//		}


    update_sine_wave(Vpp, freq);
 8001bda:	4b07      	ldr	r3, [pc, #28]	@ (8001bf8 <HAL_GPIO_EXTI_Callback+0x178>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a09      	ldr	r2, [pc, #36]	@ (8001c04 <HAL_GPIO_EXTI_Callback+0x184>)
 8001be0:	6812      	ldr	r2, [r2, #0]
 8001be2:	4611      	mov	r1, r2
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff fe63 	bl	80018b0 <update_sine_wave>
}
 8001bea:	bf00      	nop
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	20000744 	.word	0x20000744
 8001bf8:	20000204 	.word	0x20000204
 8001bfc:	20000748 	.word	0x20000748
 8001c00:	2000074c 	.word	0x2000074c
 8001c04:	20000208 	.word	0x20000208
 8001c08:	000dbb9f 	.word	0x000dbb9f
 8001c0c:	20000750 	.word	0x20000750
 8001c10:	0001869f 	.word	0x0001869f

08001c14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c18:	b672      	cpsid	i
}
 8001c1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c1c:	bf00      	nop
 8001c1e:	e7fd      	b.n	8001c1c <Error_Handler+0x8>

08001c20 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c26:	4b0f      	ldr	r3, [pc, #60]	@ (8001c64 <HAL_MspInit+0x44>)
 8001c28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c2a:	4a0e      	ldr	r2, [pc, #56]	@ (8001c64 <HAL_MspInit+0x44>)
 8001c2c:	f043 0301 	orr.w	r3, r3, #1
 8001c30:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c32:	4b0c      	ldr	r3, [pc, #48]	@ (8001c64 <HAL_MspInit+0x44>)
 8001c34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	607b      	str	r3, [r7, #4]
 8001c3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c3e:	4b09      	ldr	r3, [pc, #36]	@ (8001c64 <HAL_MspInit+0x44>)
 8001c40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c42:	4a08      	ldr	r2, [pc, #32]	@ (8001c64 <HAL_MspInit+0x44>)
 8001c44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c48:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c4a:	4b06      	ldr	r3, [pc, #24]	@ (8001c64 <HAL_MspInit+0x44>)
 8001c4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c52:	603b      	str	r3, [r7, #0]
 8001c54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c56:	bf00      	nop
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	40021000 	.word	0x40021000

08001c68 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b08c      	sub	sp, #48	@ 0x30
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c70:	f107 031c 	add.w	r3, r7, #28
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	605a      	str	r2, [r3, #4]
 8001c7a:	609a      	str	r2, [r3, #8]
 8001c7c:	60da      	str	r2, [r3, #12]
 8001c7e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a34      	ldr	r2, [pc, #208]	@ (8001d58 <HAL_ADC_MspInit+0xf0>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d12e      	bne.n	8001ce8 <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8001c8a:	4b34      	ldr	r3, [pc, #208]	@ (8001d5c <HAL_ADC_MspInit+0xf4>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	3301      	adds	r3, #1
 8001c90:	4a32      	ldr	r2, [pc, #200]	@ (8001d5c <HAL_ADC_MspInit+0xf4>)
 8001c92:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001c94:	4b31      	ldr	r3, [pc, #196]	@ (8001d5c <HAL_ADC_MspInit+0xf4>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d10b      	bne.n	8001cb4 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001c9c:	4b30      	ldr	r3, [pc, #192]	@ (8001d60 <HAL_ADC_MspInit+0xf8>)
 8001c9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ca0:	4a2f      	ldr	r2, [pc, #188]	@ (8001d60 <HAL_ADC_MspInit+0xf8>)
 8001ca2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001ca6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ca8:	4b2d      	ldr	r3, [pc, #180]	@ (8001d60 <HAL_ADC_MspInit+0xf8>)
 8001caa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001cb0:	61bb      	str	r3, [r7, #24]
 8001cb2:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb4:	4b2a      	ldr	r3, [pc, #168]	@ (8001d60 <HAL_ADC_MspInit+0xf8>)
 8001cb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cb8:	4a29      	ldr	r2, [pc, #164]	@ (8001d60 <HAL_ADC_MspInit+0xf8>)
 8001cba:	f043 0301 	orr.w	r3, r3, #1
 8001cbe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cc0:	4b27      	ldr	r3, [pc, #156]	@ (8001d60 <HAL_ADC_MspInit+0xf8>)
 8001cc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cc4:	f003 0301 	and.w	r3, r3, #1
 8001cc8:	617b      	str	r3, [r7, #20]
 8001cca:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = CHANNEL1_Pin;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001cd0:	230b      	movs	r3, #11
 8001cd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(CHANNEL1_GPIO_Port, &GPIO_InitStruct);
 8001cd8:	f107 031c 	add.w	r3, r7, #28
 8001cdc:	4619      	mov	r1, r3
 8001cde:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ce2:	f002 fcc3 	bl	800466c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001ce6:	e032      	b.n	8001d4e <HAL_ADC_MspInit+0xe6>
  else if(hadc->Instance==ADC2)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a1d      	ldr	r2, [pc, #116]	@ (8001d64 <HAL_ADC_MspInit+0xfc>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d12d      	bne.n	8001d4e <HAL_ADC_MspInit+0xe6>
    HAL_RCC_ADC_CLK_ENABLED++;
 8001cf2:	4b1a      	ldr	r3, [pc, #104]	@ (8001d5c <HAL_ADC_MspInit+0xf4>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	4a18      	ldr	r2, [pc, #96]	@ (8001d5c <HAL_ADC_MspInit+0xf4>)
 8001cfa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001cfc:	4b17      	ldr	r3, [pc, #92]	@ (8001d5c <HAL_ADC_MspInit+0xf4>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d10b      	bne.n	8001d1c <HAL_ADC_MspInit+0xb4>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001d04:	4b16      	ldr	r3, [pc, #88]	@ (8001d60 <HAL_ADC_MspInit+0xf8>)
 8001d06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d08:	4a15      	ldr	r2, [pc, #84]	@ (8001d60 <HAL_ADC_MspInit+0xf8>)
 8001d0a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001d0e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d10:	4b13      	ldr	r3, [pc, #76]	@ (8001d60 <HAL_ADC_MspInit+0xf8>)
 8001d12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d14:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d18:	613b      	str	r3, [r7, #16]
 8001d1a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d1c:	4b10      	ldr	r3, [pc, #64]	@ (8001d60 <HAL_ADC_MspInit+0xf8>)
 8001d1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d20:	4a0f      	ldr	r2, [pc, #60]	@ (8001d60 <HAL_ADC_MspInit+0xf8>)
 8001d22:	f043 0301 	orr.w	r3, r3, #1
 8001d26:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d28:	4b0d      	ldr	r3, [pc, #52]	@ (8001d60 <HAL_ADC_MspInit+0xf8>)
 8001d2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d2c:	f003 0301 	and.w	r3, r3, #1
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CHANNEL2_Pin;
 8001d34:	2302      	movs	r3, #2
 8001d36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001d38:	230b      	movs	r3, #11
 8001d3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(CHANNEL2_GPIO_Port, &GPIO_InitStruct);
 8001d40:	f107 031c 	add.w	r3, r7, #28
 8001d44:	4619      	mov	r1, r3
 8001d46:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d4a:	f002 fc8f 	bl	800466c <HAL_GPIO_Init>
}
 8001d4e:	bf00      	nop
 8001d50:	3730      	adds	r7, #48	@ 0x30
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	50040000 	.word	0x50040000
 8001d5c:	20000754 	.word	0x20000754
 8001d60:	40021000 	.word	0x40021000
 8001d64:	50040100 	.word	0x50040100

08001d68 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b08a      	sub	sp, #40	@ 0x28
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d70:	f107 0314 	add.w	r3, r7, #20
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	605a      	str	r2, [r3, #4]
 8001d7a:	609a      	str	r2, [r3, #8]
 8001d7c:	60da      	str	r2, [r3, #12]
 8001d7e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a2f      	ldr	r2, [pc, #188]	@ (8001e44 <HAL_DAC_MspInit+0xdc>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d158      	bne.n	8001e3c <HAL_DAC_MspInit+0xd4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001d8a:	4b2f      	ldr	r3, [pc, #188]	@ (8001e48 <HAL_DAC_MspInit+0xe0>)
 8001d8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d8e:	4a2e      	ldr	r2, [pc, #184]	@ (8001e48 <HAL_DAC_MspInit+0xe0>)
 8001d90:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001d94:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d96:	4b2c      	ldr	r3, [pc, #176]	@ (8001e48 <HAL_DAC_MspInit+0xe0>)
 8001d98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d9a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001d9e:	613b      	str	r3, [r7, #16]
 8001da0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da2:	4b29      	ldr	r3, [pc, #164]	@ (8001e48 <HAL_DAC_MspInit+0xe0>)
 8001da4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001da6:	4a28      	ldr	r2, [pc, #160]	@ (8001e48 <HAL_DAC_MspInit+0xe0>)
 8001da8:	f043 0301 	orr.w	r3, r3, #1
 8001dac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dae:	4b26      	ldr	r3, [pc, #152]	@ (8001e48 <HAL_DAC_MspInit+0xe0>)
 8001db0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	60fb      	str	r3, [r7, #12]
 8001db8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = FGEN_OUT_Pin;
 8001dba:	2310      	movs	r3, #16
 8001dbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(FGEN_OUT_GPIO_Port, &GPIO_InitStruct);
 8001dc6:	f107 0314 	add.w	r3, r7, #20
 8001dca:	4619      	mov	r1, r3
 8001dcc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001dd0:	f002 fc4c 	bl	800466c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8001dd4:	4b1d      	ldr	r3, [pc, #116]	@ (8001e4c <HAL_DAC_MspInit+0xe4>)
 8001dd6:	4a1e      	ldr	r2, [pc, #120]	@ (8001e50 <HAL_DAC_MspInit+0xe8>)
 8001dd8:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8001dda:	4b1c      	ldr	r3, [pc, #112]	@ (8001e4c <HAL_DAC_MspInit+0xe4>)
 8001ddc:	2206      	movs	r2, #6
 8001dde:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001de0:	4b1a      	ldr	r3, [pc, #104]	@ (8001e4c <HAL_DAC_MspInit+0xe4>)
 8001de2:	2210      	movs	r2, #16
 8001de4:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001de6:	4b19      	ldr	r3, [pc, #100]	@ (8001e4c <HAL_DAC_MspInit+0xe4>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001dec:	4b17      	ldr	r3, [pc, #92]	@ (8001e4c <HAL_DAC_MspInit+0xe4>)
 8001dee:	2280      	movs	r2, #128	@ 0x80
 8001df0:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001df2:	4b16      	ldr	r3, [pc, #88]	@ (8001e4c <HAL_DAC_MspInit+0xe4>)
 8001df4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001df8:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001dfa:	4b14      	ldr	r3, [pc, #80]	@ (8001e4c <HAL_DAC_MspInit+0xe4>)
 8001dfc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001e00:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8001e02:	4b12      	ldr	r3, [pc, #72]	@ (8001e4c <HAL_DAC_MspInit+0xe4>)
 8001e04:	2220      	movs	r2, #32
 8001e06:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8001e08:	4b10      	ldr	r3, [pc, #64]	@ (8001e4c <HAL_DAC_MspInit+0xe4>)
 8001e0a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e0e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8001e10:	480e      	ldr	r0, [pc, #56]	@ (8001e4c <HAL_DAC_MspInit+0xe4>)
 8001e12:	f002 f9b5 	bl	8004180 <HAL_DMA_Init>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <HAL_DAC_MspInit+0xb8>
    {
      Error_Handler();
 8001e1c:	f7ff fefa 	bl	8001c14 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	4a0a      	ldr	r2, [pc, #40]	@ (8001e4c <HAL_DAC_MspInit+0xe4>)
 8001e24:	609a      	str	r2, [r3, #8]
 8001e26:	4a09      	ldr	r2, [pc, #36]	@ (8001e4c <HAL_DAC_MspInit+0xe4>)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	2100      	movs	r1, #0
 8001e30:	2036      	movs	r0, #54	@ 0x36
 8001e32:	f001 fdfe 	bl	8003a32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001e36:	2036      	movs	r0, #54	@ 0x36
 8001e38:	f001 fe17 	bl	8003a6a <HAL_NVIC_EnableIRQ>

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 8001e3c:	bf00      	nop
 8001e3e:	3728      	adds	r7, #40	@ 0x28
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	40007400 	.word	0x40007400
 8001e48:	40021000 	.word	0x40021000
 8001e4c:	20000310 	.word	0x20000310
 8001e50:	40020030 	.word	0x40020030

08001e54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b0ac      	sub	sp, #176	@ 0xb0
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e5c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	605a      	str	r2, [r3, #4]
 8001e66:	609a      	str	r2, [r3, #8]
 8001e68:	60da      	str	r2, [r3, #12]
 8001e6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e6c:	f107 0314 	add.w	r3, r7, #20
 8001e70:	2288      	movs	r2, #136	@ 0x88
 8001e72:	2100      	movs	r1, #0
 8001e74:	4618      	mov	r0, r3
 8001e76:	f007 fad8 	bl	800942a <memset>
  if(hi2c->Instance==I2C1)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a21      	ldr	r2, [pc, #132]	@ (8001f04 <HAL_I2C_MspInit+0xb0>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d13b      	bne.n	8001efc <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001e84:	2340      	movs	r3, #64	@ 0x40
 8001e86:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e8c:	f107 0314 	add.w	r3, r7, #20
 8001e90:	4618      	mov	r0, r3
 8001e92:	f004 f88f 	bl	8005fb4 <HAL_RCCEx_PeriphCLKConfig>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001e9c:	f7ff feba 	bl	8001c14 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ea0:	4b19      	ldr	r3, [pc, #100]	@ (8001f08 <HAL_I2C_MspInit+0xb4>)
 8001ea2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ea4:	4a18      	ldr	r2, [pc, #96]	@ (8001f08 <HAL_I2C_MspInit+0xb4>)
 8001ea6:	f043 0302 	orr.w	r3, r3, #2
 8001eaa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001eac:	4b16      	ldr	r3, [pc, #88]	@ (8001f08 <HAL_I2C_MspInit+0xb4>)
 8001eae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	613b      	str	r3, [r7, #16]
 8001eb6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001eb8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001ebc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ec0:	2312      	movs	r3, #18
 8001ec2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ed2:	2304      	movs	r3, #4
 8001ed4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ed8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001edc:	4619      	mov	r1, r3
 8001ede:	480b      	ldr	r0, [pc, #44]	@ (8001f0c <HAL_I2C_MspInit+0xb8>)
 8001ee0:	f002 fbc4 	bl	800466c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ee4:	4b08      	ldr	r3, [pc, #32]	@ (8001f08 <HAL_I2C_MspInit+0xb4>)
 8001ee6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ee8:	4a07      	ldr	r2, [pc, #28]	@ (8001f08 <HAL_I2C_MspInit+0xb4>)
 8001eea:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001eee:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ef0:	4b05      	ldr	r3, [pc, #20]	@ (8001f08 <HAL_I2C_MspInit+0xb4>)
 8001ef2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ef4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ef8:	60fb      	str	r3, [r7, #12]
 8001efa:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001efc:	bf00      	nop
 8001efe:	37b0      	adds	r7, #176	@ 0xb0
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40005400 	.word	0x40005400
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	48000400 	.word	0x48000400

08001f10 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b08a      	sub	sp, #40	@ 0x28
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f18:	f107 0314 	add.w	r3, r7, #20
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	605a      	str	r2, [r3, #4]
 8001f22:	609a      	str	r2, [r3, #8]
 8001f24:	60da      	str	r2, [r3, #12]
 8001f26:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a17      	ldr	r2, [pc, #92]	@ (8001f8c <HAL_SPI_MspInit+0x7c>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d128      	bne.n	8001f84 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001f32:	4b17      	ldr	r3, [pc, #92]	@ (8001f90 <HAL_SPI_MspInit+0x80>)
 8001f34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f36:	4a16      	ldr	r2, [pc, #88]	@ (8001f90 <HAL_SPI_MspInit+0x80>)
 8001f38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f3e:	4b14      	ldr	r3, [pc, #80]	@ (8001f90 <HAL_SPI_MspInit+0x80>)
 8001f40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f46:	613b      	str	r3, [r7, #16]
 8001f48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f4a:	4b11      	ldr	r3, [pc, #68]	@ (8001f90 <HAL_SPI_MspInit+0x80>)
 8001f4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f4e:	4a10      	ldr	r2, [pc, #64]	@ (8001f90 <HAL_SPI_MspInit+0x80>)
 8001f50:	f043 0302 	orr.w	r3, r3, #2
 8001f54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f56:	4b0e      	ldr	r3, [pc, #56]	@ (8001f90 <HAL_SPI_MspInit+0x80>)
 8001f58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	60fb      	str	r3, [r7, #12]
 8001f60:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001f62:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8001f66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f68:	2302      	movs	r3, #2
 8001f6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f70:	2303      	movs	r3, #3
 8001f72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f74:	2305      	movs	r3, #5
 8001f76:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f78:	f107 0314 	add.w	r3, r7, #20
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4805      	ldr	r0, [pc, #20]	@ (8001f94 <HAL_SPI_MspInit+0x84>)
 8001f80:	f002 fb74 	bl	800466c <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001f84:	bf00      	nop
 8001f86:	3728      	adds	r7, #40	@ 0x28
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	40003800 	.word	0x40003800
 8001f90:	40021000 	.word	0x40021000
 8001f94:	48000400 	.word	0x48000400

08001f98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fa8:	d113      	bne.n	8001fd2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001faa:	4b0c      	ldr	r3, [pc, #48]	@ (8001fdc <HAL_TIM_Base_MspInit+0x44>)
 8001fac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fae:	4a0b      	ldr	r2, [pc, #44]	@ (8001fdc <HAL_TIM_Base_MspInit+0x44>)
 8001fb0:	f043 0301 	orr.w	r3, r3, #1
 8001fb4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fb6:	4b09      	ldr	r3, [pc, #36]	@ (8001fdc <HAL_TIM_Base_MspInit+0x44>)
 8001fb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	60fb      	str	r3, [r7, #12]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	201c      	movs	r0, #28
 8001fc8:	f001 fd33 	bl	8003a32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001fcc:	201c      	movs	r0, #28
 8001fce:	f001 fd4c 	bl	8003a6a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001fd2:	bf00      	nop
 8001fd4:	3710      	adds	r7, #16
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	40021000 	.word	0x40021000

08001fe0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b088      	sub	sp, #32
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe8:	f107 030c 	add.w	r3, r7, #12
 8001fec:	2200      	movs	r2, #0
 8001fee:	601a      	str	r2, [r3, #0]
 8001ff0:	605a      	str	r2, [r3, #4]
 8001ff2:	609a      	str	r2, [r3, #8]
 8001ff4:	60da      	str	r2, [r3, #12]
 8001ff6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002000:	d11d      	bne.n	800203e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002002:	4b11      	ldr	r3, [pc, #68]	@ (8002048 <HAL_TIM_MspPostInit+0x68>)
 8002004:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002006:	4a10      	ldr	r2, [pc, #64]	@ (8002048 <HAL_TIM_MspPostInit+0x68>)
 8002008:	f043 0301 	orr.w	r3, r3, #1
 800200c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800200e:	4b0e      	ldr	r3, [pc, #56]	@ (8002048 <HAL_TIM_MspPostInit+0x68>)
 8002010:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	60bb      	str	r3, [r7, #8]
 8002018:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800201a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800201e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002020:	2302      	movs	r3, #2
 8002022:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002024:	2300      	movs	r3, #0
 8002026:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002028:	2300      	movs	r3, #0
 800202a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800202c:	2301      	movs	r3, #1
 800202e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002030:	f107 030c 	add.w	r3, r7, #12
 8002034:	4619      	mov	r1, r3
 8002036:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800203a:	f002 fb17 	bl	800466c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800203e:	bf00      	nop
 8002040:	3720      	adds	r7, #32
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	40021000 	.word	0x40021000

0800204c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b0ac      	sub	sp, #176	@ 0xb0
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002054:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002058:	2200      	movs	r2, #0
 800205a:	601a      	str	r2, [r3, #0]
 800205c:	605a      	str	r2, [r3, #4]
 800205e:	609a      	str	r2, [r3, #8]
 8002060:	60da      	str	r2, [r3, #12]
 8002062:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002064:	f107 0314 	add.w	r3, r7, #20
 8002068:	2288      	movs	r2, #136	@ 0x88
 800206a:	2100      	movs	r1, #0
 800206c:	4618      	mov	r0, r3
 800206e:	f007 f9dc 	bl	800942a <memset>
  if(huart->Instance==USART2)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a3a      	ldr	r2, [pc, #232]	@ (8002160 <HAL_UART_MspInit+0x114>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d16c      	bne.n	8002156 <HAL_UART_MspInit+0x10a>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800207c:	2302      	movs	r3, #2
 800207e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002080:	2300      	movs	r3, #0
 8002082:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002084:	f107 0314 	add.w	r3, r7, #20
 8002088:	4618      	mov	r0, r3
 800208a:	f003 ff93 	bl	8005fb4 <HAL_RCCEx_PeriphCLKConfig>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d001      	beq.n	8002098 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002094:	f7ff fdbe 	bl	8001c14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002098:	4b32      	ldr	r3, [pc, #200]	@ (8002164 <HAL_UART_MspInit+0x118>)
 800209a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800209c:	4a31      	ldr	r2, [pc, #196]	@ (8002164 <HAL_UART_MspInit+0x118>)
 800209e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80020a4:	4b2f      	ldr	r3, [pc, #188]	@ (8002164 <HAL_UART_MspInit+0x118>)
 80020a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020ac:	613b      	str	r3, [r7, #16]
 80020ae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020b0:	4b2c      	ldr	r3, [pc, #176]	@ (8002164 <HAL_UART_MspInit+0x118>)
 80020b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020b4:	4a2b      	ldr	r2, [pc, #172]	@ (8002164 <HAL_UART_MspInit+0x118>)
 80020b6:	f043 0301 	orr.w	r3, r3, #1
 80020ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020bc:	4b29      	ldr	r3, [pc, #164]	@ (8002164 <HAL_UART_MspInit+0x118>)
 80020be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020c0:	f003 0301 	and.w	r3, r3, #1
 80020c4:	60fb      	str	r3, [r7, #12]
 80020c6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80020c8:	230c      	movs	r3, #12
 80020ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ce:	2302      	movs	r3, #2
 80020d0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d4:	2300      	movs	r3, #0
 80020d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020da:	2303      	movs	r3, #3
 80020dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020e0:	2307      	movs	r3, #7
 80020e2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020e6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80020ea:	4619      	mov	r1, r3
 80020ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020f0:	f002 fabc 	bl	800466c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80020f4:	4b1c      	ldr	r3, [pc, #112]	@ (8002168 <HAL_UART_MspInit+0x11c>)
 80020f6:	4a1d      	ldr	r2, [pc, #116]	@ (800216c <HAL_UART_MspInit+0x120>)
 80020f8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 80020fa:	4b1b      	ldr	r3, [pc, #108]	@ (8002168 <HAL_UART_MspInit+0x11c>)
 80020fc:	2202      	movs	r2, #2
 80020fe:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002100:	4b19      	ldr	r3, [pc, #100]	@ (8002168 <HAL_UART_MspInit+0x11c>)
 8002102:	2210      	movs	r2, #16
 8002104:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002106:	4b18      	ldr	r3, [pc, #96]	@ (8002168 <HAL_UART_MspInit+0x11c>)
 8002108:	2200      	movs	r2, #0
 800210a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800210c:	4b16      	ldr	r3, [pc, #88]	@ (8002168 <HAL_UART_MspInit+0x11c>)
 800210e:	2280      	movs	r2, #128	@ 0x80
 8002110:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002112:	4b15      	ldr	r3, [pc, #84]	@ (8002168 <HAL_UART_MspInit+0x11c>)
 8002114:	2200      	movs	r2, #0
 8002116:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002118:	4b13      	ldr	r3, [pc, #76]	@ (8002168 <HAL_UART_MspInit+0x11c>)
 800211a:	2200      	movs	r2, #0
 800211c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800211e:	4b12      	ldr	r3, [pc, #72]	@ (8002168 <HAL_UART_MspInit+0x11c>)
 8002120:	2200      	movs	r2, #0
 8002122:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002124:	4b10      	ldr	r3, [pc, #64]	@ (8002168 <HAL_UART_MspInit+0x11c>)
 8002126:	2200      	movs	r2, #0
 8002128:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800212a:	480f      	ldr	r0, [pc, #60]	@ (8002168 <HAL_UART_MspInit+0x11c>)
 800212c:	f002 f828 	bl	8004180 <HAL_DMA_Init>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <HAL_UART_MspInit+0xee>
    {
      Error_Handler();
 8002136:	f7ff fd6d 	bl	8001c14 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a0a      	ldr	r2, [pc, #40]	@ (8002168 <HAL_UART_MspInit+0x11c>)
 800213e:	671a      	str	r2, [r3, #112]	@ 0x70
 8002140:	4a09      	ldr	r2, [pc, #36]	@ (8002168 <HAL_UART_MspInit+0x11c>)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002146:	2200      	movs	r2, #0
 8002148:	2100      	movs	r1, #0
 800214a:	2026      	movs	r0, #38	@ 0x26
 800214c:	f001 fc71 	bl	8003a32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002150:	2026      	movs	r0, #38	@ 0x26
 8002152:	f001 fc8a 	bl	8003a6a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8002156:	bf00      	nop
 8002158:	37b0      	adds	r7, #176	@ 0xb0
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	40004400 	.word	0x40004400
 8002164:	40021000 	.word	0x40021000
 8002168:	200004e4 	.word	0x200004e4
 800216c:	40020080 	.word	0x40020080

08002170 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002174:	bf00      	nop
 8002176:	e7fd      	b.n	8002174 <NMI_Handler+0x4>

08002178 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800217c:	bf00      	nop
 800217e:	e7fd      	b.n	800217c <HardFault_Handler+0x4>

08002180 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002184:	bf00      	nop
 8002186:	e7fd      	b.n	8002184 <MemManage_Handler+0x4>

08002188 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800218c:	bf00      	nop
 800218e:	e7fd      	b.n	800218c <BusFault_Handler+0x4>

08002190 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002194:	bf00      	nop
 8002196:	e7fd      	b.n	8002194 <UsageFault_Handler+0x4>

08002198 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800219c:	bf00      	nop
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr

080021a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021a6:	b480      	push	{r7}
 80021a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021aa:	bf00      	nop
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021b8:	bf00      	nop
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr

080021c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021c2:	b580      	push	{r7, lr}
 80021c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021c6:	f000 f8f3 	bl	80023b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021ca:	bf00      	nop
 80021cc:	bd80      	pop	{r7, pc}

080021ce <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(FREQ_SMALL_Pin);
 80021d2:	2008      	movs	r0, #8
 80021d4:	f002 fc0c 	bl	80049f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80021d8:	bf00      	nop
 80021da:	bd80      	pop	{r7, pc}

080021dc <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(VPP_SMALL_Pin);
 80021e0:	2010      	movs	r0, #16
 80021e2:	f002 fc05 	bl	80049f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80021e6:	bf00      	nop
 80021e8:	bd80      	pop	{r7, pc}
	...

080021ec <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 80021f0:	4802      	ldr	r0, [pc, #8]	@ (80021fc <DMA1_Channel3_IRQHandler+0x10>)
 80021f2:	f002 f95c 	bl	80044ae <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80021f6:	bf00      	nop
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	20000310 	.word	0x20000310

08002200 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002204:	4802      	ldr	r0, [pc, #8]	@ (8002210 <DMA1_Channel7_IRQHandler+0x10>)
 8002206:	f002 f952 	bl	80044ae <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800220a:	bf00      	nop
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	200004e4 	.word	0x200004e4

08002214 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(VPP_BIG_Pin);
 8002218:	2020      	movs	r0, #32
 800221a:	f002 fbe9 	bl	80049f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(REVERSE_Pin);
 800221e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002222:	f002 fbe5 	bl	80049f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002226:	bf00      	nop
 8002228:	bd80      	pop	{r7, pc}
	...

0800222c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002230:	4802      	ldr	r0, [pc, #8]	@ (800223c <TIM2_IRQHandler+0x10>)
 8002232:	f005 f88a 	bl	800734a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002236:	bf00      	nop
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	20000410 	.word	0x20000410

08002240 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002244:	4802      	ldr	r0, [pc, #8]	@ (8002250 <USART2_IRQHandler+0x10>)
 8002246:	f006 f8ad 	bl	80083a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800224a:	bf00      	nop
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	2000045c 	.word	0x2000045c

08002254 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(FREQ_BIG_Pin);
 8002258:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800225c:	f002 fbc8 	bl	80049f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002260:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002264:	f002 fbc4 	bl	80049f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002268:	bf00      	nop
 800226a:	bd80      	pop	{r7, pc}

0800226c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 8002270:	4802      	ldr	r0, [pc, #8]	@ (800227c <TIM6_DAC_IRQHandler+0x10>)
 8002272:	f001 fd48 	bl	8003d06 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002276:	bf00      	nop
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	200002fc 	.word	0x200002fc

08002280 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002284:	4b06      	ldr	r3, [pc, #24]	@ (80022a0 <SystemInit+0x20>)
 8002286:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800228a:	4a05      	ldr	r2, [pc, #20]	@ (80022a0 <SystemInit+0x20>)
 800228c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002290:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002294:	bf00      	nop
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	e000ed00 	.word	0xe000ed00

080022a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80022a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80022dc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80022a8:	f7ff ffea 	bl	8002280 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022ac:	480c      	ldr	r0, [pc, #48]	@ (80022e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80022ae:	490d      	ldr	r1, [pc, #52]	@ (80022e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80022b0:	4a0d      	ldr	r2, [pc, #52]	@ (80022e8 <LoopForever+0xe>)
  movs r3, #0
 80022b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022b4:	e002      	b.n	80022bc <LoopCopyDataInit>

080022b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022ba:	3304      	adds	r3, #4

080022bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022c0:	d3f9      	bcc.n	80022b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022c2:	4a0a      	ldr	r2, [pc, #40]	@ (80022ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80022c4:	4c0a      	ldr	r4, [pc, #40]	@ (80022f0 <LoopForever+0x16>)
  movs r3, #0
 80022c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022c8:	e001      	b.n	80022ce <LoopFillZerobss>

080022ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022cc:	3204      	adds	r2, #4

080022ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022d0:	d3fb      	bcc.n	80022ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022d2:	f007 f8b3 	bl	800943c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80022d6:	f7fe fde5 	bl	8000ea4 <main>

080022da <LoopForever>:

LoopForever:
    b LoopForever
 80022da:	e7fe      	b.n	80022da <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80022dc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80022e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022e4:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 80022e8:	08009524 	.word	0x08009524
  ldr r2, =_sbss
 80022ec:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 80022f0:	2000075c 	.word	0x2000075c

080022f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80022f4:	e7fe      	b.n	80022f4 <ADC1_2_IRQHandler>
	...

080022f8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80022fe:	2300      	movs	r3, #0
 8002300:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002302:	4b0c      	ldr	r3, [pc, #48]	@ (8002334 <HAL_Init+0x3c>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a0b      	ldr	r2, [pc, #44]	@ (8002334 <HAL_Init+0x3c>)
 8002308:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800230c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800230e:	2003      	movs	r0, #3
 8002310:	f001 fb84 	bl	8003a1c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002314:	2001      	movs	r0, #1
 8002316:	f000 f80f 	bl	8002338 <HAL_InitTick>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d002      	beq.n	8002326 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	71fb      	strb	r3, [r7, #7]
 8002324:	e001      	b.n	800232a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002326:	f7ff fc7b 	bl	8001c20 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800232a:	79fb      	ldrb	r3, [r7, #7]
}
 800232c:	4618      	mov	r0, r3
 800232e:	3708      	adds	r7, #8
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	40022000 	.word	0x40022000

08002338 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002340:	2300      	movs	r3, #0
 8002342:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002344:	4b17      	ldr	r3, [pc, #92]	@ (80023a4 <HAL_InitTick+0x6c>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d023      	beq.n	8002394 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800234c:	4b16      	ldr	r3, [pc, #88]	@ (80023a8 <HAL_InitTick+0x70>)
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	4b14      	ldr	r3, [pc, #80]	@ (80023a4 <HAL_InitTick+0x6c>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	4619      	mov	r1, r3
 8002356:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800235a:	fbb3 f3f1 	udiv	r3, r3, r1
 800235e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002362:	4618      	mov	r0, r3
 8002364:	f001 fb8f 	bl	8003a86 <HAL_SYSTICK_Config>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d10f      	bne.n	800238e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2b0f      	cmp	r3, #15
 8002372:	d809      	bhi.n	8002388 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002374:	2200      	movs	r2, #0
 8002376:	6879      	ldr	r1, [r7, #4]
 8002378:	f04f 30ff 	mov.w	r0, #4294967295
 800237c:	f001 fb59 	bl	8003a32 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002380:	4a0a      	ldr	r2, [pc, #40]	@ (80023ac <HAL_InitTick+0x74>)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6013      	str	r3, [r2, #0]
 8002386:	e007      	b.n	8002398 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	73fb      	strb	r3, [r7, #15]
 800238c:	e004      	b.n	8002398 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	73fb      	strb	r3, [r7, #15]
 8002392:	e001      	b.n	8002398 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002398:	7bfb      	ldrb	r3, [r7, #15]
}
 800239a:	4618      	mov	r0, r3
 800239c:	3710      	adds	r7, #16
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	20000214 	.word	0x20000214
 80023a8:	2000020c 	.word	0x2000020c
 80023ac:	20000210 	.word	0x20000210

080023b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80023b4:	4b06      	ldr	r3, [pc, #24]	@ (80023d0 <HAL_IncTick+0x20>)
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	461a      	mov	r2, r3
 80023ba:	4b06      	ldr	r3, [pc, #24]	@ (80023d4 <HAL_IncTick+0x24>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4413      	add	r3, r2
 80023c0:	4a04      	ldr	r2, [pc, #16]	@ (80023d4 <HAL_IncTick+0x24>)
 80023c2:	6013      	str	r3, [r2, #0]
}
 80023c4:	bf00      	nop
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	20000214 	.word	0x20000214
 80023d4:	20000758 	.word	0x20000758

080023d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  return uwTick;
 80023dc:	4b03      	ldr	r3, [pc, #12]	@ (80023ec <HAL_GetTick+0x14>)
 80023de:	681b      	ldr	r3, [r3, #0]
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	20000758 	.word	0x20000758

080023f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023f8:	f7ff ffee 	bl	80023d8 <HAL_GetTick>
 80023fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002408:	d005      	beq.n	8002416 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800240a:	4b0a      	ldr	r3, [pc, #40]	@ (8002434 <HAL_Delay+0x44>)
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	461a      	mov	r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	4413      	add	r3, r2
 8002414:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002416:	bf00      	nop
 8002418:	f7ff ffde 	bl	80023d8 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	68fa      	ldr	r2, [r7, #12]
 8002424:	429a      	cmp	r2, r3
 8002426:	d8f7      	bhi.n	8002418 <HAL_Delay+0x28>
  {
  }
}
 8002428:	bf00      	nop
 800242a:	bf00      	nop
 800242c:	3710      	adds	r7, #16
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	20000214 	.word	0x20000214

08002438 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	431a      	orrs	r2, r3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	609a      	str	r2, [r3, #8]
}
 8002452:	bf00      	nop
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr

0800245e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800245e:	b480      	push	{r7}
 8002460:	b083      	sub	sp, #12
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
 8002466:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	431a      	orrs	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	609a      	str	r2, [r3, #8]
}
 8002478:	bf00      	nop
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002494:	4618      	mov	r0, r3
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b087      	sub	sp, #28
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	607a      	str	r2, [r7, #4]
 80024ac:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	3360      	adds	r3, #96	@ 0x60
 80024b2:	461a      	mov	r2, r3
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	4413      	add	r3, r2
 80024ba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	4b08      	ldr	r3, [pc, #32]	@ (80024e4 <LL_ADC_SetOffset+0x44>)
 80024c2:	4013      	ands	r3, r2
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80024ca:	683a      	ldr	r2, [r7, #0]
 80024cc:	430a      	orrs	r2, r1
 80024ce:	4313      	orrs	r3, r2
 80024d0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80024d8:	bf00      	nop
 80024da:	371c      	adds	r7, #28
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr
 80024e4:	03fff000 	.word	0x03fff000

080024e8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	3360      	adds	r3, #96	@ 0x60
 80024f6:	461a      	mov	r2, r3
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	4413      	add	r3, r2
 80024fe:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002508:	4618      	mov	r0, r3
 800250a:	3714      	adds	r7, #20
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002514:	b480      	push	{r7}
 8002516:	b087      	sub	sp, #28
 8002518:	af00      	add	r7, sp, #0
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	60b9      	str	r1, [r7, #8]
 800251e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	3360      	adds	r3, #96	@ 0x60
 8002524:	461a      	mov	r2, r3
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	4413      	add	r3, r2
 800252c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	431a      	orrs	r2, r3
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800253e:	bf00      	nop
 8002540:	371c      	adds	r7, #28
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr

0800254a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800254a:	b480      	push	{r7}
 800254c:	b083      	sub	sp, #12
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800255a:	2b00      	cmp	r3, #0
 800255c:	d101      	bne.n	8002562 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800255e:	2301      	movs	r3, #1
 8002560:	e000      	b.n	8002564 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002562:	2300      	movs	r3, #0
}
 8002564:	4618      	mov	r0, r3
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002570:	b480      	push	{r7}
 8002572:	b087      	sub	sp, #28
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	3330      	adds	r3, #48	@ 0x30
 8002580:	461a      	mov	r2, r3
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	0a1b      	lsrs	r3, r3, #8
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	f003 030c 	and.w	r3, r3, #12
 800258c:	4413      	add	r3, r2
 800258e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	f003 031f 	and.w	r3, r3, #31
 800259a:	211f      	movs	r1, #31
 800259c:	fa01 f303 	lsl.w	r3, r1, r3
 80025a0:	43db      	mvns	r3, r3
 80025a2:	401a      	ands	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	0e9b      	lsrs	r3, r3, #26
 80025a8:	f003 011f 	and.w	r1, r3, #31
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	f003 031f 	and.w	r3, r3, #31
 80025b2:	fa01 f303 	lsl.w	r3, r1, r3
 80025b6:	431a      	orrs	r2, r3
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80025bc:	bf00      	nop
 80025be:	371c      	adds	r7, #28
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b087      	sub	sp, #28
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	3314      	adds	r3, #20
 80025d8:	461a      	mov	r2, r3
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	0e5b      	lsrs	r3, r3, #25
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	f003 0304 	and.w	r3, r3, #4
 80025e4:	4413      	add	r3, r2
 80025e6:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	0d1b      	lsrs	r3, r3, #20
 80025f0:	f003 031f 	and.w	r3, r3, #31
 80025f4:	2107      	movs	r1, #7
 80025f6:	fa01 f303 	lsl.w	r3, r1, r3
 80025fa:	43db      	mvns	r3, r3
 80025fc:	401a      	ands	r2, r3
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	0d1b      	lsrs	r3, r3, #20
 8002602:	f003 031f 	and.w	r3, r3, #31
 8002606:	6879      	ldr	r1, [r7, #4]
 8002608:	fa01 f303 	lsl.w	r3, r1, r3
 800260c:	431a      	orrs	r2, r3
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002612:	bf00      	nop
 8002614:	371c      	adds	r7, #28
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
	...

08002620 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002620:	b480      	push	{r7}
 8002622:	b085      	sub	sp, #20
 8002624:	af00      	add	r7, sp, #0
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002638:	43db      	mvns	r3, r3
 800263a:	401a      	ands	r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f003 0318 	and.w	r3, r3, #24
 8002642:	4908      	ldr	r1, [pc, #32]	@ (8002664 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002644:	40d9      	lsrs	r1, r3
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	400b      	ands	r3, r1
 800264a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800264e:	431a      	orrs	r2, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002656:	bf00      	nop
 8002658:	3714      	adds	r7, #20
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	0007ffff 	.word	0x0007ffff

08002668 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f003 031f 	and.w	r3, r3, #31
}
 8002678:	4618      	mov	r0, r3
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002694:	4618      	mov	r0, r3
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80026b0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	6093      	str	r3, [r2, #8]
}
 80026b8:	bf00      	nop
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80026d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80026d8:	d101      	bne.n	80026de <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80026da:	2301      	movs	r3, #1
 80026dc:	e000      	b.n	80026e0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80026de:	2300      	movs	r3, #0
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr

080026ec <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80026fc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002700:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002708:	bf00      	nop
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002724:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002728:	d101      	bne.n	800272e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800272a:	2301      	movs	r3, #1
 800272c:	e000      	b.n	8002730 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800272e:	2300      	movs	r3, #0
}
 8002730:	4618      	mov	r0, r3
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800274c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002750:	f043 0201 	orr.w	r2, r3, #1
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002758:	bf00      	nop
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr

08002764 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	f003 0301 	and.w	r3, r3, #1
 8002774:	2b01      	cmp	r3, #1
 8002776:	d101      	bne.n	800277c <LL_ADC_IsEnabled+0x18>
 8002778:	2301      	movs	r3, #1
 800277a:	e000      	b.n	800277e <LL_ADC_IsEnabled+0x1a>
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr

0800278a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800278a:	b480      	push	{r7}
 800278c:	b083      	sub	sp, #12
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800279a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800279e:	f043 0204 	orr.w	r2, r3, #4
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80027a6:	bf00      	nop
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr

080027b2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80027b2:	b480      	push	{r7}
 80027b4:	b083      	sub	sp, #12
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	f003 0304 	and.w	r3, r3, #4
 80027c2:	2b04      	cmp	r3, #4
 80027c4:	d101      	bne.n	80027ca <LL_ADC_REG_IsConversionOngoing+0x18>
 80027c6:	2301      	movs	r3, #1
 80027c8:	e000      	b.n	80027cc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f003 0308 	and.w	r3, r3, #8
 80027e8:	2b08      	cmp	r3, #8
 80027ea:	d101      	bne.n	80027f0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80027ec:	2301      	movs	r3, #1
 80027ee:	e000      	b.n	80027f2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	370c      	adds	r7, #12
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
	...

08002800 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002800:	b590      	push	{r4, r7, lr}
 8002802:	b089      	sub	sp, #36	@ 0x24
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002808:	2300      	movs	r3, #0
 800280a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800280c:	2300      	movs	r3, #0
 800280e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d101      	bne.n	800281a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e130      	b.n	8002a7c <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002824:	2b00      	cmp	r3, #0
 8002826:	d109      	bne.n	800283c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f7ff fa1d 	bl	8001c68 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4618      	mov	r0, r3
 8002842:	f7ff ff3f 	bl	80026c4 <LL_ADC_IsDeepPowerDownEnabled>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d004      	beq.n	8002856 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4618      	mov	r0, r3
 8002852:	f7ff ff25 	bl	80026a0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4618      	mov	r0, r3
 800285c:	f7ff ff5a 	bl	8002714 <LL_ADC_IsInternalRegulatorEnabled>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d115      	bne.n	8002892 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4618      	mov	r0, r3
 800286c:	f7ff ff3e 	bl	80026ec <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002870:	4b84      	ldr	r3, [pc, #528]	@ (8002a84 <HAL_ADC_Init+0x284>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	099b      	lsrs	r3, r3, #6
 8002876:	4a84      	ldr	r2, [pc, #528]	@ (8002a88 <HAL_ADC_Init+0x288>)
 8002878:	fba2 2303 	umull	r2, r3, r2, r3
 800287c:	099b      	lsrs	r3, r3, #6
 800287e:	3301      	adds	r3, #1
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002884:	e002      	b.n	800288c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	3b01      	subs	r3, #1
 800288a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1f9      	bne.n	8002886 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4618      	mov	r0, r3
 8002898:	f7ff ff3c 	bl	8002714 <LL_ADC_IsInternalRegulatorEnabled>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d10d      	bne.n	80028be <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028a6:	f043 0210 	orr.w	r2, r3, #16
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028b2:	f043 0201 	orr.w	r2, r3, #1
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7ff ff75 	bl	80027b2 <LL_ADC_REG_IsConversionOngoing>
 80028c8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028ce:	f003 0310 	and.w	r3, r3, #16
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	f040 80c9 	bne.w	8002a6a <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	f040 80c5 	bne.w	8002a6a <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028e4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80028e8:	f043 0202 	orr.w	r2, r3, #2
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7ff ff35 	bl	8002764 <LL_ADC_IsEnabled>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d115      	bne.n	800292c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002900:	4862      	ldr	r0, [pc, #392]	@ (8002a8c <HAL_ADC_Init+0x28c>)
 8002902:	f7ff ff2f 	bl	8002764 <LL_ADC_IsEnabled>
 8002906:	4604      	mov	r4, r0
 8002908:	4861      	ldr	r0, [pc, #388]	@ (8002a90 <HAL_ADC_Init+0x290>)
 800290a:	f7ff ff2b 	bl	8002764 <LL_ADC_IsEnabled>
 800290e:	4603      	mov	r3, r0
 8002910:	431c      	orrs	r4, r3
 8002912:	4860      	ldr	r0, [pc, #384]	@ (8002a94 <HAL_ADC_Init+0x294>)
 8002914:	f7ff ff26 	bl	8002764 <LL_ADC_IsEnabled>
 8002918:	4603      	mov	r3, r0
 800291a:	4323      	orrs	r3, r4
 800291c:	2b00      	cmp	r3, #0
 800291e:	d105      	bne.n	800292c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	4619      	mov	r1, r3
 8002926:	485c      	ldr	r0, [pc, #368]	@ (8002a98 <HAL_ADC_Init+0x298>)
 8002928:	f7ff fd86 	bl	8002438 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	7e5b      	ldrb	r3, [r3, #25]
 8002930:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002936:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800293c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002942:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f893 3020 	ldrb.w	r3, [r3, #32]
 800294a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800294c:	4313      	orrs	r3, r2
 800294e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002956:	2b01      	cmp	r3, #1
 8002958:	d106      	bne.n	8002968 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800295e:	3b01      	subs	r3, #1
 8002960:	045b      	lsls	r3, r3, #17
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	4313      	orrs	r3, r2
 8002966:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800296c:	2b00      	cmp	r3, #0
 800296e:	d009      	beq.n	8002984 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002974:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800297c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	4313      	orrs	r3, r2
 8002982:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68da      	ldr	r2, [r3, #12]
 800298a:	4b44      	ldr	r3, [pc, #272]	@ (8002a9c <HAL_ADC_Init+0x29c>)
 800298c:	4013      	ands	r3, r2
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	6812      	ldr	r2, [r2, #0]
 8002992:	69b9      	ldr	r1, [r7, #24]
 8002994:	430b      	orrs	r3, r1
 8002996:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4618      	mov	r0, r3
 800299e:	f7ff ff1b 	bl	80027d8 <LL_ADC_INJ_IsConversionOngoing>
 80029a2:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d13d      	bne.n	8002a26 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d13a      	bne.n	8002a26 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80029b4:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80029bc:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80029be:	4313      	orrs	r3, r2
 80029c0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80029cc:	f023 0302 	bic.w	r3, r3, #2
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	6812      	ldr	r2, [r2, #0]
 80029d4:	69b9      	ldr	r1, [r7, #24]
 80029d6:	430b      	orrs	r3, r1
 80029d8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d118      	bne.n	8002a16 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80029ee:	f023 0304 	bic.w	r3, r3, #4
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80029fa:	4311      	orrs	r1, r2
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002a00:	4311      	orrs	r1, r2
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002a06:	430a      	orrs	r2, r1
 8002a08:	431a      	orrs	r2, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f042 0201 	orr.w	r2, r2, #1
 8002a12:	611a      	str	r2, [r3, #16]
 8002a14:	e007      	b.n	8002a26 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	691a      	ldr	r2, [r3, #16]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f022 0201 	bic.w	r2, r2, #1
 8002a24:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	691b      	ldr	r3, [r3, #16]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d10c      	bne.n	8002a48 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a34:	f023 010f 	bic.w	r1, r3, #15
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	69db      	ldr	r3, [r3, #28]
 8002a3c:	1e5a      	subs	r2, r3, #1
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	430a      	orrs	r2, r1
 8002a44:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a46:	e007      	b.n	8002a58 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f022 020f 	bic.w	r2, r2, #15
 8002a56:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a5c:	f023 0303 	bic.w	r3, r3, #3
 8002a60:	f043 0201 	orr.w	r2, r3, #1
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	655a      	str	r2, [r3, #84]	@ 0x54
 8002a68:	e007      	b.n	8002a7a <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a6e:	f043 0210 	orr.w	r2, r3, #16
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002a7a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3724      	adds	r7, #36	@ 0x24
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd90      	pop	{r4, r7, pc}
 8002a84:	2000020c 	.word	0x2000020c
 8002a88:	053e2d63 	.word	0x053e2d63
 8002a8c:	50040000 	.word	0x50040000
 8002a90:	50040100 	.word	0x50040100
 8002a94:	50040200 	.word	0x50040200
 8002a98:	50040300 	.word	0x50040300
 8002a9c:	fff0c007 	.word	0xfff0c007

08002aa0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b086      	sub	sp, #24
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002aa8:	4857      	ldr	r0, [pc, #348]	@ (8002c08 <HAL_ADC_Start+0x168>)
 8002aaa:	f7ff fddd 	bl	8002668 <LL_ADC_GetMultimode>
 8002aae:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7ff fe7c 	bl	80027b2 <LL_ADC_REG_IsConversionOngoing>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	f040 809c 	bne.w	8002bfa <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d101      	bne.n	8002ad0 <HAL_ADC_Start+0x30>
 8002acc:	2302      	movs	r3, #2
 8002ace:	e097      	b.n	8002c00 <HAL_ADC_Start+0x160>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f000 fd73 	bl	80035c4 <ADC_Enable>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002ae2:	7dfb      	ldrb	r3, [r7, #23]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	f040 8083 	bne.w	8002bf0 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aee:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002af2:	f023 0301 	bic.w	r3, r3, #1
 8002af6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a42      	ldr	r2, [pc, #264]	@ (8002c0c <HAL_ADC_Start+0x16c>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d002      	beq.n	8002b0e <HAL_ADC_Start+0x6e>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	e000      	b.n	8002b10 <HAL_ADC_Start+0x70>
 8002b0e:	4b40      	ldr	r3, [pc, #256]	@ (8002c10 <HAL_ADC_Start+0x170>)
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	6812      	ldr	r2, [r2, #0]
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d002      	beq.n	8002b1e <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d105      	bne.n	8002b2a <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b22:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b2e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b36:	d106      	bne.n	8002b46 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b3c:	f023 0206 	bic.w	r2, r3, #6
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	659a      	str	r2, [r3, #88]	@ 0x58
 8002b44:	e002      	b.n	8002b4c <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	221c      	movs	r2, #28
 8002b52:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a2a      	ldr	r2, [pc, #168]	@ (8002c0c <HAL_ADC_Start+0x16c>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d002      	beq.n	8002b6c <HAL_ADC_Start+0xcc>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	e000      	b.n	8002b6e <HAL_ADC_Start+0xce>
 8002b6c:	4b28      	ldr	r3, [pc, #160]	@ (8002c10 <HAL_ADC_Start+0x170>)
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	6812      	ldr	r2, [r2, #0]
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d008      	beq.n	8002b88 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d005      	beq.n	8002b88 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	2b05      	cmp	r3, #5
 8002b80:	d002      	beq.n	8002b88 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	2b09      	cmp	r3, #9
 8002b86:	d114      	bne.n	8002bb2 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d007      	beq.n	8002ba6 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b9a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002b9e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7ff fded 	bl	800278a <LL_ADC_REG_StartConversion>
 8002bb0:	e025      	b.n	8002bfe <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bb6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a12      	ldr	r2, [pc, #72]	@ (8002c0c <HAL_ADC_Start+0x16c>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d002      	beq.n	8002bce <HAL_ADC_Start+0x12e>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	e000      	b.n	8002bd0 <HAL_ADC_Start+0x130>
 8002bce:	4b10      	ldr	r3, [pc, #64]	@ (8002c10 <HAL_ADC_Start+0x170>)
 8002bd0:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00f      	beq.n	8002bfe <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002be2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002be6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	655a      	str	r2, [r3, #84]	@ 0x54
 8002bee:	e006      	b.n	8002bfe <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002bf8:	e001      	b.n	8002bfe <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002bfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3718      	adds	r7, #24
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	50040300 	.word	0x50040300
 8002c0c:	50040100 	.word	0x50040100
 8002c10:	50040000 	.word	0x50040000

08002c14 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b088      	sub	sp, #32
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c1e:	4866      	ldr	r0, [pc, #408]	@ (8002db8 <HAL_ADC_PollForConversion+0x1a4>)
 8002c20:	f7ff fd22 	bl	8002668 <LL_ADC_GetMultimode>
 8002c24:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	695b      	ldr	r3, [r3, #20]
 8002c2a:	2b08      	cmp	r3, #8
 8002c2c:	d102      	bne.n	8002c34 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002c2e:	2308      	movs	r3, #8
 8002c30:	61fb      	str	r3, [r7, #28]
 8002c32:	e02a      	b.n	8002c8a <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d005      	beq.n	8002c46 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	2b05      	cmp	r3, #5
 8002c3e:	d002      	beq.n	8002c46 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	2b09      	cmp	r3, #9
 8002c44:	d111      	bne.n	8002c6a <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	f003 0301 	and.w	r3, r3, #1
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d007      	beq.n	8002c64 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c58:	f043 0220 	orr.w	r2, r3, #32
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e0a4      	b.n	8002dae <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002c64:	2304      	movs	r3, #4
 8002c66:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002c68:	e00f      	b.n	8002c8a <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002c6a:	4853      	ldr	r0, [pc, #332]	@ (8002db8 <HAL_ADC_PollForConversion+0x1a4>)
 8002c6c:	f7ff fd0a 	bl	8002684 <LL_ADC_GetMultiDMATransfer>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d007      	beq.n	8002c86 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c7a:	f043 0220 	orr.w	r2, r3, #32
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e093      	b.n	8002dae <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002c86:	2304      	movs	r3, #4
 8002c88:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002c8a:	f7ff fba5 	bl	80023d8 <HAL_GetTick>
 8002c8e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002c90:	e021      	b.n	8002cd6 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c98:	d01d      	beq.n	8002cd6 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002c9a:	f7ff fb9d 	bl	80023d8 <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	683a      	ldr	r2, [r7, #0]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d302      	bcc.n	8002cb0 <HAL_ADC_PollForConversion+0x9c>
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d112      	bne.n	8002cd6 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	4013      	ands	r3, r2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d10b      	bne.n	8002cd6 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cc2:	f043 0204 	orr.w	r2, r3, #4
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e06b      	b.n	8002dae <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	4013      	ands	r3, r2
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d0d6      	beq.n	8002c92 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ce8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7ff fc28 	bl	800254a <LL_ADC_REG_IsTriggerSourceSWStart>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d01c      	beq.n	8002d3a <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	7e5b      	ldrb	r3, [r3, #25]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d118      	bne.n	8002d3a <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0308 	and.w	r3, r3, #8
 8002d12:	2b08      	cmp	r3, #8
 8002d14:	d111      	bne.n	8002d3a <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d1a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d26:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d105      	bne.n	8002d3a <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d32:	f043 0201 	orr.w	r2, r3, #1
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a1f      	ldr	r2, [pc, #124]	@ (8002dbc <HAL_ADC_PollForConversion+0x1a8>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d002      	beq.n	8002d4a <HAL_ADC_PollForConversion+0x136>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	e000      	b.n	8002d4c <HAL_ADC_PollForConversion+0x138>
 8002d4a:	4b1d      	ldr	r3, [pc, #116]	@ (8002dc0 <HAL_ADC_PollForConversion+0x1ac>)
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	6812      	ldr	r2, [r2, #0]
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d008      	beq.n	8002d66 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d005      	beq.n	8002d66 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	2b05      	cmp	r3, #5
 8002d5e:	d002      	beq.n	8002d66 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	2b09      	cmp	r3, #9
 8002d64:	d104      	bne.n	8002d70 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	61bb      	str	r3, [r7, #24]
 8002d6e:	e00c      	b.n	8002d8a <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a11      	ldr	r2, [pc, #68]	@ (8002dbc <HAL_ADC_PollForConversion+0x1a8>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d002      	beq.n	8002d80 <HAL_ADC_PollForConversion+0x16c>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	e000      	b.n	8002d82 <HAL_ADC_PollForConversion+0x16e>
 8002d80:	4b0f      	ldr	r3, [pc, #60]	@ (8002dc0 <HAL_ADC_PollForConversion+0x1ac>)
 8002d82:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	2b08      	cmp	r3, #8
 8002d8e:	d104      	bne.n	8002d9a <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2208      	movs	r2, #8
 8002d96:	601a      	str	r2, [r3, #0]
 8002d98:	e008      	b.n	8002dac <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d103      	bne.n	8002dac <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	220c      	movs	r2, #12
 8002daa:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3720      	adds	r7, #32
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	50040300 	.word	0x50040300
 8002dbc:	50040100 	.word	0x50040100
 8002dc0:	50040000 	.word	0x50040000

08002dc4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	370c      	adds	r7, #12
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
	...

08002de0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b0b6      	sub	sp, #216	@ 0xd8
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dea:	2300      	movs	r3, #0
 8002dec:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002df0:	2300      	movs	r3, #0
 8002df2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d101      	bne.n	8002e02 <HAL_ADC_ConfigChannel+0x22>
 8002dfe:	2302      	movs	r3, #2
 8002e00:	e3c9      	b.n	8003596 <HAL_ADC_ConfigChannel+0x7b6>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2201      	movs	r2, #1
 8002e06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7ff fccf 	bl	80027b2 <LL_ADC_REG_IsConversionOngoing>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	f040 83aa 	bne.w	8003570 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	2b05      	cmp	r3, #5
 8002e2a:	d824      	bhi.n	8002e76 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	3b02      	subs	r3, #2
 8002e32:	2b03      	cmp	r3, #3
 8002e34:	d81b      	bhi.n	8002e6e <HAL_ADC_ConfigChannel+0x8e>
 8002e36:	a201      	add	r2, pc, #4	@ (adr r2, 8002e3c <HAL_ADC_ConfigChannel+0x5c>)
 8002e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e3c:	08002e4d 	.word	0x08002e4d
 8002e40:	08002e55 	.word	0x08002e55
 8002e44:	08002e5d 	.word	0x08002e5d
 8002e48:	08002e65 	.word	0x08002e65
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002e4c:	230c      	movs	r3, #12
 8002e4e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002e52:	e010      	b.n	8002e76 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002e54:	2312      	movs	r3, #18
 8002e56:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002e5a:	e00c      	b.n	8002e76 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002e5c:	2318      	movs	r3, #24
 8002e5e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002e62:	e008      	b.n	8002e76 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002e64:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002e68:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002e6c:	e003      	b.n	8002e76 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002e6e:	2306      	movs	r3, #6
 8002e70:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002e74:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6818      	ldr	r0, [r3, #0]
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	461a      	mov	r2, r3
 8002e80:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002e84:	f7ff fb74 	bl	8002570 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7ff fc90 	bl	80027b2 <LL_ADC_REG_IsConversionOngoing>
 8002e92:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7ff fc9c 	bl	80027d8 <LL_ADC_INJ_IsConversionOngoing>
 8002ea0:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ea4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	f040 81a4 	bne.w	80031f6 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002eae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	f040 819f 	bne.w	80031f6 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6818      	ldr	r0, [r3, #0]
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	6819      	ldr	r1, [r3, #0]
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	f7ff fb7f 	bl	80025c8 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	695a      	ldr	r2, [r3, #20]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	08db      	lsrs	r3, r3, #3
 8002ed6:	f003 0303 	and.w	r3, r3, #3
 8002eda:	005b      	lsls	r3, r3, #1
 8002edc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	691b      	ldr	r3, [r3, #16]
 8002ee8:	2b04      	cmp	r3, #4
 8002eea:	d00a      	beq.n	8002f02 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6818      	ldr	r0, [r3, #0]
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	6919      	ldr	r1, [r3, #16]
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002efc:	f7ff fad0 	bl	80024a0 <LL_ADC_SetOffset>
 8002f00:	e179      	b.n	80031f6 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	2100      	movs	r1, #0
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7ff faed 	bl	80024e8 <LL_ADC_GetOffsetChannel>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d10a      	bne.n	8002f2e <HAL_ADC_ConfigChannel+0x14e>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2100      	movs	r1, #0
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7ff fae2 	bl	80024e8 <LL_ADC_GetOffsetChannel>
 8002f24:	4603      	mov	r3, r0
 8002f26:	0e9b      	lsrs	r3, r3, #26
 8002f28:	f003 021f 	and.w	r2, r3, #31
 8002f2c:	e01e      	b.n	8002f6c <HAL_ADC_ConfigChannel+0x18c>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2100      	movs	r1, #0
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7ff fad7 	bl	80024e8 <LL_ADC_GetOffsetChannel>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f40:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002f44:	fa93 f3a3 	rbit	r3, r3
 8002f48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002f4c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002f50:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002f54:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d101      	bne.n	8002f60 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002f5c:	2320      	movs	r3, #32
 8002f5e:	e004      	b.n	8002f6a <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002f60:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002f64:	fab3 f383 	clz	r3, r3
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d105      	bne.n	8002f84 <HAL_ADC_ConfigChannel+0x1a4>
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	0e9b      	lsrs	r3, r3, #26
 8002f7e:	f003 031f 	and.w	r3, r3, #31
 8002f82:	e018      	b.n	8002fb6 <HAL_ADC_ConfigChannel+0x1d6>
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002f90:	fa93 f3a3 	rbit	r3, r3
 8002f94:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002f98:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002f9c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002fa0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d101      	bne.n	8002fac <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002fa8:	2320      	movs	r3, #32
 8002faa:	e004      	b.n	8002fb6 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002fac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002fb0:	fab3 f383 	clz	r3, r3
 8002fb4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d106      	bne.n	8002fc8 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	2100      	movs	r1, #0
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7ff faa6 	bl	8002514 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2101      	movs	r1, #1
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7ff fa8a 	bl	80024e8 <LL_ADC_GetOffsetChannel>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d10a      	bne.n	8002ff4 <HAL_ADC_ConfigChannel+0x214>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2101      	movs	r1, #1
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7ff fa7f 	bl	80024e8 <LL_ADC_GetOffsetChannel>
 8002fea:	4603      	mov	r3, r0
 8002fec:	0e9b      	lsrs	r3, r3, #26
 8002fee:	f003 021f 	and.w	r2, r3, #31
 8002ff2:	e01e      	b.n	8003032 <HAL_ADC_ConfigChannel+0x252>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2101      	movs	r1, #1
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7ff fa74 	bl	80024e8 <LL_ADC_GetOffsetChannel>
 8003000:	4603      	mov	r3, r0
 8003002:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003006:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800300a:	fa93 f3a3 	rbit	r3, r3
 800300e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8003012:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003016:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800301a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800301e:	2b00      	cmp	r3, #0
 8003020:	d101      	bne.n	8003026 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8003022:	2320      	movs	r3, #32
 8003024:	e004      	b.n	8003030 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8003026:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800302a:	fab3 f383 	clz	r3, r3
 800302e:	b2db      	uxtb	r3, r3
 8003030:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800303a:	2b00      	cmp	r3, #0
 800303c:	d105      	bne.n	800304a <HAL_ADC_ConfigChannel+0x26a>
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	0e9b      	lsrs	r3, r3, #26
 8003044:	f003 031f 	and.w	r3, r3, #31
 8003048:	e018      	b.n	800307c <HAL_ADC_ConfigChannel+0x29c>
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003052:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003056:	fa93 f3a3 	rbit	r3, r3
 800305a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800305e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003062:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8003066:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800306a:	2b00      	cmp	r3, #0
 800306c:	d101      	bne.n	8003072 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800306e:	2320      	movs	r3, #32
 8003070:	e004      	b.n	800307c <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8003072:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003076:	fab3 f383 	clz	r3, r3
 800307a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800307c:	429a      	cmp	r2, r3
 800307e:	d106      	bne.n	800308e <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2200      	movs	r2, #0
 8003086:	2101      	movs	r1, #1
 8003088:	4618      	mov	r0, r3
 800308a:	f7ff fa43 	bl	8002514 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2102      	movs	r1, #2
 8003094:	4618      	mov	r0, r3
 8003096:	f7ff fa27 	bl	80024e8 <LL_ADC_GetOffsetChannel>
 800309a:	4603      	mov	r3, r0
 800309c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d10a      	bne.n	80030ba <HAL_ADC_ConfigChannel+0x2da>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2102      	movs	r1, #2
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7ff fa1c 	bl	80024e8 <LL_ADC_GetOffsetChannel>
 80030b0:	4603      	mov	r3, r0
 80030b2:	0e9b      	lsrs	r3, r3, #26
 80030b4:	f003 021f 	and.w	r2, r3, #31
 80030b8:	e01e      	b.n	80030f8 <HAL_ADC_ConfigChannel+0x318>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2102      	movs	r1, #2
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7ff fa11 	bl	80024e8 <LL_ADC_GetOffsetChannel>
 80030c6:	4603      	mov	r3, r0
 80030c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80030d0:	fa93 f3a3 	rbit	r3, r3
 80030d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80030d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80030dc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80030e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d101      	bne.n	80030ec <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80030e8:	2320      	movs	r3, #32
 80030ea:	e004      	b.n	80030f6 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80030ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80030f0:	fab3 f383 	clz	r3, r3
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003100:	2b00      	cmp	r3, #0
 8003102:	d105      	bne.n	8003110 <HAL_ADC_ConfigChannel+0x330>
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	0e9b      	lsrs	r3, r3, #26
 800310a:	f003 031f 	and.w	r3, r3, #31
 800310e:	e014      	b.n	800313a <HAL_ADC_ConfigChannel+0x35a>
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003116:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003118:	fa93 f3a3 	rbit	r3, r3
 800311c:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800311e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003120:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003124:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003128:	2b00      	cmp	r3, #0
 800312a:	d101      	bne.n	8003130 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 800312c:	2320      	movs	r3, #32
 800312e:	e004      	b.n	800313a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8003130:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003134:	fab3 f383 	clz	r3, r3
 8003138:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800313a:	429a      	cmp	r2, r3
 800313c:	d106      	bne.n	800314c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2200      	movs	r2, #0
 8003144:	2102      	movs	r1, #2
 8003146:	4618      	mov	r0, r3
 8003148:	f7ff f9e4 	bl	8002514 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2103      	movs	r1, #3
 8003152:	4618      	mov	r0, r3
 8003154:	f7ff f9c8 	bl	80024e8 <LL_ADC_GetOffsetChannel>
 8003158:	4603      	mov	r3, r0
 800315a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800315e:	2b00      	cmp	r3, #0
 8003160:	d10a      	bne.n	8003178 <HAL_ADC_ConfigChannel+0x398>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2103      	movs	r1, #3
 8003168:	4618      	mov	r0, r3
 800316a:	f7ff f9bd 	bl	80024e8 <LL_ADC_GetOffsetChannel>
 800316e:	4603      	mov	r3, r0
 8003170:	0e9b      	lsrs	r3, r3, #26
 8003172:	f003 021f 	and.w	r2, r3, #31
 8003176:	e017      	b.n	80031a8 <HAL_ADC_ConfigChannel+0x3c8>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2103      	movs	r1, #3
 800317e:	4618      	mov	r0, r3
 8003180:	f7ff f9b2 	bl	80024e8 <LL_ADC_GetOffsetChannel>
 8003184:	4603      	mov	r3, r0
 8003186:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003188:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800318a:	fa93 f3a3 	rbit	r3, r3
 800318e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003190:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003192:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8003194:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003196:	2b00      	cmp	r3, #0
 8003198:	d101      	bne.n	800319e <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800319a:	2320      	movs	r3, #32
 800319c:	e003      	b.n	80031a6 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800319e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80031a0:	fab3 f383 	clz	r3, r3
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d105      	bne.n	80031c0 <HAL_ADC_ConfigChannel+0x3e0>
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	0e9b      	lsrs	r3, r3, #26
 80031ba:	f003 031f 	and.w	r3, r3, #31
 80031be:	e011      	b.n	80031e4 <HAL_ADC_ConfigChannel+0x404>
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80031c8:	fa93 f3a3 	rbit	r3, r3
 80031cc:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80031ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80031d0:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80031d2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d101      	bne.n	80031dc <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80031d8:	2320      	movs	r3, #32
 80031da:	e003      	b.n	80031e4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80031dc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80031de:	fab3 f383 	clz	r3, r3
 80031e2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d106      	bne.n	80031f6 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2200      	movs	r2, #0
 80031ee:	2103      	movs	r1, #3
 80031f0:	4618      	mov	r0, r3
 80031f2:	f7ff f98f 	bl	8002514 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7ff fab2 	bl	8002764 <LL_ADC_IsEnabled>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	f040 8140 	bne.w	8003488 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6818      	ldr	r0, [r3, #0]
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	6819      	ldr	r1, [r3, #0]
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	461a      	mov	r2, r3
 8003216:	f7ff fa03 	bl	8002620 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	4a8f      	ldr	r2, [pc, #572]	@ (800345c <HAL_ADC_ConfigChannel+0x67c>)
 8003220:	4293      	cmp	r3, r2
 8003222:	f040 8131 	bne.w	8003488 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003232:	2b00      	cmp	r3, #0
 8003234:	d10b      	bne.n	800324e <HAL_ADC_ConfigChannel+0x46e>
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	0e9b      	lsrs	r3, r3, #26
 800323c:	3301      	adds	r3, #1
 800323e:	f003 031f 	and.w	r3, r3, #31
 8003242:	2b09      	cmp	r3, #9
 8003244:	bf94      	ite	ls
 8003246:	2301      	movls	r3, #1
 8003248:	2300      	movhi	r3, #0
 800324a:	b2db      	uxtb	r3, r3
 800324c:	e019      	b.n	8003282 <HAL_ADC_ConfigChannel+0x4a2>
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003254:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003256:	fa93 f3a3 	rbit	r3, r3
 800325a:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800325c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800325e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003260:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003262:	2b00      	cmp	r3, #0
 8003264:	d101      	bne.n	800326a <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8003266:	2320      	movs	r3, #32
 8003268:	e003      	b.n	8003272 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800326a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800326c:	fab3 f383 	clz	r3, r3
 8003270:	b2db      	uxtb	r3, r3
 8003272:	3301      	adds	r3, #1
 8003274:	f003 031f 	and.w	r3, r3, #31
 8003278:	2b09      	cmp	r3, #9
 800327a:	bf94      	ite	ls
 800327c:	2301      	movls	r3, #1
 800327e:	2300      	movhi	r3, #0
 8003280:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003282:	2b00      	cmp	r3, #0
 8003284:	d079      	beq.n	800337a <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800328e:	2b00      	cmp	r3, #0
 8003290:	d107      	bne.n	80032a2 <HAL_ADC_ConfigChannel+0x4c2>
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	0e9b      	lsrs	r3, r3, #26
 8003298:	3301      	adds	r3, #1
 800329a:	069b      	lsls	r3, r3, #26
 800329c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80032a0:	e015      	b.n	80032ce <HAL_ADC_ConfigChannel+0x4ee>
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80032aa:	fa93 f3a3 	rbit	r3, r3
 80032ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80032b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80032b2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80032b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d101      	bne.n	80032be <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80032ba:	2320      	movs	r3, #32
 80032bc:	e003      	b.n	80032c6 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80032be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80032c0:	fab3 f383 	clz	r3, r3
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	3301      	adds	r3, #1
 80032c8:	069b      	lsls	r3, r3, #26
 80032ca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d109      	bne.n	80032ee <HAL_ADC_ConfigChannel+0x50e>
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	0e9b      	lsrs	r3, r3, #26
 80032e0:	3301      	adds	r3, #1
 80032e2:	f003 031f 	and.w	r3, r3, #31
 80032e6:	2101      	movs	r1, #1
 80032e8:	fa01 f303 	lsl.w	r3, r1, r3
 80032ec:	e017      	b.n	800331e <HAL_ADC_ConfigChannel+0x53e>
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032f6:	fa93 f3a3 	rbit	r3, r3
 80032fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80032fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032fe:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003300:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003302:	2b00      	cmp	r3, #0
 8003304:	d101      	bne.n	800330a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8003306:	2320      	movs	r3, #32
 8003308:	e003      	b.n	8003312 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800330a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800330c:	fab3 f383 	clz	r3, r3
 8003310:	b2db      	uxtb	r3, r3
 8003312:	3301      	adds	r3, #1
 8003314:	f003 031f 	and.w	r3, r3, #31
 8003318:	2101      	movs	r1, #1
 800331a:	fa01 f303 	lsl.w	r3, r1, r3
 800331e:	ea42 0103 	orr.w	r1, r2, r3
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800332a:	2b00      	cmp	r3, #0
 800332c:	d10a      	bne.n	8003344 <HAL_ADC_ConfigChannel+0x564>
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	0e9b      	lsrs	r3, r3, #26
 8003334:	3301      	adds	r3, #1
 8003336:	f003 021f 	and.w	r2, r3, #31
 800333a:	4613      	mov	r3, r2
 800333c:	005b      	lsls	r3, r3, #1
 800333e:	4413      	add	r3, r2
 8003340:	051b      	lsls	r3, r3, #20
 8003342:	e018      	b.n	8003376 <HAL_ADC_ConfigChannel+0x596>
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800334a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800334c:	fa93 f3a3 	rbit	r3, r3
 8003350:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003354:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003358:	2b00      	cmp	r3, #0
 800335a:	d101      	bne.n	8003360 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 800335c:	2320      	movs	r3, #32
 800335e:	e003      	b.n	8003368 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8003360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003362:	fab3 f383 	clz	r3, r3
 8003366:	b2db      	uxtb	r3, r3
 8003368:	3301      	adds	r3, #1
 800336a:	f003 021f 	and.w	r2, r3, #31
 800336e:	4613      	mov	r3, r2
 8003370:	005b      	lsls	r3, r3, #1
 8003372:	4413      	add	r3, r2
 8003374:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003376:	430b      	orrs	r3, r1
 8003378:	e081      	b.n	800347e <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003382:	2b00      	cmp	r3, #0
 8003384:	d107      	bne.n	8003396 <HAL_ADC_ConfigChannel+0x5b6>
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	0e9b      	lsrs	r3, r3, #26
 800338c:	3301      	adds	r3, #1
 800338e:	069b      	lsls	r3, r3, #26
 8003390:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003394:	e015      	b.n	80033c2 <HAL_ADC_ConfigChannel+0x5e2>
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800339c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800339e:	fa93 f3a3 	rbit	r3, r3
 80033a2:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80033a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80033a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d101      	bne.n	80033b2 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80033ae:	2320      	movs	r3, #32
 80033b0:	e003      	b.n	80033ba <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80033b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033b4:	fab3 f383 	clz	r3, r3
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	3301      	adds	r3, #1
 80033bc:	069b      	lsls	r3, r3, #26
 80033be:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d109      	bne.n	80033e2 <HAL_ADC_ConfigChannel+0x602>
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	0e9b      	lsrs	r3, r3, #26
 80033d4:	3301      	adds	r3, #1
 80033d6:	f003 031f 	and.w	r3, r3, #31
 80033da:	2101      	movs	r1, #1
 80033dc:	fa01 f303 	lsl.w	r3, r1, r3
 80033e0:	e017      	b.n	8003412 <HAL_ADC_ConfigChannel+0x632>
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	fa93 f3a3 	rbit	r3, r3
 80033ee:	61bb      	str	r3, [r7, #24]
  return result;
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80033f4:	6a3b      	ldr	r3, [r7, #32]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d101      	bne.n	80033fe <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80033fa:	2320      	movs	r3, #32
 80033fc:	e003      	b.n	8003406 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80033fe:	6a3b      	ldr	r3, [r7, #32]
 8003400:	fab3 f383 	clz	r3, r3
 8003404:	b2db      	uxtb	r3, r3
 8003406:	3301      	adds	r3, #1
 8003408:	f003 031f 	and.w	r3, r3, #31
 800340c:	2101      	movs	r1, #1
 800340e:	fa01 f303 	lsl.w	r3, r1, r3
 8003412:	ea42 0103 	orr.w	r1, r2, r3
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800341e:	2b00      	cmp	r3, #0
 8003420:	d10d      	bne.n	800343e <HAL_ADC_ConfigChannel+0x65e>
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	0e9b      	lsrs	r3, r3, #26
 8003428:	3301      	adds	r3, #1
 800342a:	f003 021f 	and.w	r2, r3, #31
 800342e:	4613      	mov	r3, r2
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	4413      	add	r3, r2
 8003434:	3b1e      	subs	r3, #30
 8003436:	051b      	lsls	r3, r3, #20
 8003438:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800343c:	e01e      	b.n	800347c <HAL_ADC_ConfigChannel+0x69c>
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	fa93 f3a3 	rbit	r3, r3
 800344a:	60fb      	str	r3, [r7, #12]
  return result;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d104      	bne.n	8003460 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8003456:	2320      	movs	r3, #32
 8003458:	e006      	b.n	8003468 <HAL_ADC_ConfigChannel+0x688>
 800345a:	bf00      	nop
 800345c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	fab3 f383 	clz	r3, r3
 8003466:	b2db      	uxtb	r3, r3
 8003468:	3301      	adds	r3, #1
 800346a:	f003 021f 	and.w	r2, r3, #31
 800346e:	4613      	mov	r3, r2
 8003470:	005b      	lsls	r3, r3, #1
 8003472:	4413      	add	r3, r2
 8003474:	3b1e      	subs	r3, #30
 8003476:	051b      	lsls	r3, r3, #20
 8003478:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800347c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800347e:	683a      	ldr	r2, [r7, #0]
 8003480:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003482:	4619      	mov	r1, r3
 8003484:	f7ff f8a0 	bl	80025c8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	4b44      	ldr	r3, [pc, #272]	@ (80035a0 <HAL_ADC_ConfigChannel+0x7c0>)
 800348e:	4013      	ands	r3, r2
 8003490:	2b00      	cmp	r3, #0
 8003492:	d07a      	beq.n	800358a <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003494:	4843      	ldr	r0, [pc, #268]	@ (80035a4 <HAL_ADC_ConfigChannel+0x7c4>)
 8003496:	f7fe fff5 	bl	8002484 <LL_ADC_GetCommonPathInternalCh>
 800349a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a41      	ldr	r2, [pc, #260]	@ (80035a8 <HAL_ADC_ConfigChannel+0x7c8>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d12c      	bne.n	8003502 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80034a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80034ac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d126      	bne.n	8003502 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a3c      	ldr	r2, [pc, #240]	@ (80035ac <HAL_ADC_ConfigChannel+0x7cc>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d004      	beq.n	80034c8 <HAL_ADC_ConfigChannel+0x6e8>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a3b      	ldr	r2, [pc, #236]	@ (80035b0 <HAL_ADC_ConfigChannel+0x7d0>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d15d      	bne.n	8003584 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80034cc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80034d0:	4619      	mov	r1, r3
 80034d2:	4834      	ldr	r0, [pc, #208]	@ (80035a4 <HAL_ADC_ConfigChannel+0x7c4>)
 80034d4:	f7fe ffc3 	bl	800245e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80034d8:	4b36      	ldr	r3, [pc, #216]	@ (80035b4 <HAL_ADC_ConfigChannel+0x7d4>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	099b      	lsrs	r3, r3, #6
 80034de:	4a36      	ldr	r2, [pc, #216]	@ (80035b8 <HAL_ADC_ConfigChannel+0x7d8>)
 80034e0:	fba2 2303 	umull	r2, r3, r2, r3
 80034e4:	099b      	lsrs	r3, r3, #6
 80034e6:	1c5a      	adds	r2, r3, #1
 80034e8:	4613      	mov	r3, r2
 80034ea:	005b      	lsls	r3, r3, #1
 80034ec:	4413      	add	r3, r2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80034f2:	e002      	b.n	80034fa <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	3b01      	subs	r3, #1
 80034f8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d1f9      	bne.n	80034f4 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003500:	e040      	b.n	8003584 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a2d      	ldr	r2, [pc, #180]	@ (80035bc <HAL_ADC_ConfigChannel+0x7dc>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d118      	bne.n	800353e <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800350c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003510:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d112      	bne.n	800353e <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a23      	ldr	r2, [pc, #140]	@ (80035ac <HAL_ADC_ConfigChannel+0x7cc>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d004      	beq.n	800352c <HAL_ADC_ConfigChannel+0x74c>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a22      	ldr	r2, [pc, #136]	@ (80035b0 <HAL_ADC_ConfigChannel+0x7d0>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d12d      	bne.n	8003588 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800352c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003530:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003534:	4619      	mov	r1, r3
 8003536:	481b      	ldr	r0, [pc, #108]	@ (80035a4 <HAL_ADC_ConfigChannel+0x7c4>)
 8003538:	f7fe ff91 	bl	800245e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800353c:	e024      	b.n	8003588 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a1f      	ldr	r2, [pc, #124]	@ (80035c0 <HAL_ADC_ConfigChannel+0x7e0>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d120      	bne.n	800358a <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003548:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800354c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d11a      	bne.n	800358a <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a14      	ldr	r2, [pc, #80]	@ (80035ac <HAL_ADC_ConfigChannel+0x7cc>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d115      	bne.n	800358a <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800355e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003562:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003566:	4619      	mov	r1, r3
 8003568:	480e      	ldr	r0, [pc, #56]	@ (80035a4 <HAL_ADC_ConfigChannel+0x7c4>)
 800356a:	f7fe ff78 	bl	800245e <LL_ADC_SetCommonPathInternalCh>
 800356e:	e00c      	b.n	800358a <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003574:	f043 0220 	orr.w	r2, r3, #32
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003582:	e002      	b.n	800358a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003584:	bf00      	nop
 8003586:	e000      	b.n	800358a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003588:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003592:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003596:	4618      	mov	r0, r3
 8003598:	37d8      	adds	r7, #216	@ 0xd8
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	80080000 	.word	0x80080000
 80035a4:	50040300 	.word	0x50040300
 80035a8:	c7520000 	.word	0xc7520000
 80035ac:	50040000 	.word	0x50040000
 80035b0:	50040200 	.word	0x50040200
 80035b4:	2000020c 	.word	0x2000020c
 80035b8:	053e2d63 	.word	0x053e2d63
 80035bc:	cb840000 	.word	0xcb840000
 80035c0:	80000001 	.word	0x80000001

080035c4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80035cc:	2300      	movs	r3, #0
 80035ce:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4618      	mov	r0, r3
 80035d6:	f7ff f8c5 	bl	8002764 <LL_ADC_IsEnabled>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d169      	bne.n	80036b4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	689a      	ldr	r2, [r3, #8]
 80035e6:	4b36      	ldr	r3, [pc, #216]	@ (80036c0 <ADC_Enable+0xfc>)
 80035e8:	4013      	ands	r3, r2
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d00d      	beq.n	800360a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035f2:	f043 0210 	orr.w	r2, r3, #16
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035fe:	f043 0201 	orr.w	r2, r3, #1
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e055      	b.n	80036b6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4618      	mov	r0, r3
 8003610:	f7ff f894 	bl	800273c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003614:	482b      	ldr	r0, [pc, #172]	@ (80036c4 <ADC_Enable+0x100>)
 8003616:	f7fe ff35 	bl	8002484 <LL_ADC_GetCommonPathInternalCh>
 800361a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800361c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003620:	2b00      	cmp	r3, #0
 8003622:	d013      	beq.n	800364c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003624:	4b28      	ldr	r3, [pc, #160]	@ (80036c8 <ADC_Enable+0x104>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	099b      	lsrs	r3, r3, #6
 800362a:	4a28      	ldr	r2, [pc, #160]	@ (80036cc <ADC_Enable+0x108>)
 800362c:	fba2 2303 	umull	r2, r3, r2, r3
 8003630:	099b      	lsrs	r3, r3, #6
 8003632:	1c5a      	adds	r2, r3, #1
 8003634:	4613      	mov	r3, r2
 8003636:	005b      	lsls	r3, r3, #1
 8003638:	4413      	add	r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800363e:	e002      	b.n	8003646 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	3b01      	subs	r3, #1
 8003644:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d1f9      	bne.n	8003640 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800364c:	f7fe fec4 	bl	80023d8 <HAL_GetTick>
 8003650:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003652:	e028      	b.n	80036a6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4618      	mov	r0, r3
 800365a:	f7ff f883 	bl	8002764 <LL_ADC_IsEnabled>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d104      	bne.n	800366e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4618      	mov	r0, r3
 800366a:	f7ff f867 	bl	800273c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800366e:	f7fe feb3 	bl	80023d8 <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	2b02      	cmp	r3, #2
 800367a:	d914      	bls.n	80036a6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0301 	and.w	r3, r3, #1
 8003686:	2b01      	cmp	r3, #1
 8003688:	d00d      	beq.n	80036a6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800368e:	f043 0210 	orr.w	r2, r3, #16
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800369a:	f043 0201 	orr.w	r2, r3, #1
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e007      	b.n	80036b6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0301 	and.w	r3, r3, #1
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d1cf      	bne.n	8003654 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3710      	adds	r7, #16
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	8000003f 	.word	0x8000003f
 80036c4:	50040300 	.word	0x50040300
 80036c8:	2000020c 	.word	0x2000020c
 80036cc:	053e2d63 	.word	0x053e2d63

080036d0 <LL_ADC_IsEnabled>:
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f003 0301 	and.w	r3, r3, #1
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d101      	bne.n	80036e8 <LL_ADC_IsEnabled+0x18>
 80036e4:	2301      	movs	r3, #1
 80036e6:	e000      	b.n	80036ea <LL_ADC_IsEnabled+0x1a>
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr

080036f6 <LL_ADC_REG_IsConversionOngoing>:
{
 80036f6:	b480      	push	{r7}
 80036f8:	b083      	sub	sp, #12
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	f003 0304 	and.w	r3, r3, #4
 8003706:	2b04      	cmp	r3, #4
 8003708:	d101      	bne.n	800370e <LL_ADC_REG_IsConversionOngoing+0x18>
 800370a:	2301      	movs	r3, #1
 800370c:	e000      	b.n	8003710 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800370e:	2300      	movs	r3, #0
}
 8003710:	4618      	mov	r0, r3
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800371c:	b590      	push	{r4, r7, lr}
 800371e:	b09f      	sub	sp, #124	@ 0x7c
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003726:	2300      	movs	r3, #0
 8003728:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003732:	2b01      	cmp	r3, #1
 8003734:	d101      	bne.n	800373a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003736:	2302      	movs	r3, #2
 8003738:	e093      	b.n	8003862 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2201      	movs	r2, #1
 800373e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003742:	2300      	movs	r3, #0
 8003744:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003746:	2300      	movs	r3, #0
 8003748:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a47      	ldr	r2, [pc, #284]	@ (800386c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d102      	bne.n	800375a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003754:	4b46      	ldr	r3, [pc, #280]	@ (8003870 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003756:	60bb      	str	r3, [r7, #8]
 8003758:	e001      	b.n	800375e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800375a:	2300      	movs	r3, #0
 800375c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d10b      	bne.n	800377c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003768:	f043 0220 	orr.w	r2, r3, #32
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e072      	b.n	8003862 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	4618      	mov	r0, r3
 8003780:	f7ff ffb9 	bl	80036f6 <LL_ADC_REG_IsConversionOngoing>
 8003784:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4618      	mov	r0, r3
 800378c:	f7ff ffb3 	bl	80036f6 <LL_ADC_REG_IsConversionOngoing>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d154      	bne.n	8003840 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003796:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003798:	2b00      	cmp	r3, #0
 800379a:	d151      	bne.n	8003840 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800379c:	4b35      	ldr	r3, [pc, #212]	@ (8003874 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800379e:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d02c      	beq.n	8003802 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80037a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	6859      	ldr	r1, [r3, #4]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80037ba:	035b      	lsls	r3, r3, #13
 80037bc:	430b      	orrs	r3, r1
 80037be:	431a      	orrs	r2, r3
 80037c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037c2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80037c4:	4829      	ldr	r0, [pc, #164]	@ (800386c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80037c6:	f7ff ff83 	bl	80036d0 <LL_ADC_IsEnabled>
 80037ca:	4604      	mov	r4, r0
 80037cc:	4828      	ldr	r0, [pc, #160]	@ (8003870 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80037ce:	f7ff ff7f 	bl	80036d0 <LL_ADC_IsEnabled>
 80037d2:	4603      	mov	r3, r0
 80037d4:	431c      	orrs	r4, r3
 80037d6:	4828      	ldr	r0, [pc, #160]	@ (8003878 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80037d8:	f7ff ff7a 	bl	80036d0 <LL_ADC_IsEnabled>
 80037dc:	4603      	mov	r3, r0
 80037de:	4323      	orrs	r3, r4
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d137      	bne.n	8003854 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80037e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80037ec:	f023 030f 	bic.w	r3, r3, #15
 80037f0:	683a      	ldr	r2, [r7, #0]
 80037f2:	6811      	ldr	r1, [r2, #0]
 80037f4:	683a      	ldr	r2, [r7, #0]
 80037f6:	6892      	ldr	r2, [r2, #8]
 80037f8:	430a      	orrs	r2, r1
 80037fa:	431a      	orrs	r2, r3
 80037fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037fe:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003800:	e028      	b.n	8003854 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003802:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800380a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800380c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800380e:	4817      	ldr	r0, [pc, #92]	@ (800386c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003810:	f7ff ff5e 	bl	80036d0 <LL_ADC_IsEnabled>
 8003814:	4604      	mov	r4, r0
 8003816:	4816      	ldr	r0, [pc, #88]	@ (8003870 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003818:	f7ff ff5a 	bl	80036d0 <LL_ADC_IsEnabled>
 800381c:	4603      	mov	r3, r0
 800381e:	431c      	orrs	r4, r3
 8003820:	4815      	ldr	r0, [pc, #84]	@ (8003878 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003822:	f7ff ff55 	bl	80036d0 <LL_ADC_IsEnabled>
 8003826:	4603      	mov	r3, r0
 8003828:	4323      	orrs	r3, r4
 800382a:	2b00      	cmp	r3, #0
 800382c:	d112      	bne.n	8003854 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800382e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003836:	f023 030f 	bic.w	r3, r3, #15
 800383a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800383c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800383e:	e009      	b.n	8003854 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003844:	f043 0220 	orr.w	r2, r3, #32
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8003852:	e000      	b.n	8003856 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003854:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800385e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003862:	4618      	mov	r0, r3
 8003864:	377c      	adds	r7, #124	@ 0x7c
 8003866:	46bd      	mov	sp, r7
 8003868:	bd90      	pop	{r4, r7, pc}
 800386a:	bf00      	nop
 800386c:	50040000 	.word	0x50040000
 8003870:	50040100 	.word	0x50040100
 8003874:	50040300 	.word	0x50040300
 8003878:	50040200 	.word	0x50040200

0800387c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800387c:	b480      	push	{r7}
 800387e:	b085      	sub	sp, #20
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f003 0307 	and.w	r3, r3, #7
 800388a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800388c:	4b0c      	ldr	r3, [pc, #48]	@ (80038c0 <__NVIC_SetPriorityGrouping+0x44>)
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003892:	68ba      	ldr	r2, [r7, #8]
 8003894:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003898:	4013      	ands	r3, r2
 800389a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80038a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038ae:	4a04      	ldr	r2, [pc, #16]	@ (80038c0 <__NVIC_SetPriorityGrouping+0x44>)
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	60d3      	str	r3, [r2, #12]
}
 80038b4:	bf00      	nop
 80038b6:	3714      	adds	r7, #20
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr
 80038c0:	e000ed00 	.word	0xe000ed00

080038c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038c4:	b480      	push	{r7}
 80038c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038c8:	4b04      	ldr	r3, [pc, #16]	@ (80038dc <__NVIC_GetPriorityGrouping+0x18>)
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	0a1b      	lsrs	r3, r3, #8
 80038ce:	f003 0307 	and.w	r3, r3, #7
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr
 80038dc:	e000ed00 	.word	0xe000ed00

080038e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	4603      	mov	r3, r0
 80038e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	db0b      	blt.n	800390a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038f2:	79fb      	ldrb	r3, [r7, #7]
 80038f4:	f003 021f 	and.w	r2, r3, #31
 80038f8:	4907      	ldr	r1, [pc, #28]	@ (8003918 <__NVIC_EnableIRQ+0x38>)
 80038fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038fe:	095b      	lsrs	r3, r3, #5
 8003900:	2001      	movs	r0, #1
 8003902:	fa00 f202 	lsl.w	r2, r0, r2
 8003906:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800390a:	bf00      	nop
 800390c:	370c      	adds	r7, #12
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop
 8003918:	e000e100 	.word	0xe000e100

0800391c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	4603      	mov	r3, r0
 8003924:	6039      	str	r1, [r7, #0]
 8003926:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003928:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800392c:	2b00      	cmp	r3, #0
 800392e:	db0a      	blt.n	8003946 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	b2da      	uxtb	r2, r3
 8003934:	490c      	ldr	r1, [pc, #48]	@ (8003968 <__NVIC_SetPriority+0x4c>)
 8003936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800393a:	0112      	lsls	r2, r2, #4
 800393c:	b2d2      	uxtb	r2, r2
 800393e:	440b      	add	r3, r1
 8003940:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003944:	e00a      	b.n	800395c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	b2da      	uxtb	r2, r3
 800394a:	4908      	ldr	r1, [pc, #32]	@ (800396c <__NVIC_SetPriority+0x50>)
 800394c:	79fb      	ldrb	r3, [r7, #7]
 800394e:	f003 030f 	and.w	r3, r3, #15
 8003952:	3b04      	subs	r3, #4
 8003954:	0112      	lsls	r2, r2, #4
 8003956:	b2d2      	uxtb	r2, r2
 8003958:	440b      	add	r3, r1
 800395a:	761a      	strb	r2, [r3, #24]
}
 800395c:	bf00      	nop
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr
 8003968:	e000e100 	.word	0xe000e100
 800396c:	e000ed00 	.word	0xe000ed00

08003970 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003970:	b480      	push	{r7}
 8003972:	b089      	sub	sp, #36	@ 0x24
 8003974:	af00      	add	r7, sp, #0
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f003 0307 	and.w	r3, r3, #7
 8003982:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	f1c3 0307 	rsb	r3, r3, #7
 800398a:	2b04      	cmp	r3, #4
 800398c:	bf28      	it	cs
 800398e:	2304      	movcs	r3, #4
 8003990:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	3304      	adds	r3, #4
 8003996:	2b06      	cmp	r3, #6
 8003998:	d902      	bls.n	80039a0 <NVIC_EncodePriority+0x30>
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	3b03      	subs	r3, #3
 800399e:	e000      	b.n	80039a2 <NVIC_EncodePriority+0x32>
 80039a0:	2300      	movs	r3, #0
 80039a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039a4:	f04f 32ff 	mov.w	r2, #4294967295
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	fa02 f303 	lsl.w	r3, r2, r3
 80039ae:	43da      	mvns	r2, r3
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	401a      	ands	r2, r3
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039b8:	f04f 31ff 	mov.w	r1, #4294967295
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	fa01 f303 	lsl.w	r3, r1, r3
 80039c2:	43d9      	mvns	r1, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039c8:	4313      	orrs	r3, r2
         );
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3724      	adds	r7, #36	@ 0x24
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
	...

080039d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b082      	sub	sp, #8
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	3b01      	subs	r3, #1
 80039e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80039e8:	d301      	bcc.n	80039ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039ea:	2301      	movs	r3, #1
 80039ec:	e00f      	b.n	8003a0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039ee:	4a0a      	ldr	r2, [pc, #40]	@ (8003a18 <SysTick_Config+0x40>)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	3b01      	subs	r3, #1
 80039f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039f6:	210f      	movs	r1, #15
 80039f8:	f04f 30ff 	mov.w	r0, #4294967295
 80039fc:	f7ff ff8e 	bl	800391c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a00:	4b05      	ldr	r3, [pc, #20]	@ (8003a18 <SysTick_Config+0x40>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a06:	4b04      	ldr	r3, [pc, #16]	@ (8003a18 <SysTick_Config+0x40>)
 8003a08:	2207      	movs	r2, #7
 8003a0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3708      	adds	r7, #8
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	e000e010 	.word	0xe000e010

08003a1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f7ff ff29 	bl	800387c <__NVIC_SetPriorityGrouping>
}
 8003a2a:	bf00      	nop
 8003a2c:	3708      	adds	r7, #8
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}

08003a32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a32:	b580      	push	{r7, lr}
 8003a34:	b086      	sub	sp, #24
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	4603      	mov	r3, r0
 8003a3a:	60b9      	str	r1, [r7, #8]
 8003a3c:	607a      	str	r2, [r7, #4]
 8003a3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003a40:	2300      	movs	r3, #0
 8003a42:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003a44:	f7ff ff3e 	bl	80038c4 <__NVIC_GetPriorityGrouping>
 8003a48:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	68b9      	ldr	r1, [r7, #8]
 8003a4e:	6978      	ldr	r0, [r7, #20]
 8003a50:	f7ff ff8e 	bl	8003970 <NVIC_EncodePriority>
 8003a54:	4602      	mov	r2, r0
 8003a56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a5a:	4611      	mov	r1, r2
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f7ff ff5d 	bl	800391c <__NVIC_SetPriority>
}
 8003a62:	bf00      	nop
 8003a64:	3718      	adds	r7, #24
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}

08003a6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a6a:	b580      	push	{r7, lr}
 8003a6c:	b082      	sub	sp, #8
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	4603      	mov	r3, r0
 8003a72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f7ff ff31 	bl	80038e0 <__NVIC_EnableIRQ>
}
 8003a7e:	bf00      	nop
 8003a80:	3708      	adds	r7, #8
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}

08003a86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a86:	b580      	push	{r7, lr}
 8003a88:	b082      	sub	sp, #8
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f7ff ffa2 	bl	80039d8 <SysTick_Config>
 8003a94:	4603      	mov	r3, r0
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3708      	adds	r7, #8
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}

08003a9e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003a9e:	b580      	push	{r7, lr}
 8003aa0:	b082      	sub	sp, #8
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d101      	bne.n	8003ab0 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e014      	b.n	8003ada <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	791b      	ldrb	r3, [r3, #4]
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d105      	bne.n	8003ac6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f7fe f951 	bl	8001d68 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2202      	movs	r2, #2
 8003aca:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3708      	adds	r7, #8
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
	...

08003ae4 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b086      	sub	sp, #24
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	607a      	str	r2, [r7, #4]
 8003af0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8003af2:	2300      	movs	r3, #0
 8003af4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	795b      	ldrb	r3, [r3, #5]
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d101      	bne.n	8003b02 <HAL_DAC_Start_DMA+0x1e>
 8003afe:	2302      	movs	r3, #2
 8003b00:	e0ab      	b.n	8003c5a <HAL_DAC_Start_DMA+0x176>
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2201      	movs	r2, #1
 8003b06:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2202      	movs	r2, #2
 8003b0c:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d12f      	bne.n	8003b74 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	4a52      	ldr	r2, [pc, #328]	@ (8003c64 <HAL_DAC_Start_DMA+0x180>)
 8003b1a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	4a51      	ldr	r2, [pc, #324]	@ (8003c68 <HAL_DAC_Start_DMA+0x184>)
 8003b22:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	4a50      	ldr	r2, [pc, #320]	@ (8003c6c <HAL_DAC_Start_DMA+0x188>)
 8003b2a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003b3a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8003b3c:	6a3b      	ldr	r3, [r7, #32]
 8003b3e:	2b08      	cmp	r3, #8
 8003b40:	d013      	beq.n	8003b6a <HAL_DAC_Start_DMA+0x86>
 8003b42:	6a3b      	ldr	r3, [r7, #32]
 8003b44:	2b08      	cmp	r3, #8
 8003b46:	d845      	bhi.n	8003bd4 <HAL_DAC_Start_DMA+0xf0>
 8003b48:	6a3b      	ldr	r3, [r7, #32]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d003      	beq.n	8003b56 <HAL_DAC_Start_DMA+0x72>
 8003b4e:	6a3b      	ldr	r3, [r7, #32]
 8003b50:	2b04      	cmp	r3, #4
 8003b52:	d005      	beq.n	8003b60 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8003b54:	e03e      	b.n	8003bd4 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	3308      	adds	r3, #8
 8003b5c:	613b      	str	r3, [r7, #16]
        break;
 8003b5e:	e03c      	b.n	8003bda <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	330c      	adds	r3, #12
 8003b66:	613b      	str	r3, [r7, #16]
        break;
 8003b68:	e037      	b.n	8003bda <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	3310      	adds	r3, #16
 8003b70:	613b      	str	r3, [r7, #16]
        break;
 8003b72:	e032      	b.n	8003bda <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	4a3d      	ldr	r2, [pc, #244]	@ (8003c70 <HAL_DAC_Start_DMA+0x18c>)
 8003b7a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	4a3c      	ldr	r2, [pc, #240]	@ (8003c74 <HAL_DAC_Start_DMA+0x190>)
 8003b82:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	4a3b      	ldr	r2, [pc, #236]	@ (8003c78 <HAL_DAC_Start_DMA+0x194>)
 8003b8a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003b9a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8003b9c:	6a3b      	ldr	r3, [r7, #32]
 8003b9e:	2b08      	cmp	r3, #8
 8003ba0:	d013      	beq.n	8003bca <HAL_DAC_Start_DMA+0xe6>
 8003ba2:	6a3b      	ldr	r3, [r7, #32]
 8003ba4:	2b08      	cmp	r3, #8
 8003ba6:	d817      	bhi.n	8003bd8 <HAL_DAC_Start_DMA+0xf4>
 8003ba8:	6a3b      	ldr	r3, [r7, #32]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d003      	beq.n	8003bb6 <HAL_DAC_Start_DMA+0xd2>
 8003bae:	6a3b      	ldr	r3, [r7, #32]
 8003bb0:	2b04      	cmp	r3, #4
 8003bb2:	d005      	beq.n	8003bc0 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8003bb4:	e010      	b.n	8003bd8 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	3314      	adds	r3, #20
 8003bbc:	613b      	str	r3, [r7, #16]
        break;
 8003bbe:	e00c      	b.n	8003bda <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	3318      	adds	r3, #24
 8003bc6:	613b      	str	r3, [r7, #16]
        break;
 8003bc8:	e007      	b.n	8003bda <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	331c      	adds	r3, #28
 8003bd0:	613b      	str	r3, [r7, #16]
        break;
 8003bd2:	e002      	b.n	8003bda <HAL_DAC_Start_DMA+0xf6>
        break;
 8003bd4:	bf00      	nop
 8003bd6:	e000      	b.n	8003bda <HAL_DAC_Start_DMA+0xf6>
        break;
 8003bd8:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d111      	bne.n	8003c04 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003bee:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6898      	ldr	r0, [r3, #8]
 8003bf4:	6879      	ldr	r1, [r7, #4]
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	693a      	ldr	r2, [r7, #16]
 8003bfa:	f000 fb79 	bl	80042f0 <HAL_DMA_Start_IT>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	75fb      	strb	r3, [r7, #23]
 8003c02:	e010      	b.n	8003c26 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8003c12:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	68d8      	ldr	r0, [r3, #12]
 8003c18:	6879      	ldr	r1, [r7, #4]
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	693a      	ldr	r2, [r7, #16]
 8003c1e:	f000 fb67 	bl	80042f0 <HAL_DMA_Start_IT>
 8003c22:	4603      	mov	r3, r0
 8003c24:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8003c2c:	7dfb      	ldrb	r3, [r7, #23]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d10c      	bne.n	8003c4c <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	6819      	ldr	r1, [r3, #0]
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	f003 0310 	and.w	r3, r3, #16
 8003c3e:	2201      	movs	r2, #1
 8003c40:	409a      	lsls	r2, r3
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	430a      	orrs	r2, r1
 8003c48:	601a      	str	r2, [r3, #0]
 8003c4a:	e005      	b.n	8003c58 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	691b      	ldr	r3, [r3, #16]
 8003c50:	f043 0204 	orr.w	r2, r3, #4
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8003c58:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3718      	adds	r7, #24
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	08004059 	.word	0x08004059
 8003c68:	0800407b 	.word	0x0800407b
 8003c6c:	08004097 	.word	0x08004097
 8003c70:	08004115 	.word	0x08004115
 8003c74:	08004137 	.word	0x08004137
 8003c78:	08004153 	.word	0x08004153

08003c7c <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	6819      	ldr	r1, [r3, #0]
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	f003 0310 	and.w	r3, r3, #16
 8003c92:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003c96:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9a:	43da      	mvns	r2, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	400a      	ands	r2, r1
 8003ca2:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	6819      	ldr	r1, [r3, #0]
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	f003 0310 	and.w	r3, r3, #16
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb6:	43da      	mvns	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	400a      	ands	r2, r1
 8003cbe:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d10d      	bne.n	8003ce2 <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f000 fb70 	bl	80043b0 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003cde:	601a      	str	r2, [r3, #0]
 8003ce0:	e00c      	b.n	8003cfc <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f000 fb62 	bl	80043b0 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 8003cfa:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3708      	adds	r7, #8
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8003d06:	b580      	push	{r7, lr}
 8003d08:	b082      	sub	sp, #8
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d1c:	d120      	bne.n	8003d60 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d24:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d2c:	d118      	bne.n	8003d60 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2204      	movs	r2, #4
 8003d32:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	691b      	ldr	r3, [r3, #16]
 8003d38:	f043 0201 	orr.w	r2, r3, #1
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003d48:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003d58:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f000 f84b 	bl	8003df6 <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003d6a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d6e:	d120      	bne.n	8003db2 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d76:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003d7a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d7e:	d118      	bne.n	8003db2 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2204      	movs	r2, #4
 8003d84:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	f043 0202 	orr.w	r2, r3, #2
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003d9a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8003daa:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f000 f9a7 	bl	8004100 <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 8003db2:	bf00      	nop
 8003db4:	3708      	adds	r7, #8
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}

08003dba <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003dba:	b480      	push	{r7}
 8003dbc:	b083      	sub	sp, #12
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8003dc2:	bf00      	nop
 8003dc4:	370c      	adds	r7, #12
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr

08003dce <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003dce:	b480      	push	{r7}
 8003dd0:	b083      	sub	sp, #12
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8003dd6:	bf00      	nop
 8003dd8:	370c      	adds	r7, #12
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr

08003de2 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003de2:	b480      	push	{r7}
 8003de4:	b083      	sub	sp, #12
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8003dea:	bf00      	nop
 8003dec:	370c      	adds	r7, #12
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr

08003df6 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003df6:	b480      	push	{r7}
 8003df8:	b083      	sub	sp, #12
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8003dfe:	bf00      	nop
 8003e00:	370c      	adds	r7, #12
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr

08003e0a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003e0a:	b580      	push	{r7, lr}
 8003e0c:	b088      	sub	sp, #32
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	60f8      	str	r0, [r7, #12]
 8003e12:	60b9      	str	r1, [r7, #8]
 8003e14:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8003e16:	2300      	movs	r3, #0
 8003e18:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	795b      	ldrb	r3, [r3, #5]
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d101      	bne.n	8003e26 <HAL_DAC_ConfigChannel+0x1c>
 8003e22:	2302      	movs	r3, #2
 8003e24:	e114      	b.n	8004050 <HAL_DAC_ConfigChannel+0x246>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2202      	movs	r2, #2
 8003e30:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2b04      	cmp	r3, #4
 8003e38:	f040 8081 	bne.w	8003f3e <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003e3c:	f7fe facc 	bl	80023d8 <HAL_GetTick>
 8003e40:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d140      	bne.n	8003eca <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003e48:	e018      	b.n	8003e7c <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003e4a:	f7fe fac5 	bl	80023d8 <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d911      	bls.n	8003e7c <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e5e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d00a      	beq.n	8003e7c <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	f043 0208 	orr.w	r2, r3, #8
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2203      	movs	r2, #3
 8003e76:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	e0e9      	b.n	8004050 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e82:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d1df      	bne.n	8003e4a <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8003e8a:	2001      	movs	r0, #1
 8003e8c:	f7fe fab0 	bl	80023f0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68ba      	ldr	r2, [r7, #8]
 8003e96:	6992      	ldr	r2, [r2, #24]
 8003e98:	641a      	str	r2, [r3, #64]	@ 0x40
 8003e9a:	e023      	b.n	8003ee4 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003e9c:	f7fe fa9c 	bl	80023d8 <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d90f      	bls.n	8003eca <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	da0a      	bge.n	8003eca <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	691b      	ldr	r3, [r3, #16]
 8003eb8:	f043 0208 	orr.w	r2, r3, #8
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2203      	movs	r2, #3
 8003ec4:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e0c2      	b.n	8004050 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	dbe3      	blt.n	8003e9c <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8003ed4:	2001      	movs	r0, #1
 8003ed6:	f7fe fa8b 	bl	80023f0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68ba      	ldr	r2, [r7, #8]
 8003ee0:	6992      	ldr	r2, [r2, #24]
 8003ee2:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f003 0310 	and.w	r3, r3, #16
 8003ef0:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8003ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ef8:	43db      	mvns	r3, r3
 8003efa:	ea02 0103 	and.w	r1, r2, r3
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	69da      	ldr	r2, [r3, #28]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f003 0310 	and.w	r3, r3, #16
 8003f08:	409a      	lsls	r2, r3
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	430a      	orrs	r2, r1
 8003f10:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f003 0310 	and.w	r3, r3, #16
 8003f1e:	21ff      	movs	r1, #255	@ 0xff
 8003f20:	fa01 f303 	lsl.w	r3, r1, r3
 8003f24:	43db      	mvns	r3, r3
 8003f26:	ea02 0103 	and.w	r1, r2, r3
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	6a1a      	ldr	r2, [r3, #32]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f003 0310 	and.w	r3, r3, #16
 8003f34:	409a      	lsls	r2, r3
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d11d      	bne.n	8003f82 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f4c:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f003 0310 	and.w	r3, r3, #16
 8003f54:	221f      	movs	r2, #31
 8003f56:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5a:	43db      	mvns	r3, r3
 8003f5c:	69ba      	ldr	r2, [r7, #24]
 8003f5e:	4013      	ands	r3, r2
 8003f60:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	695b      	ldr	r3, [r3, #20]
 8003f66:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f003 0310 	and.w	r3, r3, #16
 8003f6e:	697a      	ldr	r2, [r7, #20]
 8003f70:	fa02 f303 	lsl.w	r3, r2, r3
 8003f74:	69ba      	ldr	r2, [r7, #24]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	69ba      	ldr	r2, [r7, #24]
 8003f80:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f88:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f003 0310 	and.w	r3, r3, #16
 8003f90:	2207      	movs	r2, #7
 8003f92:	fa02 f303 	lsl.w	r3, r2, r3
 8003f96:	43db      	mvns	r3, r3
 8003f98:	69ba      	ldr	r2, [r7, #24]
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	431a      	orrs	r2, r3
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f003 0310 	and.w	r3, r3, #16
 8003fb6:	697a      	ldr	r2, [r7, #20]
 8003fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fbc:	69ba      	ldr	r2, [r7, #24]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	69ba      	ldr	r2, [r7, #24]
 8003fc8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	6819      	ldr	r1, [r3, #0]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f003 0310 	and.w	r3, r3, #16
 8003fd6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003fda:	fa02 f303 	lsl.w	r3, r2, r3
 8003fde:	43da      	mvns	r2, r3
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	400a      	ands	r2, r1
 8003fe6:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f003 0310 	and.w	r3, r3, #16
 8003ff6:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8003ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffe:	43db      	mvns	r3, r3
 8004000:	69ba      	ldr	r2, [r7, #24]
 8004002:	4013      	ands	r3, r2
 8004004:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f003 0310 	and.w	r3, r3, #16
 8004012:	697a      	ldr	r2, [r7, #20]
 8004014:	fa02 f303 	lsl.w	r3, r2, r3
 8004018:	69ba      	ldr	r2, [r7, #24]
 800401a:	4313      	orrs	r3, r2
 800401c:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	69ba      	ldr	r2, [r7, #24]
 8004024:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	6819      	ldr	r1, [r3, #0]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f003 0310 	and.w	r3, r3, #16
 8004032:	22c0      	movs	r2, #192	@ 0xc0
 8004034:	fa02 f303 	lsl.w	r3, r2, r3
 8004038:	43da      	mvns	r2, r3
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	400a      	ands	r2, r1
 8004040:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2201      	movs	r2, #1
 8004046:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2200      	movs	r2, #0
 800404c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800404e:	2300      	movs	r3, #0
}
 8004050:	4618      	mov	r0, r3
 8004052:	3720      	adds	r7, #32
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}

08004058 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004064:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8004066:	68f8      	ldr	r0, [r7, #12]
 8004068:	f7ff fea7 	bl	8003dba <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2201      	movs	r2, #1
 8004070:	711a      	strb	r2, [r3, #4]
}
 8004072:	bf00      	nop
 8004074:	3710      	adds	r7, #16
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}

0800407a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800407a:	b580      	push	{r7, lr}
 800407c:	b084      	sub	sp, #16
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004086:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8004088:	68f8      	ldr	r0, [r7, #12]
 800408a:	f7ff fea0 	bl	8003dce <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800408e:	bf00      	nop
 8004090:	3710      	adds	r7, #16
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}

08004096 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8004096:	b580      	push	{r7, lr}
 8004098:	b084      	sub	sp, #16
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040a2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	691b      	ldr	r3, [r3, #16]
 80040a8:	f043 0204 	orr.w	r2, r3, #4
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80040b0:	68f8      	ldr	r0, [r7, #12]
 80040b2:	f7ff fe96 	bl	8003de2 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2201      	movs	r2, #1
 80040ba:	711a      	strb	r2, [r3, #4]
}
 80040bc:	bf00      	nop
 80040be:	3710      	adds	r7, #16
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80040cc:	bf00      	nop
 80040ce:	370c      	adds	r7, #12
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80040e0:	bf00      	nop
 80040e2:	370c      	adds	r7, #12
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80040f4:	bf00      	nop
 80040f6:	370c      	adds	r7, #12
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8004108:	bf00      	nop
 800410a:	370c      	adds	r7, #12
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr

08004114 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004120:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8004122:	68f8      	ldr	r0, [r7, #12]
 8004124:	f7ff ffce 	bl	80040c4 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2201      	movs	r2, #1
 800412c:	711a      	strb	r2, [r3, #4]
}
 800412e:	bf00      	nop
 8004130:	3710      	adds	r7, #16
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}

08004136 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004136:	b580      	push	{r7, lr}
 8004138:	b084      	sub	sp, #16
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004142:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8004144:	68f8      	ldr	r0, [r7, #12]
 8004146:	f7ff ffc7 	bl	80040d8 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800414a:	bf00      	nop
 800414c:	3710      	adds	r7, #16
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}

08004152 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8004152:	b580      	push	{r7, lr}
 8004154:	b084      	sub	sp, #16
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800415e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	691b      	ldr	r3, [r3, #16]
 8004164:	f043 0204 	orr.w	r2, r3, #4
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800416c:	68f8      	ldr	r0, [r7, #12]
 800416e:	f7ff ffbd 	bl	80040ec <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2201      	movs	r2, #1
 8004176:	711a      	strb	r2, [r3, #4]
}
 8004178:	bf00      	nop
 800417a:	3710      	adds	r7, #16
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004180:	b480      	push	{r7}
 8004182:	b085      	sub	sp, #20
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d101      	bne.n	8004192 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e098      	b.n	80042c4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	461a      	mov	r2, r3
 8004198:	4b4d      	ldr	r3, [pc, #308]	@ (80042d0 <HAL_DMA_Init+0x150>)
 800419a:	429a      	cmp	r2, r3
 800419c:	d80f      	bhi.n	80041be <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	461a      	mov	r2, r3
 80041a4:	4b4b      	ldr	r3, [pc, #300]	@ (80042d4 <HAL_DMA_Init+0x154>)
 80041a6:	4413      	add	r3, r2
 80041a8:	4a4b      	ldr	r2, [pc, #300]	@ (80042d8 <HAL_DMA_Init+0x158>)
 80041aa:	fba2 2303 	umull	r2, r3, r2, r3
 80041ae:	091b      	lsrs	r3, r3, #4
 80041b0:	009a      	lsls	r2, r3, #2
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a48      	ldr	r2, [pc, #288]	@ (80042dc <HAL_DMA_Init+0x15c>)
 80041ba:	641a      	str	r2, [r3, #64]	@ 0x40
 80041bc:	e00e      	b.n	80041dc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	461a      	mov	r2, r3
 80041c4:	4b46      	ldr	r3, [pc, #280]	@ (80042e0 <HAL_DMA_Init+0x160>)
 80041c6:	4413      	add	r3, r2
 80041c8:	4a43      	ldr	r2, [pc, #268]	@ (80042d8 <HAL_DMA_Init+0x158>)
 80041ca:	fba2 2303 	umull	r2, r3, r2, r3
 80041ce:	091b      	lsrs	r3, r3, #4
 80041d0:	009a      	lsls	r2, r3, #2
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a42      	ldr	r2, [pc, #264]	@ (80042e4 <HAL_DMA_Init+0x164>)
 80041da:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2202      	movs	r2, #2
 80041e0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80041f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041f6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004200:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800420c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004218:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a1b      	ldr	r3, [r3, #32]
 800421e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	4313      	orrs	r3, r2
 8004224:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004236:	d039      	beq.n	80042ac <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800423c:	4a27      	ldr	r2, [pc, #156]	@ (80042dc <HAL_DMA_Init+0x15c>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d11a      	bne.n	8004278 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004242:	4b29      	ldr	r3, [pc, #164]	@ (80042e8 <HAL_DMA_Init+0x168>)
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800424a:	f003 031c 	and.w	r3, r3, #28
 800424e:	210f      	movs	r1, #15
 8004250:	fa01 f303 	lsl.w	r3, r1, r3
 8004254:	43db      	mvns	r3, r3
 8004256:	4924      	ldr	r1, [pc, #144]	@ (80042e8 <HAL_DMA_Init+0x168>)
 8004258:	4013      	ands	r3, r2
 800425a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800425c:	4b22      	ldr	r3, [pc, #136]	@ (80042e8 <HAL_DMA_Init+0x168>)
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6859      	ldr	r1, [r3, #4]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004268:	f003 031c 	and.w	r3, r3, #28
 800426c:	fa01 f303 	lsl.w	r3, r1, r3
 8004270:	491d      	ldr	r1, [pc, #116]	@ (80042e8 <HAL_DMA_Init+0x168>)
 8004272:	4313      	orrs	r3, r2
 8004274:	600b      	str	r3, [r1, #0]
 8004276:	e019      	b.n	80042ac <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004278:	4b1c      	ldr	r3, [pc, #112]	@ (80042ec <HAL_DMA_Init+0x16c>)
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004280:	f003 031c 	and.w	r3, r3, #28
 8004284:	210f      	movs	r1, #15
 8004286:	fa01 f303 	lsl.w	r3, r1, r3
 800428a:	43db      	mvns	r3, r3
 800428c:	4917      	ldr	r1, [pc, #92]	@ (80042ec <HAL_DMA_Init+0x16c>)
 800428e:	4013      	ands	r3, r2
 8004290:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004292:	4b16      	ldr	r3, [pc, #88]	@ (80042ec <HAL_DMA_Init+0x16c>)
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6859      	ldr	r1, [r3, #4]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800429e:	f003 031c 	and.w	r3, r3, #28
 80042a2:	fa01 f303 	lsl.w	r3, r1, r3
 80042a6:	4911      	ldr	r1, [pc, #68]	@ (80042ec <HAL_DMA_Init+0x16c>)
 80042a8:	4313      	orrs	r3, r2
 80042aa:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2201      	movs	r2, #1
 80042b6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80042c2:	2300      	movs	r3, #0
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3714      	adds	r7, #20
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr
 80042d0:	40020407 	.word	0x40020407
 80042d4:	bffdfff8 	.word	0xbffdfff8
 80042d8:	cccccccd 	.word	0xcccccccd
 80042dc:	40020000 	.word	0x40020000
 80042e0:	bffdfbf8 	.word	0xbffdfbf8
 80042e4:	40020400 	.word	0x40020400
 80042e8:	400200a8 	.word	0x400200a8
 80042ec:	400204a8 	.word	0x400204a8

080042f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b086      	sub	sp, #24
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	607a      	str	r2, [r7, #4]
 80042fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042fe:	2300      	movs	r3, #0
 8004300:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004308:	2b01      	cmp	r3, #1
 800430a:	d101      	bne.n	8004310 <HAL_DMA_Start_IT+0x20>
 800430c:	2302      	movs	r3, #2
 800430e:	e04b      	b.n	80043a8 <HAL_DMA_Start_IT+0xb8>
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800431e:	b2db      	uxtb	r3, r3
 8004320:	2b01      	cmp	r3, #1
 8004322:	d13a      	bne.n	800439a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2202      	movs	r2, #2
 8004328:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2200      	movs	r2, #0
 8004330:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f022 0201 	bic.w	r2, r2, #1
 8004340:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	68b9      	ldr	r1, [r7, #8]
 8004348:	68f8      	ldr	r0, [r7, #12]
 800434a:	f000 f95f 	bl	800460c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004352:	2b00      	cmp	r3, #0
 8004354:	d008      	beq.n	8004368 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f042 020e 	orr.w	r2, r2, #14
 8004364:	601a      	str	r2, [r3, #0]
 8004366:	e00f      	b.n	8004388 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f022 0204 	bic.w	r2, r2, #4
 8004376:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f042 020a 	orr.w	r2, r2, #10
 8004386:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f042 0201 	orr.w	r2, r2, #1
 8004396:	601a      	str	r2, [r3, #0]
 8004398:	e005      	b.n	80043a6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80043a2:	2302      	movs	r3, #2
 80043a4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80043a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3718      	adds	r7, #24
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b085      	sub	sp, #20
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043b8:	2300      	movs	r3, #0
 80043ba:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	2b02      	cmp	r3, #2
 80043c6:	d008      	beq.n	80043da <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2204      	movs	r2, #4
 80043cc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e022      	b.n	8004420 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f022 020e 	bic.w	r2, r2, #14
 80043e8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f022 0201 	bic.w	r2, r2, #1
 80043f8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043fe:	f003 021c 	and.w	r2, r3, #28
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004406:	2101      	movs	r1, #1
 8004408:	fa01 f202 	lsl.w	r2, r1, r2
 800440c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2201      	movs	r2, #1
 8004412:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800441e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004420:	4618      	mov	r0, r3
 8004422:	3714      	adds	r7, #20
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004434:	2300      	movs	r3, #0
 8004436:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800443e:	b2db      	uxtb	r3, r3
 8004440:	2b02      	cmp	r3, #2
 8004442:	d005      	beq.n	8004450 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2204      	movs	r2, #4
 8004448:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	73fb      	strb	r3, [r7, #15]
 800444e:	e029      	b.n	80044a4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f022 020e 	bic.w	r2, r2, #14
 800445e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f022 0201 	bic.w	r2, r2, #1
 800446e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004474:	f003 021c 	and.w	r2, r3, #28
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800447c:	2101      	movs	r1, #1
 800447e:	fa01 f202 	lsl.w	r2, r1, r2
 8004482:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004498:	2b00      	cmp	r3, #0
 800449a:	d003      	beq.n	80044a4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	4798      	blx	r3
    }
  }
  return status;
 80044a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3710      	adds	r7, #16
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}

080044ae <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80044ae:	b580      	push	{r7, lr}
 80044b0:	b084      	sub	sp, #16
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044ca:	f003 031c 	and.w	r3, r3, #28
 80044ce:	2204      	movs	r2, #4
 80044d0:	409a      	lsls	r2, r3
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	4013      	ands	r3, r2
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d026      	beq.n	8004528 <HAL_DMA_IRQHandler+0x7a>
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	f003 0304 	and.w	r3, r3, #4
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d021      	beq.n	8004528 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0320 	and.w	r3, r3, #32
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d107      	bne.n	8004502 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f022 0204 	bic.w	r2, r2, #4
 8004500:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004506:	f003 021c 	and.w	r2, r3, #28
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800450e:	2104      	movs	r1, #4
 8004510:	fa01 f202 	lsl.w	r2, r1, r2
 8004514:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800451a:	2b00      	cmp	r3, #0
 800451c:	d071      	beq.n	8004602 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004526:	e06c      	b.n	8004602 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800452c:	f003 031c 	and.w	r3, r3, #28
 8004530:	2202      	movs	r2, #2
 8004532:	409a      	lsls	r2, r3
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	4013      	ands	r3, r2
 8004538:	2b00      	cmp	r3, #0
 800453a:	d02e      	beq.n	800459a <HAL_DMA_IRQHandler+0xec>
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	f003 0302 	and.w	r3, r3, #2
 8004542:	2b00      	cmp	r3, #0
 8004544:	d029      	beq.n	800459a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0320 	and.w	r3, r3, #32
 8004550:	2b00      	cmp	r3, #0
 8004552:	d10b      	bne.n	800456c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f022 020a 	bic.w	r2, r2, #10
 8004562:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004570:	f003 021c 	and.w	r2, r3, #28
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004578:	2102      	movs	r1, #2
 800457a:	fa01 f202 	lsl.w	r2, r1, r2
 800457e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800458c:	2b00      	cmp	r3, #0
 800458e:	d038      	beq.n	8004602 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004598:	e033      	b.n	8004602 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800459e:	f003 031c 	and.w	r3, r3, #28
 80045a2:	2208      	movs	r2, #8
 80045a4:	409a      	lsls	r2, r3
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	4013      	ands	r3, r2
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d02a      	beq.n	8004604 <HAL_DMA_IRQHandler+0x156>
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	f003 0308 	and.w	r3, r3, #8
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d025      	beq.n	8004604 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f022 020e 	bic.w	r2, r2, #14
 80045c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045cc:	f003 021c 	and.w	r2, r3, #28
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045d4:	2101      	movs	r1, #1
 80045d6:	fa01 f202 	lsl.w	r2, r1, r2
 80045da:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2201      	movs	r2, #1
 80045e6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d004      	beq.n	8004604 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004602:	bf00      	nop
 8004604:	bf00      	nop
}
 8004606:	3710      	adds	r7, #16
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}

0800460c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800460c:	b480      	push	{r7}
 800460e:	b085      	sub	sp, #20
 8004610:	af00      	add	r7, sp, #0
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	60b9      	str	r1, [r7, #8]
 8004616:	607a      	str	r2, [r7, #4]
 8004618:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800461e:	f003 021c 	and.w	r2, r3, #28
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004626:	2101      	movs	r1, #1
 8004628:	fa01 f202 	lsl.w	r2, r1, r2
 800462c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	683a      	ldr	r2, [r7, #0]
 8004634:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	2b10      	cmp	r3, #16
 800463c:	d108      	bne.n	8004650 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68ba      	ldr	r2, [r7, #8]
 800464c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800464e:	e007      	b.n	8004660 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	68ba      	ldr	r2, [r7, #8]
 8004656:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	60da      	str	r2, [r3, #12]
}
 8004660:	bf00      	nop
 8004662:	3714      	adds	r7, #20
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800466c:	b480      	push	{r7}
 800466e:	b087      	sub	sp, #28
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004676:	2300      	movs	r3, #0
 8004678:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800467a:	e17f      	b.n	800497c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	2101      	movs	r1, #1
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	fa01 f303 	lsl.w	r3, r1, r3
 8004688:	4013      	ands	r3, r2
 800468a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2b00      	cmp	r3, #0
 8004690:	f000 8171 	beq.w	8004976 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	f003 0303 	and.w	r3, r3, #3
 800469c:	2b01      	cmp	r3, #1
 800469e:	d005      	beq.n	80046ac <HAL_GPIO_Init+0x40>
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	f003 0303 	and.w	r3, r3, #3
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d130      	bne.n	800470e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	005b      	lsls	r3, r3, #1
 80046b6:	2203      	movs	r2, #3
 80046b8:	fa02 f303 	lsl.w	r3, r2, r3
 80046bc:	43db      	mvns	r3, r3
 80046be:	693a      	ldr	r2, [r7, #16]
 80046c0:	4013      	ands	r3, r2
 80046c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	68da      	ldr	r2, [r3, #12]
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	005b      	lsls	r3, r3, #1
 80046cc:	fa02 f303 	lsl.w	r3, r2, r3
 80046d0:	693a      	ldr	r2, [r7, #16]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	693a      	ldr	r2, [r7, #16]
 80046da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80046e2:	2201      	movs	r2, #1
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ea:	43db      	mvns	r3, r3
 80046ec:	693a      	ldr	r2, [r7, #16]
 80046ee:	4013      	ands	r3, r2
 80046f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	091b      	lsrs	r3, r3, #4
 80046f8:	f003 0201 	and.w	r2, r3, #1
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004702:	693a      	ldr	r2, [r7, #16]
 8004704:	4313      	orrs	r3, r2
 8004706:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	693a      	ldr	r2, [r7, #16]
 800470c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	f003 0303 	and.w	r3, r3, #3
 8004716:	2b03      	cmp	r3, #3
 8004718:	d118      	bne.n	800474c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800471e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004720:	2201      	movs	r2, #1
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	fa02 f303 	lsl.w	r3, r2, r3
 8004728:	43db      	mvns	r3, r3
 800472a:	693a      	ldr	r2, [r7, #16]
 800472c:	4013      	ands	r3, r2
 800472e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	08db      	lsrs	r3, r3, #3
 8004736:	f003 0201 	and.w	r2, r3, #1
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	fa02 f303 	lsl.w	r3, r2, r3
 8004740:	693a      	ldr	r2, [r7, #16]
 8004742:	4313      	orrs	r3, r2
 8004744:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	693a      	ldr	r2, [r7, #16]
 800474a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	f003 0303 	and.w	r3, r3, #3
 8004754:	2b03      	cmp	r3, #3
 8004756:	d017      	beq.n	8004788 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	005b      	lsls	r3, r3, #1
 8004762:	2203      	movs	r2, #3
 8004764:	fa02 f303 	lsl.w	r3, r2, r3
 8004768:	43db      	mvns	r3, r3
 800476a:	693a      	ldr	r2, [r7, #16]
 800476c:	4013      	ands	r3, r2
 800476e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	689a      	ldr	r2, [r3, #8]
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	005b      	lsls	r3, r3, #1
 8004778:	fa02 f303 	lsl.w	r3, r2, r3
 800477c:	693a      	ldr	r2, [r7, #16]
 800477e:	4313      	orrs	r3, r2
 8004780:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	693a      	ldr	r2, [r7, #16]
 8004786:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f003 0303 	and.w	r3, r3, #3
 8004790:	2b02      	cmp	r3, #2
 8004792:	d123      	bne.n	80047dc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	08da      	lsrs	r2, r3, #3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	3208      	adds	r2, #8
 800479c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	f003 0307 	and.w	r3, r3, #7
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	220f      	movs	r2, #15
 80047ac:	fa02 f303 	lsl.w	r3, r2, r3
 80047b0:	43db      	mvns	r3, r3
 80047b2:	693a      	ldr	r2, [r7, #16]
 80047b4:	4013      	ands	r3, r2
 80047b6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	691a      	ldr	r2, [r3, #16]
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	f003 0307 	and.w	r3, r3, #7
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	fa02 f303 	lsl.w	r3, r2, r3
 80047c8:	693a      	ldr	r2, [r7, #16]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	08da      	lsrs	r2, r3, #3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	3208      	adds	r2, #8
 80047d6:	6939      	ldr	r1, [r7, #16]
 80047d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	005b      	lsls	r3, r3, #1
 80047e6:	2203      	movs	r2, #3
 80047e8:	fa02 f303 	lsl.w	r3, r2, r3
 80047ec:	43db      	mvns	r3, r3
 80047ee:	693a      	ldr	r2, [r7, #16]
 80047f0:	4013      	ands	r3, r2
 80047f2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f003 0203 	and.w	r2, r3, #3
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	005b      	lsls	r3, r3, #1
 8004800:	fa02 f303 	lsl.w	r3, r2, r3
 8004804:	693a      	ldr	r2, [r7, #16]
 8004806:	4313      	orrs	r3, r2
 8004808:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	693a      	ldr	r2, [r7, #16]
 800480e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004818:	2b00      	cmp	r3, #0
 800481a:	f000 80ac 	beq.w	8004976 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800481e:	4b5f      	ldr	r3, [pc, #380]	@ (800499c <HAL_GPIO_Init+0x330>)
 8004820:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004822:	4a5e      	ldr	r2, [pc, #376]	@ (800499c <HAL_GPIO_Init+0x330>)
 8004824:	f043 0301 	orr.w	r3, r3, #1
 8004828:	6613      	str	r3, [r2, #96]	@ 0x60
 800482a:	4b5c      	ldr	r3, [pc, #368]	@ (800499c <HAL_GPIO_Init+0x330>)
 800482c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800482e:	f003 0301 	and.w	r3, r3, #1
 8004832:	60bb      	str	r3, [r7, #8]
 8004834:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004836:	4a5a      	ldr	r2, [pc, #360]	@ (80049a0 <HAL_GPIO_Init+0x334>)
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	089b      	lsrs	r3, r3, #2
 800483c:	3302      	adds	r3, #2
 800483e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004842:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	f003 0303 	and.w	r3, r3, #3
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	220f      	movs	r2, #15
 800484e:	fa02 f303 	lsl.w	r3, r2, r3
 8004852:	43db      	mvns	r3, r3
 8004854:	693a      	ldr	r2, [r7, #16]
 8004856:	4013      	ands	r3, r2
 8004858:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004860:	d025      	beq.n	80048ae <HAL_GPIO_Init+0x242>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a4f      	ldr	r2, [pc, #316]	@ (80049a4 <HAL_GPIO_Init+0x338>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d01f      	beq.n	80048aa <HAL_GPIO_Init+0x23e>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a4e      	ldr	r2, [pc, #312]	@ (80049a8 <HAL_GPIO_Init+0x33c>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d019      	beq.n	80048a6 <HAL_GPIO_Init+0x23a>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a4d      	ldr	r2, [pc, #308]	@ (80049ac <HAL_GPIO_Init+0x340>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d013      	beq.n	80048a2 <HAL_GPIO_Init+0x236>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a4c      	ldr	r2, [pc, #304]	@ (80049b0 <HAL_GPIO_Init+0x344>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d00d      	beq.n	800489e <HAL_GPIO_Init+0x232>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a4b      	ldr	r2, [pc, #300]	@ (80049b4 <HAL_GPIO_Init+0x348>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d007      	beq.n	800489a <HAL_GPIO_Init+0x22e>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a4a      	ldr	r2, [pc, #296]	@ (80049b8 <HAL_GPIO_Init+0x34c>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d101      	bne.n	8004896 <HAL_GPIO_Init+0x22a>
 8004892:	2306      	movs	r3, #6
 8004894:	e00c      	b.n	80048b0 <HAL_GPIO_Init+0x244>
 8004896:	2307      	movs	r3, #7
 8004898:	e00a      	b.n	80048b0 <HAL_GPIO_Init+0x244>
 800489a:	2305      	movs	r3, #5
 800489c:	e008      	b.n	80048b0 <HAL_GPIO_Init+0x244>
 800489e:	2304      	movs	r3, #4
 80048a0:	e006      	b.n	80048b0 <HAL_GPIO_Init+0x244>
 80048a2:	2303      	movs	r3, #3
 80048a4:	e004      	b.n	80048b0 <HAL_GPIO_Init+0x244>
 80048a6:	2302      	movs	r3, #2
 80048a8:	e002      	b.n	80048b0 <HAL_GPIO_Init+0x244>
 80048aa:	2301      	movs	r3, #1
 80048ac:	e000      	b.n	80048b0 <HAL_GPIO_Init+0x244>
 80048ae:	2300      	movs	r3, #0
 80048b0:	697a      	ldr	r2, [r7, #20]
 80048b2:	f002 0203 	and.w	r2, r2, #3
 80048b6:	0092      	lsls	r2, r2, #2
 80048b8:	4093      	lsls	r3, r2
 80048ba:	693a      	ldr	r2, [r7, #16]
 80048bc:	4313      	orrs	r3, r2
 80048be:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80048c0:	4937      	ldr	r1, [pc, #220]	@ (80049a0 <HAL_GPIO_Init+0x334>)
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	089b      	lsrs	r3, r3, #2
 80048c6:	3302      	adds	r3, #2
 80048c8:	693a      	ldr	r2, [r7, #16]
 80048ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80048ce:	4b3b      	ldr	r3, [pc, #236]	@ (80049bc <HAL_GPIO_Init+0x350>)
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	43db      	mvns	r3, r3
 80048d8:	693a      	ldr	r2, [r7, #16]
 80048da:	4013      	ands	r3, r2
 80048dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d003      	beq.n	80048f2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80048ea:	693a      	ldr	r2, [r7, #16]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80048f2:	4a32      	ldr	r2, [pc, #200]	@ (80049bc <HAL_GPIO_Init+0x350>)
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80048f8:	4b30      	ldr	r3, [pc, #192]	@ (80049bc <HAL_GPIO_Init+0x350>)
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	43db      	mvns	r3, r3
 8004902:	693a      	ldr	r2, [r7, #16]
 8004904:	4013      	ands	r3, r2
 8004906:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d003      	beq.n	800491c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004914:	693a      	ldr	r2, [r7, #16]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	4313      	orrs	r3, r2
 800491a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800491c:	4a27      	ldr	r2, [pc, #156]	@ (80049bc <HAL_GPIO_Init+0x350>)
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004922:	4b26      	ldr	r3, [pc, #152]	@ (80049bc <HAL_GPIO_Init+0x350>)
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	43db      	mvns	r3, r3
 800492c:	693a      	ldr	r2, [r7, #16]
 800492e:	4013      	ands	r3, r2
 8004930:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d003      	beq.n	8004946 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800493e:	693a      	ldr	r2, [r7, #16]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	4313      	orrs	r3, r2
 8004944:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004946:	4a1d      	ldr	r2, [pc, #116]	@ (80049bc <HAL_GPIO_Init+0x350>)
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800494c:	4b1b      	ldr	r3, [pc, #108]	@ (80049bc <HAL_GPIO_Init+0x350>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	43db      	mvns	r3, r3
 8004956:	693a      	ldr	r2, [r7, #16]
 8004958:	4013      	ands	r3, r2
 800495a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d003      	beq.n	8004970 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004968:	693a      	ldr	r2, [r7, #16]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	4313      	orrs	r3, r2
 800496e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004970:	4a12      	ldr	r2, [pc, #72]	@ (80049bc <HAL_GPIO_Init+0x350>)
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	3301      	adds	r3, #1
 800497a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	fa22 f303 	lsr.w	r3, r2, r3
 8004986:	2b00      	cmp	r3, #0
 8004988:	f47f ae78 	bne.w	800467c <HAL_GPIO_Init+0x10>
  }
}
 800498c:	bf00      	nop
 800498e:	bf00      	nop
 8004990:	371c      	adds	r7, #28
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr
 800499a:	bf00      	nop
 800499c:	40021000 	.word	0x40021000
 80049a0:	40010000 	.word	0x40010000
 80049a4:	48000400 	.word	0x48000400
 80049a8:	48000800 	.word	0x48000800
 80049ac:	48000c00 	.word	0x48000c00
 80049b0:	48001000 	.word	0x48001000
 80049b4:	48001400 	.word	0x48001400
 80049b8:	48001800 	.word	0x48001800
 80049bc:	40010400 	.word	0x40010400

080049c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	460b      	mov	r3, r1
 80049ca:	807b      	strh	r3, [r7, #2]
 80049cc:	4613      	mov	r3, r2
 80049ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80049d0:	787b      	ldrb	r3, [r7, #1]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d003      	beq.n	80049de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80049d6:	887a      	ldrh	r2, [r7, #2]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80049dc:	e002      	b.n	80049e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80049de:	887a      	ldrh	r2, [r7, #2]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80049e4:	bf00      	nop
 80049e6:	370c      	adds	r7, #12
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b082      	sub	sp, #8
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	4603      	mov	r3, r0
 80049f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80049fa:	4b08      	ldr	r3, [pc, #32]	@ (8004a1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80049fc:	695a      	ldr	r2, [r3, #20]
 80049fe:	88fb      	ldrh	r3, [r7, #6]
 8004a00:	4013      	ands	r3, r2
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d006      	beq.n	8004a14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004a06:	4a05      	ldr	r2, [pc, #20]	@ (8004a1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a08:	88fb      	ldrh	r3, [r7, #6]
 8004a0a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004a0c:	88fb      	ldrh	r3, [r7, #6]
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f7fd f836 	bl	8001a80 <HAL_GPIO_EXTI_Callback>
  }
}
 8004a14:	bf00      	nop
 8004a16:	3708      	adds	r7, #8
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	40010400 	.word	0x40010400

08004a20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b082      	sub	sp, #8
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d101      	bne.n	8004a32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e08d      	b.n	8004b4e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d106      	bne.n	8004a4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f7fd fa04 	bl	8001e54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2224      	movs	r2, #36	@ 0x24
 8004a50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f022 0201 	bic.w	r2, r2, #1
 8004a62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	685a      	ldr	r2, [r3, #4]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004a70:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	689a      	ldr	r2, [r3, #8]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004a80:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d107      	bne.n	8004a9a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	689a      	ldr	r2, [r3, #8]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004a96:	609a      	str	r2, [r3, #8]
 8004a98:	e006      	b.n	8004aa8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	689a      	ldr	r2, [r3, #8]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004aa6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	d108      	bne.n	8004ac2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	685a      	ldr	r2, [r3, #4]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004abe:	605a      	str	r2, [r3, #4]
 8004ac0:	e007      	b.n	8004ad2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	685a      	ldr	r2, [r3, #4]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ad0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	6812      	ldr	r2, [r2, #0]
 8004adc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004ae0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ae4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68da      	ldr	r2, [r3, #12]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004af4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	691a      	ldr	r2, [r3, #16]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	695b      	ldr	r3, [r3, #20]
 8004afe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	699b      	ldr	r3, [r3, #24]
 8004b06:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	430a      	orrs	r2, r1
 8004b0e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	69d9      	ldr	r1, [r3, #28]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6a1a      	ldr	r2, [r3, #32]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	430a      	orrs	r2, r1
 8004b1e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f042 0201 	orr.w	r2, r2, #1
 8004b2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2220      	movs	r2, #32
 8004b3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3708      	adds	r7, #8
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
	...

08004b58 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b088      	sub	sp, #32
 8004b5c:	af02      	add	r7, sp, #8
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	607a      	str	r2, [r7, #4]
 8004b62:	461a      	mov	r2, r3
 8004b64:	460b      	mov	r3, r1
 8004b66:	817b      	strh	r3, [r7, #10]
 8004b68:	4613      	mov	r3, r2
 8004b6a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	2b20      	cmp	r3, #32
 8004b76:	f040 80fd 	bne.w	8004d74 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d101      	bne.n	8004b88 <HAL_I2C_Master_Transmit+0x30>
 8004b84:	2302      	movs	r3, #2
 8004b86:	e0f6      	b.n	8004d76 <HAL_I2C_Master_Transmit+0x21e>
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004b90:	f7fd fc22 	bl	80023d8 <HAL_GetTick>
 8004b94:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	9300      	str	r3, [sp, #0]
 8004b9a:	2319      	movs	r3, #25
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004ba2:	68f8      	ldr	r0, [r7, #12]
 8004ba4:	f000 f914 	bl	8004dd0 <I2C_WaitOnFlagUntilTimeout>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d001      	beq.n	8004bb2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e0e1      	b.n	8004d76 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2221      	movs	r2, #33	@ 0x21
 8004bb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2210      	movs	r2, #16
 8004bbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	893a      	ldrh	r2, [r7, #8]
 8004bd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	2bff      	cmp	r3, #255	@ 0xff
 8004be2:	d906      	bls.n	8004bf2 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	22ff      	movs	r2, #255	@ 0xff
 8004be8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8004bea:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004bee:	617b      	str	r3, [r7, #20]
 8004bf0:	e007      	b.n	8004c02 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bf6:	b29a      	uxth	r2, r3
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004bfc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004c00:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d024      	beq.n	8004c54 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c0e:	781a      	ldrb	r2, [r3, #0]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c1a:	1c5a      	adds	r2, r3, #1
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	3b01      	subs	r3, #1
 8004c28:	b29a      	uxth	r2, r3
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c32:	3b01      	subs	r3, #1
 8004c34:	b29a      	uxth	r2, r3
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	3301      	adds	r3, #1
 8004c42:	b2da      	uxtb	r2, r3
 8004c44:	8979      	ldrh	r1, [r7, #10]
 8004c46:	4b4e      	ldr	r3, [pc, #312]	@ (8004d80 <HAL_I2C_Master_Transmit+0x228>)
 8004c48:	9300      	str	r3, [sp, #0]
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	68f8      	ldr	r0, [r7, #12]
 8004c4e:	f000 fa83 	bl	8005158 <I2C_TransferConfig>
 8004c52:	e066      	b.n	8004d22 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c58:	b2da      	uxtb	r2, r3
 8004c5a:	8979      	ldrh	r1, [r7, #10]
 8004c5c:	4b48      	ldr	r3, [pc, #288]	@ (8004d80 <HAL_I2C_Master_Transmit+0x228>)
 8004c5e:	9300      	str	r3, [sp, #0]
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	68f8      	ldr	r0, [r7, #12]
 8004c64:	f000 fa78 	bl	8005158 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004c68:	e05b      	b.n	8004d22 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c6a:	693a      	ldr	r2, [r7, #16]
 8004c6c:	6a39      	ldr	r1, [r7, #32]
 8004c6e:	68f8      	ldr	r0, [r7, #12]
 8004c70:	f000 f907 	bl	8004e82 <I2C_WaitOnTXISFlagUntilTimeout>
 8004c74:	4603      	mov	r3, r0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d001      	beq.n	8004c7e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e07b      	b.n	8004d76 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c82:	781a      	ldrb	r2, [r3, #0]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c8e:	1c5a      	adds	r2, r3, #1
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	3b01      	subs	r3, #1
 8004c9c:	b29a      	uxth	r2, r3
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	b29a      	uxth	r2, r3
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d034      	beq.n	8004d22 <HAL_I2C_Master_Transmit+0x1ca>
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d130      	bne.n	8004d22 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	9300      	str	r3, [sp, #0]
 8004cc4:	6a3b      	ldr	r3, [r7, #32]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	2180      	movs	r1, #128	@ 0x80
 8004cca:	68f8      	ldr	r0, [r7, #12]
 8004ccc:	f000 f880 	bl	8004dd0 <I2C_WaitOnFlagUntilTimeout>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d001      	beq.n	8004cda <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e04d      	b.n	8004d76 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	2bff      	cmp	r3, #255	@ 0xff
 8004ce2:	d90e      	bls.n	8004d02 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	22ff      	movs	r2, #255	@ 0xff
 8004ce8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cee:	b2da      	uxtb	r2, r3
 8004cf0:	8979      	ldrh	r1, [r7, #10]
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	9300      	str	r3, [sp, #0]
 8004cf6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004cfa:	68f8      	ldr	r0, [r7, #12]
 8004cfc:	f000 fa2c 	bl	8005158 <I2C_TransferConfig>
 8004d00:	e00f      	b.n	8004d22 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d06:	b29a      	uxth	r2, r3
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d10:	b2da      	uxtb	r2, r3
 8004d12:	8979      	ldrh	r1, [r7, #10]
 8004d14:	2300      	movs	r3, #0
 8004d16:	9300      	str	r3, [sp, #0]
 8004d18:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004d1c:	68f8      	ldr	r0, [r7, #12]
 8004d1e:	f000 fa1b 	bl	8005158 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d19e      	bne.n	8004c6a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d2c:	693a      	ldr	r2, [r7, #16]
 8004d2e:	6a39      	ldr	r1, [r7, #32]
 8004d30:	68f8      	ldr	r0, [r7, #12]
 8004d32:	f000 f8ed 	bl	8004f10 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d001      	beq.n	8004d40 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e01a      	b.n	8004d76 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2220      	movs	r2, #32
 8004d46:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	6859      	ldr	r1, [r3, #4]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	4b0c      	ldr	r3, [pc, #48]	@ (8004d84 <HAL_I2C_Master_Transmit+0x22c>)
 8004d54:	400b      	ands	r3, r1
 8004d56:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2220      	movs	r2, #32
 8004d5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004d70:	2300      	movs	r3, #0
 8004d72:	e000      	b.n	8004d76 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8004d74:	2302      	movs	r3, #2
  }
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3718      	adds	r7, #24
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}
 8004d7e:	bf00      	nop
 8004d80:	80002000 	.word	0x80002000
 8004d84:	fe00e800 	.word	0xfe00e800

08004d88 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	f003 0302 	and.w	r3, r3, #2
 8004d9a:	2b02      	cmp	r3, #2
 8004d9c:	d103      	bne.n	8004da6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	2200      	movs	r2, #0
 8004da4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	699b      	ldr	r3, [r3, #24]
 8004dac:	f003 0301 	and.w	r3, r3, #1
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d007      	beq.n	8004dc4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	699a      	ldr	r2, [r3, #24]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f042 0201 	orr.w	r2, r2, #1
 8004dc2:	619a      	str	r2, [r3, #24]
  }
}
 8004dc4:	bf00      	nop
 8004dc6:	370c      	adds	r7, #12
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr

08004dd0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b084      	sub	sp, #16
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	60b9      	str	r1, [r7, #8]
 8004dda:	603b      	str	r3, [r7, #0]
 8004ddc:	4613      	mov	r3, r2
 8004dde:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004de0:	e03b      	b.n	8004e5a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004de2:	69ba      	ldr	r2, [r7, #24]
 8004de4:	6839      	ldr	r1, [r7, #0]
 8004de6:	68f8      	ldr	r0, [r7, #12]
 8004de8:	f000 f8d6 	bl	8004f98 <I2C_IsErrorOccurred>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d001      	beq.n	8004df6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e041      	b.n	8004e7a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dfc:	d02d      	beq.n	8004e5a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dfe:	f7fd faeb 	bl	80023d8 <HAL_GetTick>
 8004e02:	4602      	mov	r2, r0
 8004e04:	69bb      	ldr	r3, [r7, #24]
 8004e06:	1ad3      	subs	r3, r2, r3
 8004e08:	683a      	ldr	r2, [r7, #0]
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d302      	bcc.n	8004e14 <I2C_WaitOnFlagUntilTimeout+0x44>
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d122      	bne.n	8004e5a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	699a      	ldr	r2, [r3, #24]
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	68ba      	ldr	r2, [r7, #8]
 8004e20:	429a      	cmp	r2, r3
 8004e22:	bf0c      	ite	eq
 8004e24:	2301      	moveq	r3, #1
 8004e26:	2300      	movne	r3, #0
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	79fb      	ldrb	r3, [r7, #7]
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d113      	bne.n	8004e5a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e36:	f043 0220 	orr.w	r2, r3, #32
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2220      	movs	r2, #32
 8004e42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2200      	movs	r2, #0
 8004e52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e00f      	b.n	8004e7a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	699a      	ldr	r2, [r3, #24]
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	4013      	ands	r3, r2
 8004e64:	68ba      	ldr	r2, [r7, #8]
 8004e66:	429a      	cmp	r2, r3
 8004e68:	bf0c      	ite	eq
 8004e6a:	2301      	moveq	r3, #1
 8004e6c:	2300      	movne	r3, #0
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	461a      	mov	r2, r3
 8004e72:	79fb      	ldrb	r3, [r7, #7]
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d0b4      	beq.n	8004de2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e78:	2300      	movs	r3, #0
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3710      	adds	r7, #16
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}

08004e82 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004e82:	b580      	push	{r7, lr}
 8004e84:	b084      	sub	sp, #16
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	60f8      	str	r0, [r7, #12]
 8004e8a:	60b9      	str	r1, [r7, #8]
 8004e8c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004e8e:	e033      	b.n	8004ef8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	68b9      	ldr	r1, [r7, #8]
 8004e94:	68f8      	ldr	r0, [r7, #12]
 8004e96:	f000 f87f 	bl	8004f98 <I2C_IsErrorOccurred>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d001      	beq.n	8004ea4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e031      	b.n	8004f08 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eaa:	d025      	beq.n	8004ef8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eac:	f7fd fa94 	bl	80023d8 <HAL_GetTick>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	68ba      	ldr	r2, [r7, #8]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d302      	bcc.n	8004ec2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d11a      	bne.n	8004ef8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	699b      	ldr	r3, [r3, #24]
 8004ec8:	f003 0302 	and.w	r3, r3, #2
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	d013      	beq.n	8004ef8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ed4:	f043 0220 	orr.w	r2, r3, #32
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2220      	movs	r2, #32
 8004ee0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e007      	b.n	8004f08 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	699b      	ldr	r3, [r3, #24]
 8004efe:	f003 0302 	and.w	r3, r3, #2
 8004f02:	2b02      	cmp	r3, #2
 8004f04:	d1c4      	bne.n	8004e90 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004f06:	2300      	movs	r3, #0
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3710      	adds	r7, #16
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b084      	sub	sp, #16
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	60b9      	str	r1, [r7, #8]
 8004f1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f1c:	e02f      	b.n	8004f7e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	68b9      	ldr	r1, [r7, #8]
 8004f22:	68f8      	ldr	r0, [r7, #12]
 8004f24:	f000 f838 	bl	8004f98 <I2C_IsErrorOccurred>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d001      	beq.n	8004f32 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e02d      	b.n	8004f8e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f32:	f7fd fa51 	bl	80023d8 <HAL_GetTick>
 8004f36:	4602      	mov	r2, r0
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	1ad3      	subs	r3, r2, r3
 8004f3c:	68ba      	ldr	r2, [r7, #8]
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d302      	bcc.n	8004f48 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d11a      	bne.n	8004f7e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	699b      	ldr	r3, [r3, #24]
 8004f4e:	f003 0320 	and.w	r3, r3, #32
 8004f52:	2b20      	cmp	r3, #32
 8004f54:	d013      	beq.n	8004f7e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f5a:	f043 0220 	orr.w	r2, r3, #32
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2220      	movs	r2, #32
 8004f66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2200      	movs	r2, #0
 8004f76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e007      	b.n	8004f8e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	699b      	ldr	r3, [r3, #24]
 8004f84:	f003 0320 	and.w	r3, r3, #32
 8004f88:	2b20      	cmp	r3, #32
 8004f8a:	d1c8      	bne.n	8004f1e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f8c:	2300      	movs	r3, #0
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3710      	adds	r7, #16
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
	...

08004f98 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b08a      	sub	sp, #40	@ 0x28
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	60b9      	str	r1, [r7, #8]
 8004fa2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	699b      	ldr	r3, [r3, #24]
 8004fb0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004fba:	69bb      	ldr	r3, [r7, #24]
 8004fbc:	f003 0310 	and.w	r3, r3, #16
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d068      	beq.n	8005096 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	2210      	movs	r2, #16
 8004fca:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004fcc:	e049      	b.n	8005062 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fd4:	d045      	beq.n	8005062 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004fd6:	f7fd f9ff 	bl	80023d8 <HAL_GetTick>
 8004fda:	4602      	mov	r2, r0
 8004fdc:	69fb      	ldr	r3, [r7, #28]
 8004fde:	1ad3      	subs	r3, r2, r3
 8004fe0:	68ba      	ldr	r2, [r7, #8]
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d302      	bcc.n	8004fec <I2C_IsErrorOccurred+0x54>
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d13a      	bne.n	8005062 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ff6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004ffe:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	699b      	ldr	r3, [r3, #24]
 8005006:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800500a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800500e:	d121      	bne.n	8005054 <I2C_IsErrorOccurred+0xbc>
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005016:	d01d      	beq.n	8005054 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005018:	7cfb      	ldrb	r3, [r7, #19]
 800501a:	2b20      	cmp	r3, #32
 800501c:	d01a      	beq.n	8005054 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	685a      	ldr	r2, [r3, #4]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800502c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800502e:	f7fd f9d3 	bl	80023d8 <HAL_GetTick>
 8005032:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005034:	e00e      	b.n	8005054 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005036:	f7fd f9cf 	bl	80023d8 <HAL_GetTick>
 800503a:	4602      	mov	r2, r0
 800503c:	69fb      	ldr	r3, [r7, #28]
 800503e:	1ad3      	subs	r3, r2, r3
 8005040:	2b19      	cmp	r3, #25
 8005042:	d907      	bls.n	8005054 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005044:	6a3b      	ldr	r3, [r7, #32]
 8005046:	f043 0320 	orr.w	r3, r3, #32
 800504a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005052:	e006      	b.n	8005062 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	699b      	ldr	r3, [r3, #24]
 800505a:	f003 0320 	and.w	r3, r3, #32
 800505e:	2b20      	cmp	r3, #32
 8005060:	d1e9      	bne.n	8005036 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	699b      	ldr	r3, [r3, #24]
 8005068:	f003 0320 	and.w	r3, r3, #32
 800506c:	2b20      	cmp	r3, #32
 800506e:	d003      	beq.n	8005078 <I2C_IsErrorOccurred+0xe0>
 8005070:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005074:	2b00      	cmp	r3, #0
 8005076:	d0aa      	beq.n	8004fce <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005078:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800507c:	2b00      	cmp	r3, #0
 800507e:	d103      	bne.n	8005088 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	2220      	movs	r2, #32
 8005086:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005088:	6a3b      	ldr	r3, [r7, #32]
 800508a:	f043 0304 	orr.w	r3, r3, #4
 800508e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	699b      	ldr	r3, [r3, #24]
 800509c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d00b      	beq.n	80050c0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80050a8:	6a3b      	ldr	r3, [r7, #32]
 80050aa:	f043 0301 	orr.w	r3, r3, #1
 80050ae:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80050b8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80050c0:	69bb      	ldr	r3, [r7, #24]
 80050c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d00b      	beq.n	80050e2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80050ca:	6a3b      	ldr	r3, [r7, #32]
 80050cc:	f043 0308 	orr.w	r3, r3, #8
 80050d0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80050da:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80050e2:	69bb      	ldr	r3, [r7, #24]
 80050e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d00b      	beq.n	8005104 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80050ec:	6a3b      	ldr	r3, [r7, #32]
 80050ee:	f043 0302 	orr.w	r3, r3, #2
 80050f2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80050fc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005104:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005108:	2b00      	cmp	r3, #0
 800510a:	d01c      	beq.n	8005146 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800510c:	68f8      	ldr	r0, [r7, #12]
 800510e:	f7ff fe3b 	bl	8004d88 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	6859      	ldr	r1, [r3, #4]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	4b0d      	ldr	r3, [pc, #52]	@ (8005154 <I2C_IsErrorOccurred+0x1bc>)
 800511e:	400b      	ands	r3, r1
 8005120:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005126:	6a3b      	ldr	r3, [r7, #32]
 8005128:	431a      	orrs	r2, r3
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2220      	movs	r2, #32
 8005132:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2200      	movs	r2, #0
 800513a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2200      	movs	r2, #0
 8005142:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005146:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800514a:	4618      	mov	r0, r3
 800514c:	3728      	adds	r7, #40	@ 0x28
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
 8005152:	bf00      	nop
 8005154:	fe00e800 	.word	0xfe00e800

08005158 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005158:	b480      	push	{r7}
 800515a:	b087      	sub	sp, #28
 800515c:	af00      	add	r7, sp, #0
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	607b      	str	r3, [r7, #4]
 8005162:	460b      	mov	r3, r1
 8005164:	817b      	strh	r3, [r7, #10]
 8005166:	4613      	mov	r3, r2
 8005168:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800516a:	897b      	ldrh	r3, [r7, #10]
 800516c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005170:	7a7b      	ldrb	r3, [r7, #9]
 8005172:	041b      	lsls	r3, r3, #16
 8005174:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005178:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800517e:	6a3b      	ldr	r3, [r7, #32]
 8005180:	4313      	orrs	r3, r2
 8005182:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005186:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	685a      	ldr	r2, [r3, #4]
 800518e:	6a3b      	ldr	r3, [r7, #32]
 8005190:	0d5b      	lsrs	r3, r3, #21
 8005192:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005196:	4b08      	ldr	r3, [pc, #32]	@ (80051b8 <I2C_TransferConfig+0x60>)
 8005198:	430b      	orrs	r3, r1
 800519a:	43db      	mvns	r3, r3
 800519c:	ea02 0103 	and.w	r1, r2, r3
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	697a      	ldr	r2, [r7, #20]
 80051a6:	430a      	orrs	r2, r1
 80051a8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80051aa:	bf00      	nop
 80051ac:	371c      	adds	r7, #28
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr
 80051b6:	bf00      	nop
 80051b8:	03ff63ff 	.word	0x03ff63ff

080051bc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80051bc:	b480      	push	{r7}
 80051be:	b083      	sub	sp, #12
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	2b20      	cmp	r3, #32
 80051d0:	d138      	bne.n	8005244 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d101      	bne.n	80051e0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80051dc:	2302      	movs	r3, #2
 80051de:	e032      	b.n	8005246 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2224      	movs	r2, #36	@ 0x24
 80051ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f022 0201 	bic.w	r2, r2, #1
 80051fe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800520e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	6819      	ldr	r1, [r3, #0]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	683a      	ldr	r2, [r7, #0]
 800521c:	430a      	orrs	r2, r1
 800521e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f042 0201 	orr.w	r2, r2, #1
 800522e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2220      	movs	r2, #32
 8005234:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005240:	2300      	movs	r3, #0
 8005242:	e000      	b.n	8005246 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005244:	2302      	movs	r3, #2
  }
}
 8005246:	4618      	mov	r0, r3
 8005248:	370c      	adds	r7, #12
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr

08005252 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005252:	b480      	push	{r7}
 8005254:	b085      	sub	sp, #20
 8005256:	af00      	add	r7, sp, #0
 8005258:	6078      	str	r0, [r7, #4]
 800525a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005262:	b2db      	uxtb	r3, r3
 8005264:	2b20      	cmp	r3, #32
 8005266:	d139      	bne.n	80052dc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800526e:	2b01      	cmp	r3, #1
 8005270:	d101      	bne.n	8005276 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005272:	2302      	movs	r3, #2
 8005274:	e033      	b.n	80052de <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2201      	movs	r2, #1
 800527a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2224      	movs	r2, #36	@ 0x24
 8005282:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f022 0201 	bic.w	r2, r2, #1
 8005294:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80052a4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	021b      	lsls	r3, r3, #8
 80052aa:	68fa      	ldr	r2, [r7, #12]
 80052ac:	4313      	orrs	r3, r2
 80052ae:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	68fa      	ldr	r2, [r7, #12]
 80052b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f042 0201 	orr.w	r2, r2, #1
 80052c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2220      	movs	r2, #32
 80052cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80052d8:	2300      	movs	r3, #0
 80052da:	e000      	b.n	80052de <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80052dc:	2302      	movs	r3, #2
  }
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3714      	adds	r7, #20
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr
	...

080052ec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80052ec:	b480      	push	{r7}
 80052ee:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80052f0:	4b04      	ldr	r3, [pc, #16]	@ (8005304 <HAL_PWREx_GetVoltageRange+0x18>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr
 8005302:	bf00      	nop
 8005304:	40007000 	.word	0x40007000

08005308 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005308:	b480      	push	{r7}
 800530a:	b085      	sub	sp, #20
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005316:	d130      	bne.n	800537a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005318:	4b23      	ldr	r3, [pc, #140]	@ (80053a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005320:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005324:	d038      	beq.n	8005398 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005326:	4b20      	ldr	r3, [pc, #128]	@ (80053a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800532e:	4a1e      	ldr	r2, [pc, #120]	@ (80053a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005330:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005334:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005336:	4b1d      	ldr	r3, [pc, #116]	@ (80053ac <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	2232      	movs	r2, #50	@ 0x32
 800533c:	fb02 f303 	mul.w	r3, r2, r3
 8005340:	4a1b      	ldr	r2, [pc, #108]	@ (80053b0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005342:	fba2 2303 	umull	r2, r3, r2, r3
 8005346:	0c9b      	lsrs	r3, r3, #18
 8005348:	3301      	adds	r3, #1
 800534a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800534c:	e002      	b.n	8005354 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	3b01      	subs	r3, #1
 8005352:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005354:	4b14      	ldr	r3, [pc, #80]	@ (80053a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005356:	695b      	ldr	r3, [r3, #20]
 8005358:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800535c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005360:	d102      	bne.n	8005368 <HAL_PWREx_ControlVoltageScaling+0x60>
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d1f2      	bne.n	800534e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005368:	4b0f      	ldr	r3, [pc, #60]	@ (80053a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800536a:	695b      	ldr	r3, [r3, #20]
 800536c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005370:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005374:	d110      	bne.n	8005398 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005376:	2303      	movs	r3, #3
 8005378:	e00f      	b.n	800539a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800537a:	4b0b      	ldr	r3, [pc, #44]	@ (80053a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005382:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005386:	d007      	beq.n	8005398 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005388:	4b07      	ldr	r3, [pc, #28]	@ (80053a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005390:	4a05      	ldr	r2, [pc, #20]	@ (80053a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005392:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005396:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	3714      	adds	r7, #20
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr
 80053a6:	bf00      	nop
 80053a8:	40007000 	.word	0x40007000
 80053ac:	2000020c 	.word	0x2000020c
 80053b0:	431bde83 	.word	0x431bde83

080053b4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b088      	sub	sp, #32
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d101      	bne.n	80053c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e3ca      	b.n	8005b5c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053c6:	4b97      	ldr	r3, [pc, #604]	@ (8005624 <HAL_RCC_OscConfig+0x270>)
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	f003 030c 	and.w	r3, r3, #12
 80053ce:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80053d0:	4b94      	ldr	r3, [pc, #592]	@ (8005624 <HAL_RCC_OscConfig+0x270>)
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	f003 0303 	and.w	r3, r3, #3
 80053d8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 0310 	and.w	r3, r3, #16
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	f000 80e4 	beq.w	80055b0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80053e8:	69bb      	ldr	r3, [r7, #24]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d007      	beq.n	80053fe <HAL_RCC_OscConfig+0x4a>
 80053ee:	69bb      	ldr	r3, [r7, #24]
 80053f0:	2b0c      	cmp	r3, #12
 80053f2:	f040 808b 	bne.w	800550c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	f040 8087 	bne.w	800550c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80053fe:	4b89      	ldr	r3, [pc, #548]	@ (8005624 <HAL_RCC_OscConfig+0x270>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f003 0302 	and.w	r3, r3, #2
 8005406:	2b00      	cmp	r3, #0
 8005408:	d005      	beq.n	8005416 <HAL_RCC_OscConfig+0x62>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	699b      	ldr	r3, [r3, #24]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d101      	bne.n	8005416 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	e3a2      	b.n	8005b5c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a1a      	ldr	r2, [r3, #32]
 800541a:	4b82      	ldr	r3, [pc, #520]	@ (8005624 <HAL_RCC_OscConfig+0x270>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 0308 	and.w	r3, r3, #8
 8005422:	2b00      	cmp	r3, #0
 8005424:	d004      	beq.n	8005430 <HAL_RCC_OscConfig+0x7c>
 8005426:	4b7f      	ldr	r3, [pc, #508]	@ (8005624 <HAL_RCC_OscConfig+0x270>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800542e:	e005      	b.n	800543c <HAL_RCC_OscConfig+0x88>
 8005430:	4b7c      	ldr	r3, [pc, #496]	@ (8005624 <HAL_RCC_OscConfig+0x270>)
 8005432:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005436:	091b      	lsrs	r3, r3, #4
 8005438:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800543c:	4293      	cmp	r3, r2
 800543e:	d223      	bcs.n	8005488 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6a1b      	ldr	r3, [r3, #32]
 8005444:	4618      	mov	r0, r3
 8005446:	f000 fd55 	bl	8005ef4 <RCC_SetFlashLatencyFromMSIRange>
 800544a:	4603      	mov	r3, r0
 800544c:	2b00      	cmp	r3, #0
 800544e:	d001      	beq.n	8005454 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	e383      	b.n	8005b5c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005454:	4b73      	ldr	r3, [pc, #460]	@ (8005624 <HAL_RCC_OscConfig+0x270>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a72      	ldr	r2, [pc, #456]	@ (8005624 <HAL_RCC_OscConfig+0x270>)
 800545a:	f043 0308 	orr.w	r3, r3, #8
 800545e:	6013      	str	r3, [r2, #0]
 8005460:	4b70      	ldr	r3, [pc, #448]	@ (8005624 <HAL_RCC_OscConfig+0x270>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6a1b      	ldr	r3, [r3, #32]
 800546c:	496d      	ldr	r1, [pc, #436]	@ (8005624 <HAL_RCC_OscConfig+0x270>)
 800546e:	4313      	orrs	r3, r2
 8005470:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005472:	4b6c      	ldr	r3, [pc, #432]	@ (8005624 <HAL_RCC_OscConfig+0x270>)
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	69db      	ldr	r3, [r3, #28]
 800547e:	021b      	lsls	r3, r3, #8
 8005480:	4968      	ldr	r1, [pc, #416]	@ (8005624 <HAL_RCC_OscConfig+0x270>)
 8005482:	4313      	orrs	r3, r2
 8005484:	604b      	str	r3, [r1, #4]
 8005486:	e025      	b.n	80054d4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005488:	4b66      	ldr	r3, [pc, #408]	@ (8005624 <HAL_RCC_OscConfig+0x270>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a65      	ldr	r2, [pc, #404]	@ (8005624 <HAL_RCC_OscConfig+0x270>)
 800548e:	f043 0308 	orr.w	r3, r3, #8
 8005492:	6013      	str	r3, [r2, #0]
 8005494:	4b63      	ldr	r3, [pc, #396]	@ (8005624 <HAL_RCC_OscConfig+0x270>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6a1b      	ldr	r3, [r3, #32]
 80054a0:	4960      	ldr	r1, [pc, #384]	@ (8005624 <HAL_RCC_OscConfig+0x270>)
 80054a2:	4313      	orrs	r3, r2
 80054a4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80054a6:	4b5f      	ldr	r3, [pc, #380]	@ (8005624 <HAL_RCC_OscConfig+0x270>)
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	69db      	ldr	r3, [r3, #28]
 80054b2:	021b      	lsls	r3, r3, #8
 80054b4:	495b      	ldr	r1, [pc, #364]	@ (8005624 <HAL_RCC_OscConfig+0x270>)
 80054b6:	4313      	orrs	r3, r2
 80054b8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80054ba:	69bb      	ldr	r3, [r7, #24]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d109      	bne.n	80054d4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6a1b      	ldr	r3, [r3, #32]
 80054c4:	4618      	mov	r0, r3
 80054c6:	f000 fd15 	bl	8005ef4 <RCC_SetFlashLatencyFromMSIRange>
 80054ca:	4603      	mov	r3, r0
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d001      	beq.n	80054d4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	e343      	b.n	8005b5c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80054d4:	f000 fc4a 	bl	8005d6c <HAL_RCC_GetSysClockFreq>
 80054d8:	4602      	mov	r2, r0
 80054da:	4b52      	ldr	r3, [pc, #328]	@ (8005624 <HAL_RCC_OscConfig+0x270>)
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	091b      	lsrs	r3, r3, #4
 80054e0:	f003 030f 	and.w	r3, r3, #15
 80054e4:	4950      	ldr	r1, [pc, #320]	@ (8005628 <HAL_RCC_OscConfig+0x274>)
 80054e6:	5ccb      	ldrb	r3, [r1, r3]
 80054e8:	f003 031f 	and.w	r3, r3, #31
 80054ec:	fa22 f303 	lsr.w	r3, r2, r3
 80054f0:	4a4e      	ldr	r2, [pc, #312]	@ (800562c <HAL_RCC_OscConfig+0x278>)
 80054f2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80054f4:	4b4e      	ldr	r3, [pc, #312]	@ (8005630 <HAL_RCC_OscConfig+0x27c>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4618      	mov	r0, r3
 80054fa:	f7fc ff1d 	bl	8002338 <HAL_InitTick>
 80054fe:	4603      	mov	r3, r0
 8005500:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005502:	7bfb      	ldrb	r3, [r7, #15]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d052      	beq.n	80055ae <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005508:	7bfb      	ldrb	r3, [r7, #15]
 800550a:	e327      	b.n	8005b5c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	699b      	ldr	r3, [r3, #24]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d032      	beq.n	800557a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005514:	4b43      	ldr	r3, [pc, #268]	@ (8005624 <HAL_RCC_OscConfig+0x270>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a42      	ldr	r2, [pc, #264]	@ (8005624 <HAL_RCC_OscConfig+0x270>)
 800551a:	f043 0301 	orr.w	r3, r3, #1
 800551e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005520:	f7fc ff5a 	bl	80023d8 <HAL_GetTick>
 8005524:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005526:	e008      	b.n	800553a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005528:	f7fc ff56 	bl	80023d8 <HAL_GetTick>
 800552c:	4602      	mov	r2, r0
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	2b02      	cmp	r3, #2
 8005534:	d901      	bls.n	800553a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8005536:	2303      	movs	r3, #3
 8005538:	e310      	b.n	8005b5c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800553a:	4b3a      	ldr	r3, [pc, #232]	@ (8005624 <HAL_RCC_OscConfig+0x270>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 0302 	and.w	r3, r3, #2
 8005542:	2b00      	cmp	r3, #0
 8005544:	d0f0      	beq.n	8005528 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005546:	4b37      	ldr	r3, [pc, #220]	@ (8005624 <HAL_RCC_OscConfig+0x270>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a36      	ldr	r2, [pc, #216]	@ (8005624 <HAL_RCC_OscConfig+0x270>)
 800554c:	f043 0308 	orr.w	r3, r3, #8
 8005550:	6013      	str	r3, [r2, #0]
 8005552:	4b34      	ldr	r3, [pc, #208]	@ (8005624 <HAL_RCC_OscConfig+0x270>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a1b      	ldr	r3, [r3, #32]
 800555e:	4931      	ldr	r1, [pc, #196]	@ (8005624 <HAL_RCC_OscConfig+0x270>)
 8005560:	4313      	orrs	r3, r2
 8005562:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005564:	4b2f      	ldr	r3, [pc, #188]	@ (8005624 <HAL_RCC_OscConfig+0x270>)
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	69db      	ldr	r3, [r3, #28]
 8005570:	021b      	lsls	r3, r3, #8
 8005572:	492c      	ldr	r1, [pc, #176]	@ (8005624 <HAL_RCC_OscConfig+0x270>)
 8005574:	4313      	orrs	r3, r2
 8005576:	604b      	str	r3, [r1, #4]
 8005578:	e01a      	b.n	80055b0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800557a:	4b2a      	ldr	r3, [pc, #168]	@ (8005624 <HAL_RCC_OscConfig+0x270>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a29      	ldr	r2, [pc, #164]	@ (8005624 <HAL_RCC_OscConfig+0x270>)
 8005580:	f023 0301 	bic.w	r3, r3, #1
 8005584:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005586:	f7fc ff27 	bl	80023d8 <HAL_GetTick>
 800558a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800558c:	e008      	b.n	80055a0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800558e:	f7fc ff23 	bl	80023d8 <HAL_GetTick>
 8005592:	4602      	mov	r2, r0
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	1ad3      	subs	r3, r2, r3
 8005598:	2b02      	cmp	r3, #2
 800559a:	d901      	bls.n	80055a0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800559c:	2303      	movs	r3, #3
 800559e:	e2dd      	b.n	8005b5c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80055a0:	4b20      	ldr	r3, [pc, #128]	@ (8005624 <HAL_RCC_OscConfig+0x270>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 0302 	and.w	r3, r3, #2
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d1f0      	bne.n	800558e <HAL_RCC_OscConfig+0x1da>
 80055ac:	e000      	b.n	80055b0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80055ae:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f003 0301 	and.w	r3, r3, #1
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d074      	beq.n	80056a6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80055bc:	69bb      	ldr	r3, [r7, #24]
 80055be:	2b08      	cmp	r3, #8
 80055c0:	d005      	beq.n	80055ce <HAL_RCC_OscConfig+0x21a>
 80055c2:	69bb      	ldr	r3, [r7, #24]
 80055c4:	2b0c      	cmp	r3, #12
 80055c6:	d10e      	bne.n	80055e6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	2b03      	cmp	r3, #3
 80055cc:	d10b      	bne.n	80055e6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055ce:	4b15      	ldr	r3, [pc, #84]	@ (8005624 <HAL_RCC_OscConfig+0x270>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d064      	beq.n	80056a4 <HAL_RCC_OscConfig+0x2f0>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d160      	bne.n	80056a4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	e2ba      	b.n	8005b5c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055ee:	d106      	bne.n	80055fe <HAL_RCC_OscConfig+0x24a>
 80055f0:	4b0c      	ldr	r3, [pc, #48]	@ (8005624 <HAL_RCC_OscConfig+0x270>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a0b      	ldr	r2, [pc, #44]	@ (8005624 <HAL_RCC_OscConfig+0x270>)
 80055f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055fa:	6013      	str	r3, [r2, #0]
 80055fc:	e026      	b.n	800564c <HAL_RCC_OscConfig+0x298>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005606:	d115      	bne.n	8005634 <HAL_RCC_OscConfig+0x280>
 8005608:	4b06      	ldr	r3, [pc, #24]	@ (8005624 <HAL_RCC_OscConfig+0x270>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a05      	ldr	r2, [pc, #20]	@ (8005624 <HAL_RCC_OscConfig+0x270>)
 800560e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005612:	6013      	str	r3, [r2, #0]
 8005614:	4b03      	ldr	r3, [pc, #12]	@ (8005624 <HAL_RCC_OscConfig+0x270>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a02      	ldr	r2, [pc, #8]	@ (8005624 <HAL_RCC_OscConfig+0x270>)
 800561a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800561e:	6013      	str	r3, [r2, #0]
 8005620:	e014      	b.n	800564c <HAL_RCC_OscConfig+0x298>
 8005622:	bf00      	nop
 8005624:	40021000 	.word	0x40021000
 8005628:	080094cc 	.word	0x080094cc
 800562c:	2000020c 	.word	0x2000020c
 8005630:	20000210 	.word	0x20000210
 8005634:	4ba0      	ldr	r3, [pc, #640]	@ (80058b8 <HAL_RCC_OscConfig+0x504>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a9f      	ldr	r2, [pc, #636]	@ (80058b8 <HAL_RCC_OscConfig+0x504>)
 800563a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800563e:	6013      	str	r3, [r2, #0]
 8005640:	4b9d      	ldr	r3, [pc, #628]	@ (80058b8 <HAL_RCC_OscConfig+0x504>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a9c      	ldr	r2, [pc, #624]	@ (80058b8 <HAL_RCC_OscConfig+0x504>)
 8005646:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800564a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d013      	beq.n	800567c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005654:	f7fc fec0 	bl	80023d8 <HAL_GetTick>
 8005658:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800565a:	e008      	b.n	800566e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800565c:	f7fc febc 	bl	80023d8 <HAL_GetTick>
 8005660:	4602      	mov	r2, r0
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	2b64      	cmp	r3, #100	@ 0x64
 8005668:	d901      	bls.n	800566e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800566a:	2303      	movs	r3, #3
 800566c:	e276      	b.n	8005b5c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800566e:	4b92      	ldr	r3, [pc, #584]	@ (80058b8 <HAL_RCC_OscConfig+0x504>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005676:	2b00      	cmp	r3, #0
 8005678:	d0f0      	beq.n	800565c <HAL_RCC_OscConfig+0x2a8>
 800567a:	e014      	b.n	80056a6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800567c:	f7fc feac 	bl	80023d8 <HAL_GetTick>
 8005680:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005682:	e008      	b.n	8005696 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005684:	f7fc fea8 	bl	80023d8 <HAL_GetTick>
 8005688:	4602      	mov	r2, r0
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	1ad3      	subs	r3, r2, r3
 800568e:	2b64      	cmp	r3, #100	@ 0x64
 8005690:	d901      	bls.n	8005696 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005692:	2303      	movs	r3, #3
 8005694:	e262      	b.n	8005b5c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005696:	4b88      	ldr	r3, [pc, #544]	@ (80058b8 <HAL_RCC_OscConfig+0x504>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d1f0      	bne.n	8005684 <HAL_RCC_OscConfig+0x2d0>
 80056a2:	e000      	b.n	80056a6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 0302 	and.w	r3, r3, #2
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d060      	beq.n	8005774 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	2b04      	cmp	r3, #4
 80056b6:	d005      	beq.n	80056c4 <HAL_RCC_OscConfig+0x310>
 80056b8:	69bb      	ldr	r3, [r7, #24]
 80056ba:	2b0c      	cmp	r3, #12
 80056bc:	d119      	bne.n	80056f2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	2b02      	cmp	r3, #2
 80056c2:	d116      	bne.n	80056f2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80056c4:	4b7c      	ldr	r3, [pc, #496]	@ (80058b8 <HAL_RCC_OscConfig+0x504>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d005      	beq.n	80056dc <HAL_RCC_OscConfig+0x328>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d101      	bne.n	80056dc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	e23f      	b.n	8005b5c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056dc:	4b76      	ldr	r3, [pc, #472]	@ (80058b8 <HAL_RCC_OscConfig+0x504>)
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	691b      	ldr	r3, [r3, #16]
 80056e8:	061b      	lsls	r3, r3, #24
 80056ea:	4973      	ldr	r1, [pc, #460]	@ (80058b8 <HAL_RCC_OscConfig+0x504>)
 80056ec:	4313      	orrs	r3, r2
 80056ee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80056f0:	e040      	b.n	8005774 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d023      	beq.n	8005742 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80056fa:	4b6f      	ldr	r3, [pc, #444]	@ (80058b8 <HAL_RCC_OscConfig+0x504>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a6e      	ldr	r2, [pc, #440]	@ (80058b8 <HAL_RCC_OscConfig+0x504>)
 8005700:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005704:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005706:	f7fc fe67 	bl	80023d8 <HAL_GetTick>
 800570a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800570c:	e008      	b.n	8005720 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800570e:	f7fc fe63 	bl	80023d8 <HAL_GetTick>
 8005712:	4602      	mov	r2, r0
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	1ad3      	subs	r3, r2, r3
 8005718:	2b02      	cmp	r3, #2
 800571a:	d901      	bls.n	8005720 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800571c:	2303      	movs	r3, #3
 800571e:	e21d      	b.n	8005b5c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005720:	4b65      	ldr	r3, [pc, #404]	@ (80058b8 <HAL_RCC_OscConfig+0x504>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005728:	2b00      	cmp	r3, #0
 800572a:	d0f0      	beq.n	800570e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800572c:	4b62      	ldr	r3, [pc, #392]	@ (80058b8 <HAL_RCC_OscConfig+0x504>)
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	691b      	ldr	r3, [r3, #16]
 8005738:	061b      	lsls	r3, r3, #24
 800573a:	495f      	ldr	r1, [pc, #380]	@ (80058b8 <HAL_RCC_OscConfig+0x504>)
 800573c:	4313      	orrs	r3, r2
 800573e:	604b      	str	r3, [r1, #4]
 8005740:	e018      	b.n	8005774 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005742:	4b5d      	ldr	r3, [pc, #372]	@ (80058b8 <HAL_RCC_OscConfig+0x504>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a5c      	ldr	r2, [pc, #368]	@ (80058b8 <HAL_RCC_OscConfig+0x504>)
 8005748:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800574c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800574e:	f7fc fe43 	bl	80023d8 <HAL_GetTick>
 8005752:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005754:	e008      	b.n	8005768 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005756:	f7fc fe3f 	bl	80023d8 <HAL_GetTick>
 800575a:	4602      	mov	r2, r0
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	1ad3      	subs	r3, r2, r3
 8005760:	2b02      	cmp	r3, #2
 8005762:	d901      	bls.n	8005768 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005764:	2303      	movs	r3, #3
 8005766:	e1f9      	b.n	8005b5c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005768:	4b53      	ldr	r3, [pc, #332]	@ (80058b8 <HAL_RCC_OscConfig+0x504>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005770:	2b00      	cmp	r3, #0
 8005772:	d1f0      	bne.n	8005756 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f003 0308 	and.w	r3, r3, #8
 800577c:	2b00      	cmp	r3, #0
 800577e:	d03c      	beq.n	80057fa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	695b      	ldr	r3, [r3, #20]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d01c      	beq.n	80057c2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005788:	4b4b      	ldr	r3, [pc, #300]	@ (80058b8 <HAL_RCC_OscConfig+0x504>)
 800578a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800578e:	4a4a      	ldr	r2, [pc, #296]	@ (80058b8 <HAL_RCC_OscConfig+0x504>)
 8005790:	f043 0301 	orr.w	r3, r3, #1
 8005794:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005798:	f7fc fe1e 	bl	80023d8 <HAL_GetTick>
 800579c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800579e:	e008      	b.n	80057b2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057a0:	f7fc fe1a 	bl	80023d8 <HAL_GetTick>
 80057a4:	4602      	mov	r2, r0
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	1ad3      	subs	r3, r2, r3
 80057aa:	2b02      	cmp	r3, #2
 80057ac:	d901      	bls.n	80057b2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80057ae:	2303      	movs	r3, #3
 80057b0:	e1d4      	b.n	8005b5c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80057b2:	4b41      	ldr	r3, [pc, #260]	@ (80058b8 <HAL_RCC_OscConfig+0x504>)
 80057b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057b8:	f003 0302 	and.w	r3, r3, #2
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d0ef      	beq.n	80057a0 <HAL_RCC_OscConfig+0x3ec>
 80057c0:	e01b      	b.n	80057fa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057c2:	4b3d      	ldr	r3, [pc, #244]	@ (80058b8 <HAL_RCC_OscConfig+0x504>)
 80057c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057c8:	4a3b      	ldr	r2, [pc, #236]	@ (80058b8 <HAL_RCC_OscConfig+0x504>)
 80057ca:	f023 0301 	bic.w	r3, r3, #1
 80057ce:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057d2:	f7fc fe01 	bl	80023d8 <HAL_GetTick>
 80057d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80057d8:	e008      	b.n	80057ec <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057da:	f7fc fdfd 	bl	80023d8 <HAL_GetTick>
 80057de:	4602      	mov	r2, r0
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	1ad3      	subs	r3, r2, r3
 80057e4:	2b02      	cmp	r3, #2
 80057e6:	d901      	bls.n	80057ec <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80057e8:	2303      	movs	r3, #3
 80057ea:	e1b7      	b.n	8005b5c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80057ec:	4b32      	ldr	r3, [pc, #200]	@ (80058b8 <HAL_RCC_OscConfig+0x504>)
 80057ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057f2:	f003 0302 	and.w	r3, r3, #2
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d1ef      	bne.n	80057da <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 0304 	and.w	r3, r3, #4
 8005802:	2b00      	cmp	r3, #0
 8005804:	f000 80a6 	beq.w	8005954 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005808:	2300      	movs	r3, #0
 800580a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800580c:	4b2a      	ldr	r3, [pc, #168]	@ (80058b8 <HAL_RCC_OscConfig+0x504>)
 800580e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005810:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005814:	2b00      	cmp	r3, #0
 8005816:	d10d      	bne.n	8005834 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005818:	4b27      	ldr	r3, [pc, #156]	@ (80058b8 <HAL_RCC_OscConfig+0x504>)
 800581a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800581c:	4a26      	ldr	r2, [pc, #152]	@ (80058b8 <HAL_RCC_OscConfig+0x504>)
 800581e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005822:	6593      	str	r3, [r2, #88]	@ 0x58
 8005824:	4b24      	ldr	r3, [pc, #144]	@ (80058b8 <HAL_RCC_OscConfig+0x504>)
 8005826:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005828:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800582c:	60bb      	str	r3, [r7, #8]
 800582e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005830:	2301      	movs	r3, #1
 8005832:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005834:	4b21      	ldr	r3, [pc, #132]	@ (80058bc <HAL_RCC_OscConfig+0x508>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800583c:	2b00      	cmp	r3, #0
 800583e:	d118      	bne.n	8005872 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005840:	4b1e      	ldr	r3, [pc, #120]	@ (80058bc <HAL_RCC_OscConfig+0x508>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a1d      	ldr	r2, [pc, #116]	@ (80058bc <HAL_RCC_OscConfig+0x508>)
 8005846:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800584a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800584c:	f7fc fdc4 	bl	80023d8 <HAL_GetTick>
 8005850:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005852:	e008      	b.n	8005866 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005854:	f7fc fdc0 	bl	80023d8 <HAL_GetTick>
 8005858:	4602      	mov	r2, r0
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	1ad3      	subs	r3, r2, r3
 800585e:	2b02      	cmp	r3, #2
 8005860:	d901      	bls.n	8005866 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005862:	2303      	movs	r3, #3
 8005864:	e17a      	b.n	8005b5c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005866:	4b15      	ldr	r3, [pc, #84]	@ (80058bc <HAL_RCC_OscConfig+0x508>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800586e:	2b00      	cmp	r3, #0
 8005870:	d0f0      	beq.n	8005854 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	2b01      	cmp	r3, #1
 8005878:	d108      	bne.n	800588c <HAL_RCC_OscConfig+0x4d8>
 800587a:	4b0f      	ldr	r3, [pc, #60]	@ (80058b8 <HAL_RCC_OscConfig+0x504>)
 800587c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005880:	4a0d      	ldr	r2, [pc, #52]	@ (80058b8 <HAL_RCC_OscConfig+0x504>)
 8005882:	f043 0301 	orr.w	r3, r3, #1
 8005886:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800588a:	e029      	b.n	80058e0 <HAL_RCC_OscConfig+0x52c>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	2b05      	cmp	r3, #5
 8005892:	d115      	bne.n	80058c0 <HAL_RCC_OscConfig+0x50c>
 8005894:	4b08      	ldr	r3, [pc, #32]	@ (80058b8 <HAL_RCC_OscConfig+0x504>)
 8005896:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800589a:	4a07      	ldr	r2, [pc, #28]	@ (80058b8 <HAL_RCC_OscConfig+0x504>)
 800589c:	f043 0304 	orr.w	r3, r3, #4
 80058a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80058a4:	4b04      	ldr	r3, [pc, #16]	@ (80058b8 <HAL_RCC_OscConfig+0x504>)
 80058a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058aa:	4a03      	ldr	r2, [pc, #12]	@ (80058b8 <HAL_RCC_OscConfig+0x504>)
 80058ac:	f043 0301 	orr.w	r3, r3, #1
 80058b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80058b4:	e014      	b.n	80058e0 <HAL_RCC_OscConfig+0x52c>
 80058b6:	bf00      	nop
 80058b8:	40021000 	.word	0x40021000
 80058bc:	40007000 	.word	0x40007000
 80058c0:	4b9c      	ldr	r3, [pc, #624]	@ (8005b34 <HAL_RCC_OscConfig+0x780>)
 80058c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058c6:	4a9b      	ldr	r2, [pc, #620]	@ (8005b34 <HAL_RCC_OscConfig+0x780>)
 80058c8:	f023 0301 	bic.w	r3, r3, #1
 80058cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80058d0:	4b98      	ldr	r3, [pc, #608]	@ (8005b34 <HAL_RCC_OscConfig+0x780>)
 80058d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058d6:	4a97      	ldr	r2, [pc, #604]	@ (8005b34 <HAL_RCC_OscConfig+0x780>)
 80058d8:	f023 0304 	bic.w	r3, r3, #4
 80058dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d016      	beq.n	8005916 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058e8:	f7fc fd76 	bl	80023d8 <HAL_GetTick>
 80058ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058ee:	e00a      	b.n	8005906 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058f0:	f7fc fd72 	bl	80023d8 <HAL_GetTick>
 80058f4:	4602      	mov	r2, r0
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	1ad3      	subs	r3, r2, r3
 80058fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058fe:	4293      	cmp	r3, r2
 8005900:	d901      	bls.n	8005906 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005902:	2303      	movs	r3, #3
 8005904:	e12a      	b.n	8005b5c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005906:	4b8b      	ldr	r3, [pc, #556]	@ (8005b34 <HAL_RCC_OscConfig+0x780>)
 8005908:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800590c:	f003 0302 	and.w	r3, r3, #2
 8005910:	2b00      	cmp	r3, #0
 8005912:	d0ed      	beq.n	80058f0 <HAL_RCC_OscConfig+0x53c>
 8005914:	e015      	b.n	8005942 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005916:	f7fc fd5f 	bl	80023d8 <HAL_GetTick>
 800591a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800591c:	e00a      	b.n	8005934 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800591e:	f7fc fd5b 	bl	80023d8 <HAL_GetTick>
 8005922:	4602      	mov	r2, r0
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	1ad3      	subs	r3, r2, r3
 8005928:	f241 3288 	movw	r2, #5000	@ 0x1388
 800592c:	4293      	cmp	r3, r2
 800592e:	d901      	bls.n	8005934 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005930:	2303      	movs	r3, #3
 8005932:	e113      	b.n	8005b5c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005934:	4b7f      	ldr	r3, [pc, #508]	@ (8005b34 <HAL_RCC_OscConfig+0x780>)
 8005936:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800593a:	f003 0302 	and.w	r3, r3, #2
 800593e:	2b00      	cmp	r3, #0
 8005940:	d1ed      	bne.n	800591e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005942:	7ffb      	ldrb	r3, [r7, #31]
 8005944:	2b01      	cmp	r3, #1
 8005946:	d105      	bne.n	8005954 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005948:	4b7a      	ldr	r3, [pc, #488]	@ (8005b34 <HAL_RCC_OscConfig+0x780>)
 800594a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800594c:	4a79      	ldr	r2, [pc, #484]	@ (8005b34 <HAL_RCC_OscConfig+0x780>)
 800594e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005952:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005958:	2b00      	cmp	r3, #0
 800595a:	f000 80fe 	beq.w	8005b5a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005962:	2b02      	cmp	r3, #2
 8005964:	f040 80d0 	bne.w	8005b08 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005968:	4b72      	ldr	r3, [pc, #456]	@ (8005b34 <HAL_RCC_OscConfig+0x780>)
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	f003 0203 	and.w	r2, r3, #3
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005978:	429a      	cmp	r2, r3
 800597a:	d130      	bne.n	80059de <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005986:	3b01      	subs	r3, #1
 8005988:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800598a:	429a      	cmp	r2, r3
 800598c:	d127      	bne.n	80059de <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005998:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800599a:	429a      	cmp	r2, r3
 800599c:	d11f      	bne.n	80059de <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059a4:	687a      	ldr	r2, [r7, #4]
 80059a6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80059a8:	2a07      	cmp	r2, #7
 80059aa:	bf14      	ite	ne
 80059ac:	2201      	movne	r2, #1
 80059ae:	2200      	moveq	r2, #0
 80059b0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d113      	bne.n	80059de <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059c0:	085b      	lsrs	r3, r3, #1
 80059c2:	3b01      	subs	r3, #1
 80059c4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d109      	bne.n	80059de <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059d4:	085b      	lsrs	r3, r3, #1
 80059d6:	3b01      	subs	r3, #1
 80059d8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80059da:	429a      	cmp	r2, r3
 80059dc:	d06e      	beq.n	8005abc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80059de:	69bb      	ldr	r3, [r7, #24]
 80059e0:	2b0c      	cmp	r3, #12
 80059e2:	d069      	beq.n	8005ab8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80059e4:	4b53      	ldr	r3, [pc, #332]	@ (8005b34 <HAL_RCC_OscConfig+0x780>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d105      	bne.n	80059fc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80059f0:	4b50      	ldr	r3, [pc, #320]	@ (8005b34 <HAL_RCC_OscConfig+0x780>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d001      	beq.n	8005a00 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	e0ad      	b.n	8005b5c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005a00:	4b4c      	ldr	r3, [pc, #304]	@ (8005b34 <HAL_RCC_OscConfig+0x780>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a4b      	ldr	r2, [pc, #300]	@ (8005b34 <HAL_RCC_OscConfig+0x780>)
 8005a06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005a0a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005a0c:	f7fc fce4 	bl	80023d8 <HAL_GetTick>
 8005a10:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a12:	e008      	b.n	8005a26 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a14:	f7fc fce0 	bl	80023d8 <HAL_GetTick>
 8005a18:	4602      	mov	r2, r0
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	1ad3      	subs	r3, r2, r3
 8005a1e:	2b02      	cmp	r3, #2
 8005a20:	d901      	bls.n	8005a26 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8005a22:	2303      	movs	r3, #3
 8005a24:	e09a      	b.n	8005b5c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a26:	4b43      	ldr	r3, [pc, #268]	@ (8005b34 <HAL_RCC_OscConfig+0x780>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d1f0      	bne.n	8005a14 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a32:	4b40      	ldr	r3, [pc, #256]	@ (8005b34 <HAL_RCC_OscConfig+0x780>)
 8005a34:	68da      	ldr	r2, [r3, #12]
 8005a36:	4b40      	ldr	r3, [pc, #256]	@ (8005b38 <HAL_RCC_OscConfig+0x784>)
 8005a38:	4013      	ands	r3, r2
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005a42:	3a01      	subs	r2, #1
 8005a44:	0112      	lsls	r2, r2, #4
 8005a46:	4311      	orrs	r1, r2
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005a4c:	0212      	lsls	r2, r2, #8
 8005a4e:	4311      	orrs	r1, r2
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005a54:	0852      	lsrs	r2, r2, #1
 8005a56:	3a01      	subs	r2, #1
 8005a58:	0552      	lsls	r2, r2, #21
 8005a5a:	4311      	orrs	r1, r2
 8005a5c:	687a      	ldr	r2, [r7, #4]
 8005a5e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005a60:	0852      	lsrs	r2, r2, #1
 8005a62:	3a01      	subs	r2, #1
 8005a64:	0652      	lsls	r2, r2, #25
 8005a66:	4311      	orrs	r1, r2
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005a6c:	0912      	lsrs	r2, r2, #4
 8005a6e:	0452      	lsls	r2, r2, #17
 8005a70:	430a      	orrs	r2, r1
 8005a72:	4930      	ldr	r1, [pc, #192]	@ (8005b34 <HAL_RCC_OscConfig+0x780>)
 8005a74:	4313      	orrs	r3, r2
 8005a76:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005a78:	4b2e      	ldr	r3, [pc, #184]	@ (8005b34 <HAL_RCC_OscConfig+0x780>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a2d      	ldr	r2, [pc, #180]	@ (8005b34 <HAL_RCC_OscConfig+0x780>)
 8005a7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005a82:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005a84:	4b2b      	ldr	r3, [pc, #172]	@ (8005b34 <HAL_RCC_OscConfig+0x780>)
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	4a2a      	ldr	r2, [pc, #168]	@ (8005b34 <HAL_RCC_OscConfig+0x780>)
 8005a8a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005a8e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005a90:	f7fc fca2 	bl	80023d8 <HAL_GetTick>
 8005a94:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a96:	e008      	b.n	8005aaa <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a98:	f7fc fc9e 	bl	80023d8 <HAL_GetTick>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	1ad3      	subs	r3, r2, r3
 8005aa2:	2b02      	cmp	r3, #2
 8005aa4:	d901      	bls.n	8005aaa <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005aa6:	2303      	movs	r3, #3
 8005aa8:	e058      	b.n	8005b5c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005aaa:	4b22      	ldr	r3, [pc, #136]	@ (8005b34 <HAL_RCC_OscConfig+0x780>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d0f0      	beq.n	8005a98 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005ab6:	e050      	b.n	8005b5a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	e04f      	b.n	8005b5c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005abc:	4b1d      	ldr	r3, [pc, #116]	@ (8005b34 <HAL_RCC_OscConfig+0x780>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d148      	bne.n	8005b5a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005ac8:	4b1a      	ldr	r3, [pc, #104]	@ (8005b34 <HAL_RCC_OscConfig+0x780>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a19      	ldr	r2, [pc, #100]	@ (8005b34 <HAL_RCC_OscConfig+0x780>)
 8005ace:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005ad2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005ad4:	4b17      	ldr	r3, [pc, #92]	@ (8005b34 <HAL_RCC_OscConfig+0x780>)
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	4a16      	ldr	r2, [pc, #88]	@ (8005b34 <HAL_RCC_OscConfig+0x780>)
 8005ada:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005ade:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005ae0:	f7fc fc7a 	bl	80023d8 <HAL_GetTick>
 8005ae4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ae6:	e008      	b.n	8005afa <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ae8:	f7fc fc76 	bl	80023d8 <HAL_GetTick>
 8005aec:	4602      	mov	r2, r0
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	1ad3      	subs	r3, r2, r3
 8005af2:	2b02      	cmp	r3, #2
 8005af4:	d901      	bls.n	8005afa <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005af6:	2303      	movs	r3, #3
 8005af8:	e030      	b.n	8005b5c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005afa:	4b0e      	ldr	r3, [pc, #56]	@ (8005b34 <HAL_RCC_OscConfig+0x780>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d0f0      	beq.n	8005ae8 <HAL_RCC_OscConfig+0x734>
 8005b06:	e028      	b.n	8005b5a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005b08:	69bb      	ldr	r3, [r7, #24]
 8005b0a:	2b0c      	cmp	r3, #12
 8005b0c:	d023      	beq.n	8005b56 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b0e:	4b09      	ldr	r3, [pc, #36]	@ (8005b34 <HAL_RCC_OscConfig+0x780>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a08      	ldr	r2, [pc, #32]	@ (8005b34 <HAL_RCC_OscConfig+0x780>)
 8005b14:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005b18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b1a:	f7fc fc5d 	bl	80023d8 <HAL_GetTick>
 8005b1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b20:	e00c      	b.n	8005b3c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b22:	f7fc fc59 	bl	80023d8 <HAL_GetTick>
 8005b26:	4602      	mov	r2, r0
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	2b02      	cmp	r3, #2
 8005b2e:	d905      	bls.n	8005b3c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005b30:	2303      	movs	r3, #3
 8005b32:	e013      	b.n	8005b5c <HAL_RCC_OscConfig+0x7a8>
 8005b34:	40021000 	.word	0x40021000
 8005b38:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b3c:	4b09      	ldr	r3, [pc, #36]	@ (8005b64 <HAL_RCC_OscConfig+0x7b0>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d1ec      	bne.n	8005b22 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005b48:	4b06      	ldr	r3, [pc, #24]	@ (8005b64 <HAL_RCC_OscConfig+0x7b0>)
 8005b4a:	68da      	ldr	r2, [r3, #12]
 8005b4c:	4905      	ldr	r1, [pc, #20]	@ (8005b64 <HAL_RCC_OscConfig+0x7b0>)
 8005b4e:	4b06      	ldr	r3, [pc, #24]	@ (8005b68 <HAL_RCC_OscConfig+0x7b4>)
 8005b50:	4013      	ands	r3, r2
 8005b52:	60cb      	str	r3, [r1, #12]
 8005b54:	e001      	b.n	8005b5a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e000      	b.n	8005b5c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8005b5a:	2300      	movs	r3, #0
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3720      	adds	r7, #32
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}
 8005b64:	40021000 	.word	0x40021000
 8005b68:	feeefffc 	.word	0xfeeefffc

08005b6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b084      	sub	sp, #16
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d101      	bne.n	8005b80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	e0e7      	b.n	8005d50 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005b80:	4b75      	ldr	r3, [pc, #468]	@ (8005d58 <HAL_RCC_ClockConfig+0x1ec>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 0307 	and.w	r3, r3, #7
 8005b88:	683a      	ldr	r2, [r7, #0]
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d910      	bls.n	8005bb0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b8e:	4b72      	ldr	r3, [pc, #456]	@ (8005d58 <HAL_RCC_ClockConfig+0x1ec>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f023 0207 	bic.w	r2, r3, #7
 8005b96:	4970      	ldr	r1, [pc, #448]	@ (8005d58 <HAL_RCC_ClockConfig+0x1ec>)
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b9e:	4b6e      	ldr	r3, [pc, #440]	@ (8005d58 <HAL_RCC_ClockConfig+0x1ec>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f003 0307 	and.w	r3, r3, #7
 8005ba6:	683a      	ldr	r2, [r7, #0]
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d001      	beq.n	8005bb0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	e0cf      	b.n	8005d50 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f003 0302 	and.w	r3, r3, #2
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d010      	beq.n	8005bde <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	689a      	ldr	r2, [r3, #8]
 8005bc0:	4b66      	ldr	r3, [pc, #408]	@ (8005d5c <HAL_RCC_ClockConfig+0x1f0>)
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	d908      	bls.n	8005bde <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bcc:	4b63      	ldr	r3, [pc, #396]	@ (8005d5c <HAL_RCC_ClockConfig+0x1f0>)
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	4960      	ldr	r1, [pc, #384]	@ (8005d5c <HAL_RCC_ClockConfig+0x1f0>)
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f003 0301 	and.w	r3, r3, #1
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d04c      	beq.n	8005c84 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	2b03      	cmp	r3, #3
 8005bf0:	d107      	bne.n	8005c02 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bf2:	4b5a      	ldr	r3, [pc, #360]	@ (8005d5c <HAL_RCC_ClockConfig+0x1f0>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d121      	bne.n	8005c42 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e0a6      	b.n	8005d50 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	2b02      	cmp	r3, #2
 8005c08:	d107      	bne.n	8005c1a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c0a:	4b54      	ldr	r3, [pc, #336]	@ (8005d5c <HAL_RCC_ClockConfig+0x1f0>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d115      	bne.n	8005c42 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	e09a      	b.n	8005d50 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d107      	bne.n	8005c32 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005c22:	4b4e      	ldr	r3, [pc, #312]	@ (8005d5c <HAL_RCC_ClockConfig+0x1f0>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f003 0302 	and.w	r3, r3, #2
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d109      	bne.n	8005c42 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e08e      	b.n	8005d50 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c32:	4b4a      	ldr	r3, [pc, #296]	@ (8005d5c <HAL_RCC_ClockConfig+0x1f0>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d101      	bne.n	8005c42 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e086      	b.n	8005d50 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005c42:	4b46      	ldr	r3, [pc, #280]	@ (8005d5c <HAL_RCC_ClockConfig+0x1f0>)
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	f023 0203 	bic.w	r2, r3, #3
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	4943      	ldr	r1, [pc, #268]	@ (8005d5c <HAL_RCC_ClockConfig+0x1f0>)
 8005c50:	4313      	orrs	r3, r2
 8005c52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c54:	f7fc fbc0 	bl	80023d8 <HAL_GetTick>
 8005c58:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c5a:	e00a      	b.n	8005c72 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c5c:	f7fc fbbc 	bl	80023d8 <HAL_GetTick>
 8005c60:	4602      	mov	r2, r0
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	1ad3      	subs	r3, r2, r3
 8005c66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d901      	bls.n	8005c72 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005c6e:	2303      	movs	r3, #3
 8005c70:	e06e      	b.n	8005d50 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c72:	4b3a      	ldr	r3, [pc, #232]	@ (8005d5c <HAL_RCC_ClockConfig+0x1f0>)
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	f003 020c 	and.w	r2, r3, #12
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d1eb      	bne.n	8005c5c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 0302 	and.w	r3, r3, #2
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d010      	beq.n	8005cb2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	689a      	ldr	r2, [r3, #8]
 8005c94:	4b31      	ldr	r3, [pc, #196]	@ (8005d5c <HAL_RCC_ClockConfig+0x1f0>)
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d208      	bcs.n	8005cb2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ca0:	4b2e      	ldr	r3, [pc, #184]	@ (8005d5c <HAL_RCC_ClockConfig+0x1f0>)
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	492b      	ldr	r1, [pc, #172]	@ (8005d5c <HAL_RCC_ClockConfig+0x1f0>)
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005cb2:	4b29      	ldr	r3, [pc, #164]	@ (8005d58 <HAL_RCC_ClockConfig+0x1ec>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f003 0307 	and.w	r3, r3, #7
 8005cba:	683a      	ldr	r2, [r7, #0]
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d210      	bcs.n	8005ce2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cc0:	4b25      	ldr	r3, [pc, #148]	@ (8005d58 <HAL_RCC_ClockConfig+0x1ec>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f023 0207 	bic.w	r2, r3, #7
 8005cc8:	4923      	ldr	r1, [pc, #140]	@ (8005d58 <HAL_RCC_ClockConfig+0x1ec>)
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cd0:	4b21      	ldr	r3, [pc, #132]	@ (8005d58 <HAL_RCC_ClockConfig+0x1ec>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f003 0307 	and.w	r3, r3, #7
 8005cd8:	683a      	ldr	r2, [r7, #0]
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d001      	beq.n	8005ce2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e036      	b.n	8005d50 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f003 0304 	and.w	r3, r3, #4
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d008      	beq.n	8005d00 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005cee:	4b1b      	ldr	r3, [pc, #108]	@ (8005d5c <HAL_RCC_ClockConfig+0x1f0>)
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	4918      	ldr	r1, [pc, #96]	@ (8005d5c <HAL_RCC_ClockConfig+0x1f0>)
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 0308 	and.w	r3, r3, #8
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d009      	beq.n	8005d20 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d0c:	4b13      	ldr	r3, [pc, #76]	@ (8005d5c <HAL_RCC_ClockConfig+0x1f0>)
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	691b      	ldr	r3, [r3, #16]
 8005d18:	00db      	lsls	r3, r3, #3
 8005d1a:	4910      	ldr	r1, [pc, #64]	@ (8005d5c <HAL_RCC_ClockConfig+0x1f0>)
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005d20:	f000 f824 	bl	8005d6c <HAL_RCC_GetSysClockFreq>
 8005d24:	4602      	mov	r2, r0
 8005d26:	4b0d      	ldr	r3, [pc, #52]	@ (8005d5c <HAL_RCC_ClockConfig+0x1f0>)
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	091b      	lsrs	r3, r3, #4
 8005d2c:	f003 030f 	and.w	r3, r3, #15
 8005d30:	490b      	ldr	r1, [pc, #44]	@ (8005d60 <HAL_RCC_ClockConfig+0x1f4>)
 8005d32:	5ccb      	ldrb	r3, [r1, r3]
 8005d34:	f003 031f 	and.w	r3, r3, #31
 8005d38:	fa22 f303 	lsr.w	r3, r2, r3
 8005d3c:	4a09      	ldr	r2, [pc, #36]	@ (8005d64 <HAL_RCC_ClockConfig+0x1f8>)
 8005d3e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005d40:	4b09      	ldr	r3, [pc, #36]	@ (8005d68 <HAL_RCC_ClockConfig+0x1fc>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4618      	mov	r0, r3
 8005d46:	f7fc faf7 	bl	8002338 <HAL_InitTick>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	72fb      	strb	r3, [r7, #11]

  return status;
 8005d4e:	7afb      	ldrb	r3, [r7, #11]
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3710      	adds	r7, #16
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}
 8005d58:	40022000 	.word	0x40022000
 8005d5c:	40021000 	.word	0x40021000
 8005d60:	080094cc 	.word	0x080094cc
 8005d64:	2000020c 	.word	0x2000020c
 8005d68:	20000210 	.word	0x20000210

08005d6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b089      	sub	sp, #36	@ 0x24
 8005d70:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005d72:	2300      	movs	r3, #0
 8005d74:	61fb      	str	r3, [r7, #28]
 8005d76:	2300      	movs	r3, #0
 8005d78:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d7a:	4b3e      	ldr	r3, [pc, #248]	@ (8005e74 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	f003 030c 	and.w	r3, r3, #12
 8005d82:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005d84:	4b3b      	ldr	r3, [pc, #236]	@ (8005e74 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d86:	68db      	ldr	r3, [r3, #12]
 8005d88:	f003 0303 	and.w	r3, r3, #3
 8005d8c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d005      	beq.n	8005da0 <HAL_RCC_GetSysClockFreq+0x34>
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	2b0c      	cmp	r3, #12
 8005d98:	d121      	bne.n	8005dde <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d11e      	bne.n	8005dde <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005da0:	4b34      	ldr	r3, [pc, #208]	@ (8005e74 <HAL_RCC_GetSysClockFreq+0x108>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f003 0308 	and.w	r3, r3, #8
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d107      	bne.n	8005dbc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005dac:	4b31      	ldr	r3, [pc, #196]	@ (8005e74 <HAL_RCC_GetSysClockFreq+0x108>)
 8005dae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005db2:	0a1b      	lsrs	r3, r3, #8
 8005db4:	f003 030f 	and.w	r3, r3, #15
 8005db8:	61fb      	str	r3, [r7, #28]
 8005dba:	e005      	b.n	8005dc8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005dbc:	4b2d      	ldr	r3, [pc, #180]	@ (8005e74 <HAL_RCC_GetSysClockFreq+0x108>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	091b      	lsrs	r3, r3, #4
 8005dc2:	f003 030f 	and.w	r3, r3, #15
 8005dc6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005dc8:	4a2b      	ldr	r2, [pc, #172]	@ (8005e78 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005dca:	69fb      	ldr	r3, [r7, #28]
 8005dcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dd0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d10d      	bne.n	8005df4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005ddc:	e00a      	b.n	8005df4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	2b04      	cmp	r3, #4
 8005de2:	d102      	bne.n	8005dea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005de4:	4b25      	ldr	r3, [pc, #148]	@ (8005e7c <HAL_RCC_GetSysClockFreq+0x110>)
 8005de6:	61bb      	str	r3, [r7, #24]
 8005de8:	e004      	b.n	8005df4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	2b08      	cmp	r3, #8
 8005dee:	d101      	bne.n	8005df4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005df0:	4b23      	ldr	r3, [pc, #140]	@ (8005e80 <HAL_RCC_GetSysClockFreq+0x114>)
 8005df2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	2b0c      	cmp	r3, #12
 8005df8:	d134      	bne.n	8005e64 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005dfa:	4b1e      	ldr	r3, [pc, #120]	@ (8005e74 <HAL_RCC_GetSysClockFreq+0x108>)
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	f003 0303 	and.w	r3, r3, #3
 8005e02:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	2b02      	cmp	r3, #2
 8005e08:	d003      	beq.n	8005e12 <HAL_RCC_GetSysClockFreq+0xa6>
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	2b03      	cmp	r3, #3
 8005e0e:	d003      	beq.n	8005e18 <HAL_RCC_GetSysClockFreq+0xac>
 8005e10:	e005      	b.n	8005e1e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005e12:	4b1a      	ldr	r3, [pc, #104]	@ (8005e7c <HAL_RCC_GetSysClockFreq+0x110>)
 8005e14:	617b      	str	r3, [r7, #20]
      break;
 8005e16:	e005      	b.n	8005e24 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005e18:	4b19      	ldr	r3, [pc, #100]	@ (8005e80 <HAL_RCC_GetSysClockFreq+0x114>)
 8005e1a:	617b      	str	r3, [r7, #20]
      break;
 8005e1c:	e002      	b.n	8005e24 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005e1e:	69fb      	ldr	r3, [r7, #28]
 8005e20:	617b      	str	r3, [r7, #20]
      break;
 8005e22:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005e24:	4b13      	ldr	r3, [pc, #76]	@ (8005e74 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	091b      	lsrs	r3, r3, #4
 8005e2a:	f003 0307 	and.w	r3, r3, #7
 8005e2e:	3301      	adds	r3, #1
 8005e30:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005e32:	4b10      	ldr	r3, [pc, #64]	@ (8005e74 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e34:	68db      	ldr	r3, [r3, #12]
 8005e36:	0a1b      	lsrs	r3, r3, #8
 8005e38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e3c:	697a      	ldr	r2, [r7, #20]
 8005e3e:	fb03 f202 	mul.w	r2, r3, r2
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e48:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005e4a:	4b0a      	ldr	r3, [pc, #40]	@ (8005e74 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e4c:	68db      	ldr	r3, [r3, #12]
 8005e4e:	0e5b      	lsrs	r3, r3, #25
 8005e50:	f003 0303 	and.w	r3, r3, #3
 8005e54:	3301      	adds	r3, #1
 8005e56:	005b      	lsls	r3, r3, #1
 8005e58:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005e5a:	697a      	ldr	r2, [r7, #20]
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e62:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005e64:	69bb      	ldr	r3, [r7, #24]
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3724      	adds	r7, #36	@ 0x24
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr
 8005e72:	bf00      	nop
 8005e74:	40021000 	.word	0x40021000
 8005e78:	080094e4 	.word	0x080094e4
 8005e7c:	00f42400 	.word	0x00f42400
 8005e80:	007a1200 	.word	0x007a1200

08005e84 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e84:	b480      	push	{r7}
 8005e86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e88:	4b03      	ldr	r3, [pc, #12]	@ (8005e98 <HAL_RCC_GetHCLKFreq+0x14>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e94:	4770      	bx	lr
 8005e96:	bf00      	nop
 8005e98:	2000020c 	.word	0x2000020c

08005e9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005ea0:	f7ff fff0 	bl	8005e84 <HAL_RCC_GetHCLKFreq>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	4b06      	ldr	r3, [pc, #24]	@ (8005ec0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	0a1b      	lsrs	r3, r3, #8
 8005eac:	f003 0307 	and.w	r3, r3, #7
 8005eb0:	4904      	ldr	r1, [pc, #16]	@ (8005ec4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005eb2:	5ccb      	ldrb	r3, [r1, r3]
 8005eb4:	f003 031f 	and.w	r3, r3, #31
 8005eb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	bd80      	pop	{r7, pc}
 8005ec0:	40021000 	.word	0x40021000
 8005ec4:	080094dc 	.word	0x080094dc

08005ec8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005ecc:	f7ff ffda 	bl	8005e84 <HAL_RCC_GetHCLKFreq>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	4b06      	ldr	r3, [pc, #24]	@ (8005eec <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	0adb      	lsrs	r3, r3, #11
 8005ed8:	f003 0307 	and.w	r3, r3, #7
 8005edc:	4904      	ldr	r1, [pc, #16]	@ (8005ef0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005ede:	5ccb      	ldrb	r3, [r1, r3]
 8005ee0:	f003 031f 	and.w	r3, r3, #31
 8005ee4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	bd80      	pop	{r7, pc}
 8005eec:	40021000 	.word	0x40021000
 8005ef0:	080094dc 	.word	0x080094dc

08005ef4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b086      	sub	sp, #24
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005efc:	2300      	movs	r3, #0
 8005efe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005f00:	4b2a      	ldr	r3, [pc, #168]	@ (8005fac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d003      	beq.n	8005f14 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005f0c:	f7ff f9ee 	bl	80052ec <HAL_PWREx_GetVoltageRange>
 8005f10:	6178      	str	r0, [r7, #20]
 8005f12:	e014      	b.n	8005f3e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005f14:	4b25      	ldr	r3, [pc, #148]	@ (8005fac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f18:	4a24      	ldr	r2, [pc, #144]	@ (8005fac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f1e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005f20:	4b22      	ldr	r3, [pc, #136]	@ (8005fac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f28:	60fb      	str	r3, [r7, #12]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005f2c:	f7ff f9de 	bl	80052ec <HAL_PWREx_GetVoltageRange>
 8005f30:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005f32:	4b1e      	ldr	r3, [pc, #120]	@ (8005fac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f36:	4a1d      	ldr	r2, [pc, #116]	@ (8005fac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f38:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005f3c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f44:	d10b      	bne.n	8005f5e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2b80      	cmp	r3, #128	@ 0x80
 8005f4a:	d919      	bls.n	8005f80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2ba0      	cmp	r3, #160	@ 0xa0
 8005f50:	d902      	bls.n	8005f58 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005f52:	2302      	movs	r3, #2
 8005f54:	613b      	str	r3, [r7, #16]
 8005f56:	e013      	b.n	8005f80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005f58:	2301      	movs	r3, #1
 8005f5a:	613b      	str	r3, [r7, #16]
 8005f5c:	e010      	b.n	8005f80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2b80      	cmp	r3, #128	@ 0x80
 8005f62:	d902      	bls.n	8005f6a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005f64:	2303      	movs	r3, #3
 8005f66:	613b      	str	r3, [r7, #16]
 8005f68:	e00a      	b.n	8005f80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2b80      	cmp	r3, #128	@ 0x80
 8005f6e:	d102      	bne.n	8005f76 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005f70:	2302      	movs	r3, #2
 8005f72:	613b      	str	r3, [r7, #16]
 8005f74:	e004      	b.n	8005f80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2b70      	cmp	r3, #112	@ 0x70
 8005f7a:	d101      	bne.n	8005f80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005f80:	4b0b      	ldr	r3, [pc, #44]	@ (8005fb0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f023 0207 	bic.w	r2, r3, #7
 8005f88:	4909      	ldr	r1, [pc, #36]	@ (8005fb0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005f90:	4b07      	ldr	r3, [pc, #28]	@ (8005fb0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f003 0307 	and.w	r3, r3, #7
 8005f98:	693a      	ldr	r2, [r7, #16]
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d001      	beq.n	8005fa2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e000      	b.n	8005fa4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005fa2:	2300      	movs	r3, #0
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3718      	adds	r7, #24
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}
 8005fac:	40021000 	.word	0x40021000
 8005fb0:	40022000 	.word	0x40022000

08005fb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b086      	sub	sp, #24
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d041      	beq.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005fd4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005fd8:	d02a      	beq.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005fda:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005fde:	d824      	bhi.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005fe0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005fe4:	d008      	beq.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005fe6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005fea:	d81e      	bhi.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d00a      	beq.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005ff0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005ff4:	d010      	beq.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005ff6:	e018      	b.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005ff8:	4b86      	ldr	r3, [pc, #536]	@ (8006214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ffa:	68db      	ldr	r3, [r3, #12]
 8005ffc:	4a85      	ldr	r2, [pc, #532]	@ (8006214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ffe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006002:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006004:	e015      	b.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	3304      	adds	r3, #4
 800600a:	2100      	movs	r1, #0
 800600c:	4618      	mov	r0, r3
 800600e:	f000 fabb 	bl	8006588 <RCCEx_PLLSAI1_Config>
 8006012:	4603      	mov	r3, r0
 8006014:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006016:	e00c      	b.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	3320      	adds	r3, #32
 800601c:	2100      	movs	r1, #0
 800601e:	4618      	mov	r0, r3
 8006020:	f000 fba6 	bl	8006770 <RCCEx_PLLSAI2_Config>
 8006024:	4603      	mov	r3, r0
 8006026:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006028:	e003      	b.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800602a:	2301      	movs	r3, #1
 800602c:	74fb      	strb	r3, [r7, #19]
      break;
 800602e:	e000      	b.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006030:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006032:	7cfb      	ldrb	r3, [r7, #19]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d10b      	bne.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006038:	4b76      	ldr	r3, [pc, #472]	@ (8006214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800603a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800603e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006046:	4973      	ldr	r1, [pc, #460]	@ (8006214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006048:	4313      	orrs	r3, r2
 800604a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800604e:	e001      	b.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006050:	7cfb      	ldrb	r3, [r7, #19]
 8006052:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800605c:	2b00      	cmp	r3, #0
 800605e:	d041      	beq.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006064:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006068:	d02a      	beq.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800606a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800606e:	d824      	bhi.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006070:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006074:	d008      	beq.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006076:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800607a:	d81e      	bhi.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x106>
 800607c:	2b00      	cmp	r3, #0
 800607e:	d00a      	beq.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8006080:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006084:	d010      	beq.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006086:	e018      	b.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006088:	4b62      	ldr	r3, [pc, #392]	@ (8006214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	4a61      	ldr	r2, [pc, #388]	@ (8006214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800608e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006092:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006094:	e015      	b.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	3304      	adds	r3, #4
 800609a:	2100      	movs	r1, #0
 800609c:	4618      	mov	r0, r3
 800609e:	f000 fa73 	bl	8006588 <RCCEx_PLLSAI1_Config>
 80060a2:	4603      	mov	r3, r0
 80060a4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80060a6:	e00c      	b.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	3320      	adds	r3, #32
 80060ac:	2100      	movs	r1, #0
 80060ae:	4618      	mov	r0, r3
 80060b0:	f000 fb5e 	bl	8006770 <RCCEx_PLLSAI2_Config>
 80060b4:	4603      	mov	r3, r0
 80060b6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80060b8:	e003      	b.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	74fb      	strb	r3, [r7, #19]
      break;
 80060be:	e000      	b.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80060c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060c2:	7cfb      	ldrb	r3, [r7, #19]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d10b      	bne.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80060c8:	4b52      	ldr	r3, [pc, #328]	@ (8006214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060ce:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80060d6:	494f      	ldr	r1, [pc, #316]	@ (8006214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060d8:	4313      	orrs	r3, r2
 80060da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80060de:	e001      	b.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060e0:	7cfb      	ldrb	r3, [r7, #19]
 80060e2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	f000 80a0 	beq.w	8006232 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80060f2:	2300      	movs	r3, #0
 80060f4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80060f6:	4b47      	ldr	r3, [pc, #284]	@ (8006214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d101      	bne.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8006102:	2301      	movs	r3, #1
 8006104:	e000      	b.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8006106:	2300      	movs	r3, #0
 8006108:	2b00      	cmp	r3, #0
 800610a:	d00d      	beq.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800610c:	4b41      	ldr	r3, [pc, #260]	@ (8006214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800610e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006110:	4a40      	ldr	r2, [pc, #256]	@ (8006214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006112:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006116:	6593      	str	r3, [r2, #88]	@ 0x58
 8006118:	4b3e      	ldr	r3, [pc, #248]	@ (8006214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800611a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800611c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006120:	60bb      	str	r3, [r7, #8]
 8006122:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006124:	2301      	movs	r3, #1
 8006126:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006128:	4b3b      	ldr	r3, [pc, #236]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a3a      	ldr	r2, [pc, #232]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800612e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006132:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006134:	f7fc f950 	bl	80023d8 <HAL_GetTick>
 8006138:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800613a:	e009      	b.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800613c:	f7fc f94c 	bl	80023d8 <HAL_GetTick>
 8006140:	4602      	mov	r2, r0
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	1ad3      	subs	r3, r2, r3
 8006146:	2b02      	cmp	r3, #2
 8006148:	d902      	bls.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800614a:	2303      	movs	r3, #3
 800614c:	74fb      	strb	r3, [r7, #19]
        break;
 800614e:	e005      	b.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006150:	4b31      	ldr	r3, [pc, #196]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006158:	2b00      	cmp	r3, #0
 800615a:	d0ef      	beq.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800615c:	7cfb      	ldrb	r3, [r7, #19]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d15c      	bne.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006162:	4b2c      	ldr	r3, [pc, #176]	@ (8006214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006164:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006168:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800616c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d01f      	beq.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800617a:	697a      	ldr	r2, [r7, #20]
 800617c:	429a      	cmp	r2, r3
 800617e:	d019      	beq.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006180:	4b24      	ldr	r3, [pc, #144]	@ (8006214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006182:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006186:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800618a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800618c:	4b21      	ldr	r3, [pc, #132]	@ (8006214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800618e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006192:	4a20      	ldr	r2, [pc, #128]	@ (8006214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006194:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006198:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800619c:	4b1d      	ldr	r3, [pc, #116]	@ (8006214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800619e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061a2:	4a1c      	ldr	r2, [pc, #112]	@ (8006214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80061a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80061ac:	4a19      	ldr	r2, [pc, #100]	@ (8006214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	f003 0301 	and.w	r3, r3, #1
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d016      	beq.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061be:	f7fc f90b 	bl	80023d8 <HAL_GetTick>
 80061c2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80061c4:	e00b      	b.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061c6:	f7fc f907 	bl	80023d8 <HAL_GetTick>
 80061ca:	4602      	mov	r2, r0
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	1ad3      	subs	r3, r2, r3
 80061d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d902      	bls.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80061d8:	2303      	movs	r3, #3
 80061da:	74fb      	strb	r3, [r7, #19]
            break;
 80061dc:	e006      	b.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80061de:	4b0d      	ldr	r3, [pc, #52]	@ (8006214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061e4:	f003 0302 	and.w	r3, r3, #2
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d0ec      	beq.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80061ec:	7cfb      	ldrb	r3, [r7, #19]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d10c      	bne.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80061f2:	4b08      	ldr	r3, [pc, #32]	@ (8006214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061f8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006202:	4904      	ldr	r1, [pc, #16]	@ (8006214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006204:	4313      	orrs	r3, r2
 8006206:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800620a:	e009      	b.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800620c:	7cfb      	ldrb	r3, [r7, #19]
 800620e:	74bb      	strb	r3, [r7, #18]
 8006210:	e006      	b.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8006212:	bf00      	nop
 8006214:	40021000 	.word	0x40021000
 8006218:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800621c:	7cfb      	ldrb	r3, [r7, #19]
 800621e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006220:	7c7b      	ldrb	r3, [r7, #17]
 8006222:	2b01      	cmp	r3, #1
 8006224:	d105      	bne.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006226:	4b9e      	ldr	r3, [pc, #632]	@ (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006228:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800622a:	4a9d      	ldr	r2, [pc, #628]	@ (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800622c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006230:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f003 0301 	and.w	r3, r3, #1
 800623a:	2b00      	cmp	r3, #0
 800623c:	d00a      	beq.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800623e:	4b98      	ldr	r3, [pc, #608]	@ (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006240:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006244:	f023 0203 	bic.w	r2, r3, #3
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800624c:	4994      	ldr	r1, [pc, #592]	@ (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800624e:	4313      	orrs	r3, r2
 8006250:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f003 0302 	and.w	r3, r3, #2
 800625c:	2b00      	cmp	r3, #0
 800625e:	d00a      	beq.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006260:	4b8f      	ldr	r3, [pc, #572]	@ (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006262:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006266:	f023 020c 	bic.w	r2, r3, #12
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800626e:	498c      	ldr	r1, [pc, #560]	@ (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006270:	4313      	orrs	r3, r2
 8006272:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f003 0304 	and.w	r3, r3, #4
 800627e:	2b00      	cmp	r3, #0
 8006280:	d00a      	beq.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006282:	4b87      	ldr	r3, [pc, #540]	@ (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006284:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006288:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006290:	4983      	ldr	r1, [pc, #524]	@ (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006292:	4313      	orrs	r3, r2
 8006294:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 0308 	and.w	r3, r3, #8
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d00a      	beq.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80062a4:	4b7e      	ldr	r3, [pc, #504]	@ (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062aa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062b2:	497b      	ldr	r1, [pc, #492]	@ (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062b4:	4313      	orrs	r3, r2
 80062b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f003 0310 	and.w	r3, r3, #16
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d00a      	beq.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80062c6:	4b76      	ldr	r3, [pc, #472]	@ (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062cc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062d4:	4972      	ldr	r1, [pc, #456]	@ (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062d6:	4313      	orrs	r3, r2
 80062d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f003 0320 	and.w	r3, r3, #32
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d00a      	beq.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80062e8:	4b6d      	ldr	r3, [pc, #436]	@ (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062ee:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062f6:	496a      	ldr	r1, [pc, #424]	@ (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062f8:	4313      	orrs	r3, r2
 80062fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006306:	2b00      	cmp	r3, #0
 8006308:	d00a      	beq.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800630a:	4b65      	ldr	r3, [pc, #404]	@ (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800630c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006310:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006318:	4961      	ldr	r1, [pc, #388]	@ (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800631a:	4313      	orrs	r3, r2
 800631c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006328:	2b00      	cmp	r3, #0
 800632a:	d00a      	beq.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800632c:	4b5c      	ldr	r3, [pc, #368]	@ (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800632e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006332:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800633a:	4959      	ldr	r1, [pc, #356]	@ (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800633c:	4313      	orrs	r3, r2
 800633e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800634a:	2b00      	cmp	r3, #0
 800634c:	d00a      	beq.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800634e:	4b54      	ldr	r3, [pc, #336]	@ (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006350:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006354:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800635c:	4950      	ldr	r1, [pc, #320]	@ (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800635e:	4313      	orrs	r3, r2
 8006360:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800636c:	2b00      	cmp	r3, #0
 800636e:	d00a      	beq.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006370:	4b4b      	ldr	r3, [pc, #300]	@ (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006372:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006376:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800637e:	4948      	ldr	r1, [pc, #288]	@ (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006380:	4313      	orrs	r3, r2
 8006382:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800638e:	2b00      	cmp	r3, #0
 8006390:	d00a      	beq.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006392:	4b43      	ldr	r3, [pc, #268]	@ (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006394:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006398:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063a0:	493f      	ldr	r1, [pc, #252]	@ (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063a2:	4313      	orrs	r3, r2
 80063a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d028      	beq.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80063b4:	4b3a      	ldr	r3, [pc, #232]	@ (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063ba:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80063c2:	4937      	ldr	r1, [pc, #220]	@ (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063c4:	4313      	orrs	r3, r2
 80063c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80063ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80063d2:	d106      	bne.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80063d4:	4b32      	ldr	r3, [pc, #200]	@ (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063d6:	68db      	ldr	r3, [r3, #12]
 80063d8:	4a31      	ldr	r2, [pc, #196]	@ (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80063de:	60d3      	str	r3, [r2, #12]
 80063e0:	e011      	b.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80063e6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80063ea:	d10c      	bne.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	3304      	adds	r3, #4
 80063f0:	2101      	movs	r1, #1
 80063f2:	4618      	mov	r0, r3
 80063f4:	f000 f8c8 	bl	8006588 <RCCEx_PLLSAI1_Config>
 80063f8:	4603      	mov	r3, r0
 80063fa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80063fc:	7cfb      	ldrb	r3, [r7, #19]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d001      	beq.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8006402:	7cfb      	ldrb	r3, [r7, #19]
 8006404:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800640e:	2b00      	cmp	r3, #0
 8006410:	d028      	beq.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006412:	4b23      	ldr	r3, [pc, #140]	@ (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006414:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006418:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006420:	491f      	ldr	r1, [pc, #124]	@ (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006422:	4313      	orrs	r3, r2
 8006424:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800642c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006430:	d106      	bne.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006432:	4b1b      	ldr	r3, [pc, #108]	@ (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006434:	68db      	ldr	r3, [r3, #12]
 8006436:	4a1a      	ldr	r2, [pc, #104]	@ (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006438:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800643c:	60d3      	str	r3, [r2, #12]
 800643e:	e011      	b.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006444:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006448:	d10c      	bne.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	3304      	adds	r3, #4
 800644e:	2101      	movs	r1, #1
 8006450:	4618      	mov	r0, r3
 8006452:	f000 f899 	bl	8006588 <RCCEx_PLLSAI1_Config>
 8006456:	4603      	mov	r3, r0
 8006458:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800645a:	7cfb      	ldrb	r3, [r7, #19]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d001      	beq.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8006460:	7cfb      	ldrb	r3, [r7, #19]
 8006462:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800646c:	2b00      	cmp	r3, #0
 800646e:	d02b      	beq.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006470:	4b0b      	ldr	r3, [pc, #44]	@ (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006472:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006476:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800647e:	4908      	ldr	r1, [pc, #32]	@ (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006480:	4313      	orrs	r3, r2
 8006482:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800648a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800648e:	d109      	bne.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006490:	4b03      	ldr	r3, [pc, #12]	@ (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006492:	68db      	ldr	r3, [r3, #12]
 8006494:	4a02      	ldr	r2, [pc, #8]	@ (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006496:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800649a:	60d3      	str	r3, [r2, #12]
 800649c:	e014      	b.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800649e:	bf00      	nop
 80064a0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064a8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80064ac:	d10c      	bne.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	3304      	adds	r3, #4
 80064b2:	2101      	movs	r1, #1
 80064b4:	4618      	mov	r0, r3
 80064b6:	f000 f867 	bl	8006588 <RCCEx_PLLSAI1_Config>
 80064ba:	4603      	mov	r3, r0
 80064bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80064be:	7cfb      	ldrb	r3, [r7, #19]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d001      	beq.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80064c4:	7cfb      	ldrb	r3, [r7, #19]
 80064c6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d02f      	beq.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80064d4:	4b2b      	ldr	r3, [pc, #172]	@ (8006584 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80064d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064da:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80064e2:	4928      	ldr	r1, [pc, #160]	@ (8006584 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80064e4:	4313      	orrs	r3, r2
 80064e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80064ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80064f2:	d10d      	bne.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	3304      	adds	r3, #4
 80064f8:	2102      	movs	r1, #2
 80064fa:	4618      	mov	r0, r3
 80064fc:	f000 f844 	bl	8006588 <RCCEx_PLLSAI1_Config>
 8006500:	4603      	mov	r3, r0
 8006502:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006504:	7cfb      	ldrb	r3, [r7, #19]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d014      	beq.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800650a:	7cfb      	ldrb	r3, [r7, #19]
 800650c:	74bb      	strb	r3, [r7, #18]
 800650e:	e011      	b.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006514:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006518:	d10c      	bne.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	3320      	adds	r3, #32
 800651e:	2102      	movs	r1, #2
 8006520:	4618      	mov	r0, r3
 8006522:	f000 f925 	bl	8006770 <RCCEx_PLLSAI2_Config>
 8006526:	4603      	mov	r3, r0
 8006528:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800652a:	7cfb      	ldrb	r3, [r7, #19]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d001      	beq.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006530:	7cfb      	ldrb	r3, [r7, #19]
 8006532:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800653c:	2b00      	cmp	r3, #0
 800653e:	d00a      	beq.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006540:	4b10      	ldr	r3, [pc, #64]	@ (8006584 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006542:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006546:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800654e:	490d      	ldr	r1, [pc, #52]	@ (8006584 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006550:	4313      	orrs	r3, r2
 8006552:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800655e:	2b00      	cmp	r3, #0
 8006560:	d00b      	beq.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006562:	4b08      	ldr	r3, [pc, #32]	@ (8006584 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006564:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006568:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006572:	4904      	ldr	r1, [pc, #16]	@ (8006584 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006574:	4313      	orrs	r3, r2
 8006576:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800657a:	7cbb      	ldrb	r3, [r7, #18]
}
 800657c:	4618      	mov	r0, r3
 800657e:	3718      	adds	r7, #24
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}
 8006584:	40021000 	.word	0x40021000

08006588 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b084      	sub	sp, #16
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006592:	2300      	movs	r3, #0
 8006594:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006596:	4b75      	ldr	r3, [pc, #468]	@ (800676c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006598:	68db      	ldr	r3, [r3, #12]
 800659a:	f003 0303 	and.w	r3, r3, #3
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d018      	beq.n	80065d4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80065a2:	4b72      	ldr	r3, [pc, #456]	@ (800676c <RCCEx_PLLSAI1_Config+0x1e4>)
 80065a4:	68db      	ldr	r3, [r3, #12]
 80065a6:	f003 0203 	and.w	r2, r3, #3
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	429a      	cmp	r2, r3
 80065b0:	d10d      	bne.n	80065ce <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
       ||
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d009      	beq.n	80065ce <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80065ba:	4b6c      	ldr	r3, [pc, #432]	@ (800676c <RCCEx_PLLSAI1_Config+0x1e4>)
 80065bc:	68db      	ldr	r3, [r3, #12]
 80065be:	091b      	lsrs	r3, r3, #4
 80065c0:	f003 0307 	and.w	r3, r3, #7
 80065c4:	1c5a      	adds	r2, r3, #1
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	685b      	ldr	r3, [r3, #4]
       ||
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d047      	beq.n	800665e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	73fb      	strb	r3, [r7, #15]
 80065d2:	e044      	b.n	800665e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	2b03      	cmp	r3, #3
 80065da:	d018      	beq.n	800660e <RCCEx_PLLSAI1_Config+0x86>
 80065dc:	2b03      	cmp	r3, #3
 80065de:	d825      	bhi.n	800662c <RCCEx_PLLSAI1_Config+0xa4>
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d002      	beq.n	80065ea <RCCEx_PLLSAI1_Config+0x62>
 80065e4:	2b02      	cmp	r3, #2
 80065e6:	d009      	beq.n	80065fc <RCCEx_PLLSAI1_Config+0x74>
 80065e8:	e020      	b.n	800662c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80065ea:	4b60      	ldr	r3, [pc, #384]	@ (800676c <RCCEx_PLLSAI1_Config+0x1e4>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f003 0302 	and.w	r3, r3, #2
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d11d      	bne.n	8006632 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
 80065f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80065fa:	e01a      	b.n	8006632 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80065fc:	4b5b      	ldr	r3, [pc, #364]	@ (800676c <RCCEx_PLLSAI1_Config+0x1e4>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006604:	2b00      	cmp	r3, #0
 8006606:	d116      	bne.n	8006636 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006608:	2301      	movs	r3, #1
 800660a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800660c:	e013      	b.n	8006636 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800660e:	4b57      	ldr	r3, [pc, #348]	@ (800676c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006616:	2b00      	cmp	r3, #0
 8006618:	d10f      	bne.n	800663a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800661a:	4b54      	ldr	r3, [pc, #336]	@ (800676c <RCCEx_PLLSAI1_Config+0x1e4>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006622:	2b00      	cmp	r3, #0
 8006624:	d109      	bne.n	800663a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800662a:	e006      	b.n	800663a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800662c:	2301      	movs	r3, #1
 800662e:	73fb      	strb	r3, [r7, #15]
      break;
 8006630:	e004      	b.n	800663c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006632:	bf00      	nop
 8006634:	e002      	b.n	800663c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006636:	bf00      	nop
 8006638:	e000      	b.n	800663c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800663a:	bf00      	nop
    }

    if(status == HAL_OK)
 800663c:	7bfb      	ldrb	r3, [r7, #15]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d10d      	bne.n	800665e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006642:	4b4a      	ldr	r3, [pc, #296]	@ (800676c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006644:	68db      	ldr	r3, [r3, #12]
 8006646:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6819      	ldr	r1, [r3, #0]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	3b01      	subs	r3, #1
 8006654:	011b      	lsls	r3, r3, #4
 8006656:	430b      	orrs	r3, r1
 8006658:	4944      	ldr	r1, [pc, #272]	@ (800676c <RCCEx_PLLSAI1_Config+0x1e4>)
 800665a:	4313      	orrs	r3, r2
 800665c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800665e:	7bfb      	ldrb	r3, [r7, #15]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d17d      	bne.n	8006760 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006664:	4b41      	ldr	r3, [pc, #260]	@ (800676c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a40      	ldr	r2, [pc, #256]	@ (800676c <RCCEx_PLLSAI1_Config+0x1e4>)
 800666a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800666e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006670:	f7fb feb2 	bl	80023d8 <HAL_GetTick>
 8006674:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006676:	e009      	b.n	800668c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006678:	f7fb feae 	bl	80023d8 <HAL_GetTick>
 800667c:	4602      	mov	r2, r0
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	1ad3      	subs	r3, r2, r3
 8006682:	2b02      	cmp	r3, #2
 8006684:	d902      	bls.n	800668c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006686:	2303      	movs	r3, #3
 8006688:	73fb      	strb	r3, [r7, #15]
        break;
 800668a:	e005      	b.n	8006698 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800668c:	4b37      	ldr	r3, [pc, #220]	@ (800676c <RCCEx_PLLSAI1_Config+0x1e4>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006694:	2b00      	cmp	r3, #0
 8006696:	d1ef      	bne.n	8006678 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006698:	7bfb      	ldrb	r3, [r7, #15]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d160      	bne.n	8006760 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d111      	bne.n	80066c8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80066a4:	4b31      	ldr	r3, [pc, #196]	@ (800676c <RCCEx_PLLSAI1_Config+0x1e4>)
 80066a6:	691b      	ldr	r3, [r3, #16]
 80066a8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80066ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	6892      	ldr	r2, [r2, #8]
 80066b4:	0211      	lsls	r1, r2, #8
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	68d2      	ldr	r2, [r2, #12]
 80066ba:	0912      	lsrs	r2, r2, #4
 80066bc:	0452      	lsls	r2, r2, #17
 80066be:	430a      	orrs	r2, r1
 80066c0:	492a      	ldr	r1, [pc, #168]	@ (800676c <RCCEx_PLLSAI1_Config+0x1e4>)
 80066c2:	4313      	orrs	r3, r2
 80066c4:	610b      	str	r3, [r1, #16]
 80066c6:	e027      	b.n	8006718 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	2b01      	cmp	r3, #1
 80066cc:	d112      	bne.n	80066f4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80066ce:	4b27      	ldr	r3, [pc, #156]	@ (800676c <RCCEx_PLLSAI1_Config+0x1e4>)
 80066d0:	691b      	ldr	r3, [r3, #16]
 80066d2:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80066d6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80066da:	687a      	ldr	r2, [r7, #4]
 80066dc:	6892      	ldr	r2, [r2, #8]
 80066de:	0211      	lsls	r1, r2, #8
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	6912      	ldr	r2, [r2, #16]
 80066e4:	0852      	lsrs	r2, r2, #1
 80066e6:	3a01      	subs	r2, #1
 80066e8:	0552      	lsls	r2, r2, #21
 80066ea:	430a      	orrs	r2, r1
 80066ec:	491f      	ldr	r1, [pc, #124]	@ (800676c <RCCEx_PLLSAI1_Config+0x1e4>)
 80066ee:	4313      	orrs	r3, r2
 80066f0:	610b      	str	r3, [r1, #16]
 80066f2:	e011      	b.n	8006718 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80066f4:	4b1d      	ldr	r3, [pc, #116]	@ (800676c <RCCEx_PLLSAI1_Config+0x1e4>)
 80066f6:	691b      	ldr	r3, [r3, #16]
 80066f8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80066fc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	6892      	ldr	r2, [r2, #8]
 8006704:	0211      	lsls	r1, r2, #8
 8006706:	687a      	ldr	r2, [r7, #4]
 8006708:	6952      	ldr	r2, [r2, #20]
 800670a:	0852      	lsrs	r2, r2, #1
 800670c:	3a01      	subs	r2, #1
 800670e:	0652      	lsls	r2, r2, #25
 8006710:	430a      	orrs	r2, r1
 8006712:	4916      	ldr	r1, [pc, #88]	@ (800676c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006714:	4313      	orrs	r3, r2
 8006716:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006718:	4b14      	ldr	r3, [pc, #80]	@ (800676c <RCCEx_PLLSAI1_Config+0x1e4>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a13      	ldr	r2, [pc, #76]	@ (800676c <RCCEx_PLLSAI1_Config+0x1e4>)
 800671e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006722:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006724:	f7fb fe58 	bl	80023d8 <HAL_GetTick>
 8006728:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800672a:	e009      	b.n	8006740 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800672c:	f7fb fe54 	bl	80023d8 <HAL_GetTick>
 8006730:	4602      	mov	r2, r0
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	1ad3      	subs	r3, r2, r3
 8006736:	2b02      	cmp	r3, #2
 8006738:	d902      	bls.n	8006740 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800673a:	2303      	movs	r3, #3
 800673c:	73fb      	strb	r3, [r7, #15]
          break;
 800673e:	e005      	b.n	800674c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006740:	4b0a      	ldr	r3, [pc, #40]	@ (800676c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006748:	2b00      	cmp	r3, #0
 800674a:	d0ef      	beq.n	800672c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800674c:	7bfb      	ldrb	r3, [r7, #15]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d106      	bne.n	8006760 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006752:	4b06      	ldr	r3, [pc, #24]	@ (800676c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006754:	691a      	ldr	r2, [r3, #16]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	699b      	ldr	r3, [r3, #24]
 800675a:	4904      	ldr	r1, [pc, #16]	@ (800676c <RCCEx_PLLSAI1_Config+0x1e4>)
 800675c:	4313      	orrs	r3, r2
 800675e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006760:	7bfb      	ldrb	r3, [r7, #15]
}
 8006762:	4618      	mov	r0, r3
 8006764:	3710      	adds	r7, #16
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}
 800676a:	bf00      	nop
 800676c:	40021000 	.word	0x40021000

08006770 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b084      	sub	sp, #16
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800677a:	2300      	movs	r3, #0
 800677c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800677e:	4b6a      	ldr	r3, [pc, #424]	@ (8006928 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006780:	68db      	ldr	r3, [r3, #12]
 8006782:	f003 0303 	and.w	r3, r3, #3
 8006786:	2b00      	cmp	r3, #0
 8006788:	d018      	beq.n	80067bc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800678a:	4b67      	ldr	r3, [pc, #412]	@ (8006928 <RCCEx_PLLSAI2_Config+0x1b8>)
 800678c:	68db      	ldr	r3, [r3, #12]
 800678e:	f003 0203 	and.w	r2, r3, #3
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	429a      	cmp	r2, r3
 8006798:	d10d      	bne.n	80067b6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
       ||
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d009      	beq.n	80067b6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80067a2:	4b61      	ldr	r3, [pc, #388]	@ (8006928 <RCCEx_PLLSAI2_Config+0x1b8>)
 80067a4:	68db      	ldr	r3, [r3, #12]
 80067a6:	091b      	lsrs	r3, r3, #4
 80067a8:	f003 0307 	and.w	r3, r3, #7
 80067ac:	1c5a      	adds	r2, r3, #1
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	685b      	ldr	r3, [r3, #4]
       ||
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d047      	beq.n	8006846 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80067b6:	2301      	movs	r3, #1
 80067b8:	73fb      	strb	r3, [r7, #15]
 80067ba:	e044      	b.n	8006846 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	2b03      	cmp	r3, #3
 80067c2:	d018      	beq.n	80067f6 <RCCEx_PLLSAI2_Config+0x86>
 80067c4:	2b03      	cmp	r3, #3
 80067c6:	d825      	bhi.n	8006814 <RCCEx_PLLSAI2_Config+0xa4>
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	d002      	beq.n	80067d2 <RCCEx_PLLSAI2_Config+0x62>
 80067cc:	2b02      	cmp	r3, #2
 80067ce:	d009      	beq.n	80067e4 <RCCEx_PLLSAI2_Config+0x74>
 80067d0:	e020      	b.n	8006814 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80067d2:	4b55      	ldr	r3, [pc, #340]	@ (8006928 <RCCEx_PLLSAI2_Config+0x1b8>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f003 0302 	and.w	r3, r3, #2
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d11d      	bne.n	800681a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80067e2:	e01a      	b.n	800681a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80067e4:	4b50      	ldr	r3, [pc, #320]	@ (8006928 <RCCEx_PLLSAI2_Config+0x1b8>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d116      	bne.n	800681e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80067f0:	2301      	movs	r3, #1
 80067f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80067f4:	e013      	b.n	800681e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80067f6:	4b4c      	ldr	r3, [pc, #304]	@ (8006928 <RCCEx_PLLSAI2_Config+0x1b8>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d10f      	bne.n	8006822 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006802:	4b49      	ldr	r3, [pc, #292]	@ (8006928 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800680a:	2b00      	cmp	r3, #0
 800680c:	d109      	bne.n	8006822 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800680e:	2301      	movs	r3, #1
 8006810:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006812:	e006      	b.n	8006822 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006814:	2301      	movs	r3, #1
 8006816:	73fb      	strb	r3, [r7, #15]
      break;
 8006818:	e004      	b.n	8006824 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800681a:	bf00      	nop
 800681c:	e002      	b.n	8006824 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800681e:	bf00      	nop
 8006820:	e000      	b.n	8006824 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006822:	bf00      	nop
    }

    if(status == HAL_OK)
 8006824:	7bfb      	ldrb	r3, [r7, #15]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d10d      	bne.n	8006846 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800682a:	4b3f      	ldr	r3, [pc, #252]	@ (8006928 <RCCEx_PLLSAI2_Config+0x1b8>)
 800682c:	68db      	ldr	r3, [r3, #12]
 800682e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6819      	ldr	r1, [r3, #0]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	3b01      	subs	r3, #1
 800683c:	011b      	lsls	r3, r3, #4
 800683e:	430b      	orrs	r3, r1
 8006840:	4939      	ldr	r1, [pc, #228]	@ (8006928 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006842:	4313      	orrs	r3, r2
 8006844:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006846:	7bfb      	ldrb	r3, [r7, #15]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d167      	bne.n	800691c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800684c:	4b36      	ldr	r3, [pc, #216]	@ (8006928 <RCCEx_PLLSAI2_Config+0x1b8>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a35      	ldr	r2, [pc, #212]	@ (8006928 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006852:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006856:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006858:	f7fb fdbe 	bl	80023d8 <HAL_GetTick>
 800685c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800685e:	e009      	b.n	8006874 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006860:	f7fb fdba 	bl	80023d8 <HAL_GetTick>
 8006864:	4602      	mov	r2, r0
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	1ad3      	subs	r3, r2, r3
 800686a:	2b02      	cmp	r3, #2
 800686c:	d902      	bls.n	8006874 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800686e:	2303      	movs	r3, #3
 8006870:	73fb      	strb	r3, [r7, #15]
        break;
 8006872:	e005      	b.n	8006880 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006874:	4b2c      	ldr	r3, [pc, #176]	@ (8006928 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800687c:	2b00      	cmp	r3, #0
 800687e:	d1ef      	bne.n	8006860 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006880:	7bfb      	ldrb	r3, [r7, #15]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d14a      	bne.n	800691c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d111      	bne.n	80068b0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800688c:	4b26      	ldr	r3, [pc, #152]	@ (8006928 <RCCEx_PLLSAI2_Config+0x1b8>)
 800688e:	695b      	ldr	r3, [r3, #20]
 8006890:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8006894:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	6892      	ldr	r2, [r2, #8]
 800689c:	0211      	lsls	r1, r2, #8
 800689e:	687a      	ldr	r2, [r7, #4]
 80068a0:	68d2      	ldr	r2, [r2, #12]
 80068a2:	0912      	lsrs	r2, r2, #4
 80068a4:	0452      	lsls	r2, r2, #17
 80068a6:	430a      	orrs	r2, r1
 80068a8:	491f      	ldr	r1, [pc, #124]	@ (8006928 <RCCEx_PLLSAI2_Config+0x1b8>)
 80068aa:	4313      	orrs	r3, r2
 80068ac:	614b      	str	r3, [r1, #20]
 80068ae:	e011      	b.n	80068d4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80068b0:	4b1d      	ldr	r3, [pc, #116]	@ (8006928 <RCCEx_PLLSAI2_Config+0x1b8>)
 80068b2:	695b      	ldr	r3, [r3, #20]
 80068b4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80068b8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	6892      	ldr	r2, [r2, #8]
 80068c0:	0211      	lsls	r1, r2, #8
 80068c2:	687a      	ldr	r2, [r7, #4]
 80068c4:	6912      	ldr	r2, [r2, #16]
 80068c6:	0852      	lsrs	r2, r2, #1
 80068c8:	3a01      	subs	r2, #1
 80068ca:	0652      	lsls	r2, r2, #25
 80068cc:	430a      	orrs	r2, r1
 80068ce:	4916      	ldr	r1, [pc, #88]	@ (8006928 <RCCEx_PLLSAI2_Config+0x1b8>)
 80068d0:	4313      	orrs	r3, r2
 80068d2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80068d4:	4b14      	ldr	r3, [pc, #80]	@ (8006928 <RCCEx_PLLSAI2_Config+0x1b8>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a13      	ldr	r2, [pc, #76]	@ (8006928 <RCCEx_PLLSAI2_Config+0x1b8>)
 80068da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80068de:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068e0:	f7fb fd7a 	bl	80023d8 <HAL_GetTick>
 80068e4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80068e6:	e009      	b.n	80068fc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80068e8:	f7fb fd76 	bl	80023d8 <HAL_GetTick>
 80068ec:	4602      	mov	r2, r0
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	1ad3      	subs	r3, r2, r3
 80068f2:	2b02      	cmp	r3, #2
 80068f4:	d902      	bls.n	80068fc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80068f6:	2303      	movs	r3, #3
 80068f8:	73fb      	strb	r3, [r7, #15]
          break;
 80068fa:	e005      	b.n	8006908 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80068fc:	4b0a      	ldr	r3, [pc, #40]	@ (8006928 <RCCEx_PLLSAI2_Config+0x1b8>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006904:	2b00      	cmp	r3, #0
 8006906:	d0ef      	beq.n	80068e8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006908:	7bfb      	ldrb	r3, [r7, #15]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d106      	bne.n	800691c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800690e:	4b06      	ldr	r3, [pc, #24]	@ (8006928 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006910:	695a      	ldr	r2, [r3, #20]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	695b      	ldr	r3, [r3, #20]
 8006916:	4904      	ldr	r1, [pc, #16]	@ (8006928 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006918:	4313      	orrs	r3, r2
 800691a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800691c:	7bfb      	ldrb	r3, [r7, #15]
}
 800691e:	4618      	mov	r0, r3
 8006920:	3710      	adds	r7, #16
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}
 8006926:	bf00      	nop
 8006928:	40021000 	.word	0x40021000

0800692c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b084      	sub	sp, #16
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d101      	bne.n	800693e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800693a:	2301      	movs	r3, #1
 800693c:	e095      	b.n	8006a6a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006942:	2b00      	cmp	r3, #0
 8006944:	d108      	bne.n	8006958 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800694e:	d009      	beq.n	8006964 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2200      	movs	r2, #0
 8006954:	61da      	str	r2, [r3, #28]
 8006956:	e005      	b.n	8006964 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2200      	movs	r2, #0
 8006962:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2200      	movs	r2, #0
 8006968:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006970:	b2db      	uxtb	r3, r3
 8006972:	2b00      	cmp	r3, #0
 8006974:	d106      	bne.n	8006984 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2200      	movs	r2, #0
 800697a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f7fb fac6 	bl	8001f10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2202      	movs	r2, #2
 8006988:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	681a      	ldr	r2, [r3, #0]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800699a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	68db      	ldr	r3, [r3, #12]
 80069a0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80069a4:	d902      	bls.n	80069ac <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80069a6:	2300      	movs	r3, #0
 80069a8:	60fb      	str	r3, [r7, #12]
 80069aa:	e002      	b.n	80069b2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80069ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80069b0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	68db      	ldr	r3, [r3, #12]
 80069b6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80069ba:	d007      	beq.n	80069cc <HAL_SPI_Init+0xa0>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	68db      	ldr	r3, [r3, #12]
 80069c0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80069c4:	d002      	beq.n	80069cc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2200      	movs	r2, #0
 80069ca:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80069dc:	431a      	orrs	r2, r3
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	691b      	ldr	r3, [r3, #16]
 80069e2:	f003 0302 	and.w	r3, r3, #2
 80069e6:	431a      	orrs	r2, r3
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	695b      	ldr	r3, [r3, #20]
 80069ec:	f003 0301 	and.w	r3, r3, #1
 80069f0:	431a      	orrs	r2, r3
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	699b      	ldr	r3, [r3, #24]
 80069f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80069fa:	431a      	orrs	r2, r3
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	69db      	ldr	r3, [r3, #28]
 8006a00:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006a04:	431a      	orrs	r2, r3
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6a1b      	ldr	r3, [r3, #32]
 8006a0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a0e:	ea42 0103 	orr.w	r1, r2, r3
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a16:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	430a      	orrs	r2, r1
 8006a20:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	699b      	ldr	r3, [r3, #24]
 8006a26:	0c1b      	lsrs	r3, r3, #16
 8006a28:	f003 0204 	and.w	r2, r3, #4
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a30:	f003 0310 	and.w	r3, r3, #16
 8006a34:	431a      	orrs	r2, r3
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a3a:	f003 0308 	and.w	r3, r3, #8
 8006a3e:	431a      	orrs	r2, r3
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	68db      	ldr	r3, [r3, #12]
 8006a44:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006a48:	ea42 0103 	orr.w	r1, r2, r3
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	430a      	orrs	r2, r1
 8006a58:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2201      	movs	r2, #1
 8006a64:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006a68:	2300      	movs	r3, #0
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3710      	adds	r7, #16
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}

08006a72 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a72:	b580      	push	{r7, lr}
 8006a74:	b088      	sub	sp, #32
 8006a76:	af00      	add	r7, sp, #0
 8006a78:	60f8      	str	r0, [r7, #12]
 8006a7a:	60b9      	str	r1, [r7, #8]
 8006a7c:	603b      	str	r3, [r7, #0]
 8006a7e:	4613      	mov	r3, r2
 8006a80:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a82:	f7fb fca9 	bl	80023d8 <HAL_GetTick>
 8006a86:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006a88:	88fb      	ldrh	r3, [r7, #6]
 8006a8a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006a92:	b2db      	uxtb	r3, r3
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d001      	beq.n	8006a9c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006a98:	2302      	movs	r3, #2
 8006a9a:	e15c      	b.n	8006d56 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d002      	beq.n	8006aa8 <HAL_SPI_Transmit+0x36>
 8006aa2:	88fb      	ldrh	r3, [r7, #6]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d101      	bne.n	8006aac <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	e154      	b.n	8006d56 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006ab2:	2b01      	cmp	r3, #1
 8006ab4:	d101      	bne.n	8006aba <HAL_SPI_Transmit+0x48>
 8006ab6:	2302      	movs	r3, #2
 8006ab8:	e14d      	b.n	8006d56 <HAL_SPI_Transmit+0x2e4>
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2201      	movs	r2, #1
 8006abe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2203      	movs	r2, #3
 8006ac6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2200      	movs	r2, #0
 8006ace:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	68ba      	ldr	r2, [r7, #8]
 8006ad4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	88fa      	ldrh	r2, [r7, #6]
 8006ada:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	88fa      	ldrh	r2, [r7, #6]
 8006ae0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2200      	movs	r2, #0
 8006aec:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2200      	movs	r2, #0
 8006af4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2200      	movs	r2, #0
 8006afc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2200      	movs	r2, #0
 8006b02:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b0c:	d10f      	bne.n	8006b2e <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	681a      	ldr	r2, [r3, #0]
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006b1c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006b2c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b38:	2b40      	cmp	r3, #64	@ 0x40
 8006b3a:	d007      	beq.n	8006b4c <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	681a      	ldr	r2, [r3, #0]
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006b4a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	68db      	ldr	r3, [r3, #12]
 8006b50:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006b54:	d952      	bls.n	8006bfc <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d002      	beq.n	8006b64 <HAL_SPI_Transmit+0xf2>
 8006b5e:	8b7b      	ldrh	r3, [r7, #26]
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	d145      	bne.n	8006bf0 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b68:	881a      	ldrh	r2, [r3, #0]
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b74:	1c9a      	adds	r2, r3, #2
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	3b01      	subs	r3, #1
 8006b82:	b29a      	uxth	r2, r3
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006b88:	e032      	b.n	8006bf0 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	f003 0302 	and.w	r3, r3, #2
 8006b94:	2b02      	cmp	r3, #2
 8006b96:	d112      	bne.n	8006bbe <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b9c:	881a      	ldrh	r2, [r3, #0]
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ba8:	1c9a      	adds	r2, r3, #2
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	3b01      	subs	r3, #1
 8006bb6:	b29a      	uxth	r2, r3
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006bbc:	e018      	b.n	8006bf0 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006bbe:	f7fb fc0b 	bl	80023d8 <HAL_GetTick>
 8006bc2:	4602      	mov	r2, r0
 8006bc4:	69fb      	ldr	r3, [r7, #28]
 8006bc6:	1ad3      	subs	r3, r2, r3
 8006bc8:	683a      	ldr	r2, [r7, #0]
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d803      	bhi.n	8006bd6 <HAL_SPI_Transmit+0x164>
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bd4:	d102      	bne.n	8006bdc <HAL_SPI_Transmit+0x16a>
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d109      	bne.n	8006bf0 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	2201      	movs	r2, #1
 8006be0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2200      	movs	r2, #0
 8006be8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8006bec:	2303      	movs	r3, #3
 8006bee:	e0b2      	b.n	8006d56 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d1c7      	bne.n	8006b8a <HAL_SPI_Transmit+0x118>
 8006bfa:	e083      	b.n	8006d04 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d002      	beq.n	8006c0a <HAL_SPI_Transmit+0x198>
 8006c04:	8b7b      	ldrh	r3, [r7, #26]
 8006c06:	2b01      	cmp	r3, #1
 8006c08:	d177      	bne.n	8006cfa <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d912      	bls.n	8006c3a <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c18:	881a      	ldrh	r2, [r3, #0]
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c24:	1c9a      	adds	r2, r3, #2
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	3b02      	subs	r3, #2
 8006c32:	b29a      	uxth	r2, r3
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006c38:	e05f      	b.n	8006cfa <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	330c      	adds	r3, #12
 8006c44:	7812      	ldrb	r2, [r2, #0]
 8006c46:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c4c:	1c5a      	adds	r2, r3, #1
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	3b01      	subs	r3, #1
 8006c5a:	b29a      	uxth	r2, r3
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006c60:	e04b      	b.n	8006cfa <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	f003 0302 	and.w	r3, r3, #2
 8006c6c:	2b02      	cmp	r3, #2
 8006c6e:	d12b      	bne.n	8006cc8 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	2b01      	cmp	r3, #1
 8006c78:	d912      	bls.n	8006ca0 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c7e:	881a      	ldrh	r2, [r3, #0]
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c8a:	1c9a      	adds	r2, r3, #2
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	3b02      	subs	r3, #2
 8006c98:	b29a      	uxth	r2, r3
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006c9e:	e02c      	b.n	8006cfa <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	330c      	adds	r3, #12
 8006caa:	7812      	ldrb	r2, [r2, #0]
 8006cac:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cb2:	1c5a      	adds	r2, r3, #1
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006cbc:	b29b      	uxth	r3, r3
 8006cbe:	3b01      	subs	r3, #1
 8006cc0:	b29a      	uxth	r2, r3
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006cc6:	e018      	b.n	8006cfa <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006cc8:	f7fb fb86 	bl	80023d8 <HAL_GetTick>
 8006ccc:	4602      	mov	r2, r0
 8006cce:	69fb      	ldr	r3, [r7, #28]
 8006cd0:	1ad3      	subs	r3, r2, r3
 8006cd2:	683a      	ldr	r2, [r7, #0]
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d803      	bhi.n	8006ce0 <HAL_SPI_Transmit+0x26e>
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cde:	d102      	bne.n	8006ce6 <HAL_SPI_Transmit+0x274>
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d109      	bne.n	8006cfa <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2201      	movs	r2, #1
 8006cea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8006cf6:	2303      	movs	r3, #3
 8006cf8:	e02d      	b.n	8006d56 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d1ae      	bne.n	8006c62 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006d04:	69fa      	ldr	r2, [r7, #28]
 8006d06:	6839      	ldr	r1, [r7, #0]
 8006d08:	68f8      	ldr	r0, [r7, #12]
 8006d0a:	f000 f947 	bl	8006f9c <SPI_EndRxTxTransaction>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d002      	beq.n	8006d1a <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2220      	movs	r2, #32
 8006d18:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d10a      	bne.n	8006d38 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d22:	2300      	movs	r3, #0
 8006d24:	617b      	str	r3, [r7, #20]
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	68db      	ldr	r3, [r3, #12]
 8006d2c:	617b      	str	r3, [r7, #20]
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	617b      	str	r3, [r7, #20]
 8006d36:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2200      	movs	r2, #0
 8006d44:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d001      	beq.n	8006d54 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8006d50:	2301      	movs	r3, #1
 8006d52:	e000      	b.n	8006d56 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8006d54:	2300      	movs	r3, #0
  }
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3720      	adds	r7, #32
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}
	...

08006d60 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b088      	sub	sp, #32
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	60f8      	str	r0, [r7, #12]
 8006d68:	60b9      	str	r1, [r7, #8]
 8006d6a:	603b      	str	r3, [r7, #0]
 8006d6c:	4613      	mov	r3, r2
 8006d6e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006d70:	f7fb fb32 	bl	80023d8 <HAL_GetTick>
 8006d74:	4602      	mov	r2, r0
 8006d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d78:	1a9b      	subs	r3, r3, r2
 8006d7a:	683a      	ldr	r2, [r7, #0]
 8006d7c:	4413      	add	r3, r2
 8006d7e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006d80:	f7fb fb2a 	bl	80023d8 <HAL_GetTick>
 8006d84:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006d86:	4b39      	ldr	r3, [pc, #228]	@ (8006e6c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	015b      	lsls	r3, r3, #5
 8006d8c:	0d1b      	lsrs	r3, r3, #20
 8006d8e:	69fa      	ldr	r2, [r7, #28]
 8006d90:	fb02 f303 	mul.w	r3, r2, r3
 8006d94:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006d96:	e054      	b.n	8006e42 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d9e:	d050      	beq.n	8006e42 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006da0:	f7fb fb1a 	bl	80023d8 <HAL_GetTick>
 8006da4:	4602      	mov	r2, r0
 8006da6:	69bb      	ldr	r3, [r7, #24]
 8006da8:	1ad3      	subs	r3, r2, r3
 8006daa:	69fa      	ldr	r2, [r7, #28]
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d902      	bls.n	8006db6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006db0:	69fb      	ldr	r3, [r7, #28]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d13d      	bne.n	8006e32 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	685a      	ldr	r2, [r3, #4]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006dc4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006dce:	d111      	bne.n	8006df4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	689b      	ldr	r3, [r3, #8]
 8006dd4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006dd8:	d004      	beq.n	8006de4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006de2:	d107      	bne.n	8006df4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006df2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006df8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006dfc:	d10f      	bne.n	8006e1e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	681a      	ldr	r2, [r3, #0]
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006e0c:	601a      	str	r2, [r3, #0]
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	681a      	ldr	r2, [r3, #0]
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006e1c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2201      	movs	r2, #1
 8006e22:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006e2e:	2303      	movs	r3, #3
 8006e30:	e017      	b.n	8006e62 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d101      	bne.n	8006e3c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	3b01      	subs	r3, #1
 8006e40:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	689a      	ldr	r2, [r3, #8]
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	4013      	ands	r3, r2
 8006e4c:	68ba      	ldr	r2, [r7, #8]
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	bf0c      	ite	eq
 8006e52:	2301      	moveq	r3, #1
 8006e54:	2300      	movne	r3, #0
 8006e56:	b2db      	uxtb	r3, r3
 8006e58:	461a      	mov	r2, r3
 8006e5a:	79fb      	ldrb	r3, [r7, #7]
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d19b      	bne.n	8006d98 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006e60:	2300      	movs	r3, #0
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3720      	adds	r7, #32
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}
 8006e6a:	bf00      	nop
 8006e6c:	2000020c 	.word	0x2000020c

08006e70 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b08a      	sub	sp, #40	@ 0x28
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	60f8      	str	r0, [r7, #12]
 8006e78:	60b9      	str	r1, [r7, #8]
 8006e7a:	607a      	str	r2, [r7, #4]
 8006e7c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006e82:	f7fb faa9 	bl	80023d8 <HAL_GetTick>
 8006e86:	4602      	mov	r2, r0
 8006e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e8a:	1a9b      	subs	r3, r3, r2
 8006e8c:	683a      	ldr	r2, [r7, #0]
 8006e8e:	4413      	add	r3, r2
 8006e90:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8006e92:	f7fb faa1 	bl	80023d8 <HAL_GetTick>
 8006e96:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	330c      	adds	r3, #12
 8006e9e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006ea0:	4b3d      	ldr	r3, [pc, #244]	@ (8006f98 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006ea2:	681a      	ldr	r2, [r3, #0]
 8006ea4:	4613      	mov	r3, r2
 8006ea6:	009b      	lsls	r3, r3, #2
 8006ea8:	4413      	add	r3, r2
 8006eaa:	00da      	lsls	r2, r3, #3
 8006eac:	1ad3      	subs	r3, r2, r3
 8006eae:	0d1b      	lsrs	r3, r3, #20
 8006eb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006eb2:	fb02 f303 	mul.w	r3, r2, r3
 8006eb6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006eb8:	e060      	b.n	8006f7c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006ec0:	d107      	bne.n	8006ed2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d104      	bne.n	8006ed2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006ec8:	69fb      	ldr	r3, [r7, #28]
 8006eca:	781b      	ldrb	r3, [r3, #0]
 8006ecc:	b2db      	uxtb	r3, r3
 8006ece:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006ed0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ed8:	d050      	beq.n	8006f7c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006eda:	f7fb fa7d 	bl	80023d8 <HAL_GetTick>
 8006ede:	4602      	mov	r2, r0
 8006ee0:	6a3b      	ldr	r3, [r7, #32]
 8006ee2:	1ad3      	subs	r3, r2, r3
 8006ee4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	d902      	bls.n	8006ef0 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d13d      	bne.n	8006f6c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	685a      	ldr	r2, [r3, #4]
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006efe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f08:	d111      	bne.n	8006f2e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	689b      	ldr	r3, [r3, #8]
 8006f0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f12:	d004      	beq.n	8006f1e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f1c:	d107      	bne.n	8006f2e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	681a      	ldr	r2, [r3, #0]
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006f2c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f36:	d10f      	bne.n	8006f58 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006f46:	601a      	str	r2, [r3, #0]
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	681a      	ldr	r2, [r3, #0]
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006f56:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2200      	movs	r2, #0
 8006f64:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006f68:	2303      	movs	r3, #3
 8006f6a:	e010      	b.n	8006f8e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006f6c:	69bb      	ldr	r3, [r7, #24]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d101      	bne.n	8006f76 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006f72:	2300      	movs	r3, #0
 8006f74:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8006f76:	69bb      	ldr	r3, [r7, #24]
 8006f78:	3b01      	subs	r3, #1
 8006f7a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	689a      	ldr	r2, [r3, #8]
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	4013      	ands	r3, r2
 8006f86:	687a      	ldr	r2, [r7, #4]
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d196      	bne.n	8006eba <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006f8c:	2300      	movs	r3, #0
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3728      	adds	r7, #40	@ 0x28
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}
 8006f96:	bf00      	nop
 8006f98:	2000020c 	.word	0x2000020c

08006f9c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b086      	sub	sp, #24
 8006fa0:	af02      	add	r7, sp, #8
 8006fa2:	60f8      	str	r0, [r7, #12]
 8006fa4:	60b9      	str	r1, [r7, #8]
 8006fa6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	9300      	str	r3, [sp, #0]
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8006fb4:	68f8      	ldr	r0, [r7, #12]
 8006fb6:	f7ff ff5b 	bl	8006e70 <SPI_WaitFifoStateUntilTimeout>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d007      	beq.n	8006fd0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006fc4:	f043 0220 	orr.w	r2, r3, #32
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006fcc:	2303      	movs	r3, #3
 8006fce:	e027      	b.n	8007020 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	9300      	str	r3, [sp, #0]
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	2180      	movs	r1, #128	@ 0x80
 8006fda:	68f8      	ldr	r0, [r7, #12]
 8006fdc:	f7ff fec0 	bl	8006d60 <SPI_WaitFlagStateUntilTimeout>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d007      	beq.n	8006ff6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006fea:	f043 0220 	orr.w	r2, r3, #32
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006ff2:	2303      	movs	r3, #3
 8006ff4:	e014      	b.n	8007020 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	9300      	str	r3, [sp, #0]
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007002:	68f8      	ldr	r0, [r7, #12]
 8007004:	f7ff ff34 	bl	8006e70 <SPI_WaitFifoStateUntilTimeout>
 8007008:	4603      	mov	r3, r0
 800700a:	2b00      	cmp	r3, #0
 800700c:	d007      	beq.n	800701e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007012:	f043 0220 	orr.w	r2, r3, #32
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800701a:	2303      	movs	r3, #3
 800701c:	e000      	b.n	8007020 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800701e:	2300      	movs	r3, #0
}
 8007020:	4618      	mov	r0, r3
 8007022:	3710      	adds	r7, #16
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b082      	sub	sp, #8
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d101      	bne.n	800703a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007036:	2301      	movs	r3, #1
 8007038:	e049      	b.n	80070ce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007040:	b2db      	uxtb	r3, r3
 8007042:	2b00      	cmp	r3, #0
 8007044:	d106      	bne.n	8007054 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f7fa ffa2 	bl	8001f98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2202      	movs	r2, #2
 8007058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	3304      	adds	r3, #4
 8007064:	4619      	mov	r1, r3
 8007066:	4610      	mov	r0, r2
 8007068:	f000 fc08 	bl	800787c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2201      	movs	r2, #1
 8007070:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2201      	movs	r2, #1
 8007078:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2201      	movs	r2, #1
 8007080:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2201      	movs	r2, #1
 8007088:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2201      	movs	r2, #1
 8007090:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2201      	movs	r2, #1
 8007098:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2201      	movs	r2, #1
 80070a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2201      	movs	r2, #1
 80070a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2201      	movs	r2, #1
 80070b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2201      	movs	r2, #1
 80070b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2201      	movs	r2, #1
 80070c0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2201      	movs	r2, #1
 80070c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80070cc:	2300      	movs	r3, #0
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3708      	adds	r7, #8
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}
	...

080070d8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80070d8:	b480      	push	{r7}
 80070da:	b085      	sub	sp, #20
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80070e6:	b2db      	uxtb	r3, r3
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d001      	beq.n	80070f0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80070ec:	2301      	movs	r3, #1
 80070ee:	e047      	b.n	8007180 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2202      	movs	r2, #2
 80070f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a23      	ldr	r2, [pc, #140]	@ (800718c <HAL_TIM_Base_Start+0xb4>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d01d      	beq.n	800713e <HAL_TIM_Base_Start+0x66>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800710a:	d018      	beq.n	800713e <HAL_TIM_Base_Start+0x66>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a1f      	ldr	r2, [pc, #124]	@ (8007190 <HAL_TIM_Base_Start+0xb8>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d013      	beq.n	800713e <HAL_TIM_Base_Start+0x66>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a1e      	ldr	r2, [pc, #120]	@ (8007194 <HAL_TIM_Base_Start+0xbc>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d00e      	beq.n	800713e <HAL_TIM_Base_Start+0x66>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a1c      	ldr	r2, [pc, #112]	@ (8007198 <HAL_TIM_Base_Start+0xc0>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d009      	beq.n	800713e <HAL_TIM_Base_Start+0x66>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a1b      	ldr	r2, [pc, #108]	@ (800719c <HAL_TIM_Base_Start+0xc4>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d004      	beq.n	800713e <HAL_TIM_Base_Start+0x66>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a19      	ldr	r2, [pc, #100]	@ (80071a0 <HAL_TIM_Base_Start+0xc8>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d115      	bne.n	800716a <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	689a      	ldr	r2, [r3, #8]
 8007144:	4b17      	ldr	r3, [pc, #92]	@ (80071a4 <HAL_TIM_Base_Start+0xcc>)
 8007146:	4013      	ands	r3, r2
 8007148:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2b06      	cmp	r3, #6
 800714e:	d015      	beq.n	800717c <HAL_TIM_Base_Start+0xa4>
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007156:	d011      	beq.n	800717c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	681a      	ldr	r2, [r3, #0]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f042 0201 	orr.w	r2, r2, #1
 8007166:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007168:	e008      	b.n	800717c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	681a      	ldr	r2, [r3, #0]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f042 0201 	orr.w	r2, r2, #1
 8007178:	601a      	str	r2, [r3, #0]
 800717a:	e000      	b.n	800717e <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800717c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800717e:	2300      	movs	r3, #0
}
 8007180:	4618      	mov	r0, r3
 8007182:	3714      	adds	r7, #20
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr
 800718c:	40012c00 	.word	0x40012c00
 8007190:	40000400 	.word	0x40000400
 8007194:	40000800 	.word	0x40000800
 8007198:	40000c00 	.word	0x40000c00
 800719c:	40013400 	.word	0x40013400
 80071a0:	40014000 	.word	0x40014000
 80071a4:	00010007 	.word	0x00010007

080071a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b085      	sub	sp, #20
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80071b6:	b2db      	uxtb	r3, r3
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	d001      	beq.n	80071c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80071bc:	2301      	movs	r3, #1
 80071be:	e04f      	b.n	8007260 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2202      	movs	r2, #2
 80071c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	68da      	ldr	r2, [r3, #12]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f042 0201 	orr.w	r2, r2, #1
 80071d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a23      	ldr	r2, [pc, #140]	@ (800726c <HAL_TIM_Base_Start_IT+0xc4>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d01d      	beq.n	800721e <HAL_TIM_Base_Start_IT+0x76>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071ea:	d018      	beq.n	800721e <HAL_TIM_Base_Start_IT+0x76>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a1f      	ldr	r2, [pc, #124]	@ (8007270 <HAL_TIM_Base_Start_IT+0xc8>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d013      	beq.n	800721e <HAL_TIM_Base_Start_IT+0x76>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a1e      	ldr	r2, [pc, #120]	@ (8007274 <HAL_TIM_Base_Start_IT+0xcc>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d00e      	beq.n	800721e <HAL_TIM_Base_Start_IT+0x76>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a1c      	ldr	r2, [pc, #112]	@ (8007278 <HAL_TIM_Base_Start_IT+0xd0>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d009      	beq.n	800721e <HAL_TIM_Base_Start_IT+0x76>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a1b      	ldr	r2, [pc, #108]	@ (800727c <HAL_TIM_Base_Start_IT+0xd4>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d004      	beq.n	800721e <HAL_TIM_Base_Start_IT+0x76>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a19      	ldr	r2, [pc, #100]	@ (8007280 <HAL_TIM_Base_Start_IT+0xd8>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d115      	bne.n	800724a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	689a      	ldr	r2, [r3, #8]
 8007224:	4b17      	ldr	r3, [pc, #92]	@ (8007284 <HAL_TIM_Base_Start_IT+0xdc>)
 8007226:	4013      	ands	r3, r2
 8007228:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2b06      	cmp	r3, #6
 800722e:	d015      	beq.n	800725c <HAL_TIM_Base_Start_IT+0xb4>
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007236:	d011      	beq.n	800725c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	681a      	ldr	r2, [r3, #0]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f042 0201 	orr.w	r2, r2, #1
 8007246:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007248:	e008      	b.n	800725c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f042 0201 	orr.w	r2, r2, #1
 8007258:	601a      	str	r2, [r3, #0]
 800725a:	e000      	b.n	800725e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800725c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800725e:	2300      	movs	r3, #0
}
 8007260:	4618      	mov	r0, r3
 8007262:	3714      	adds	r7, #20
 8007264:	46bd      	mov	sp, r7
 8007266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726a:	4770      	bx	lr
 800726c:	40012c00 	.word	0x40012c00
 8007270:	40000400 	.word	0x40000400
 8007274:	40000800 	.word	0x40000800
 8007278:	40000c00 	.word	0x40000c00
 800727c:	40013400 	.word	0x40013400
 8007280:	40014000 	.word	0x40014000
 8007284:	00010007 	.word	0x00010007

08007288 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b082      	sub	sp, #8
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d101      	bne.n	800729a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8007296:	2301      	movs	r3, #1
 8007298:	e049      	b.n	800732e <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80072a0:	b2db      	uxtb	r3, r3
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d106      	bne.n	80072b4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2200      	movs	r2, #0
 80072aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f000 f841 	bl	8007336 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2202      	movs	r2, #2
 80072b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681a      	ldr	r2, [r3, #0]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	3304      	adds	r3, #4
 80072c4:	4619      	mov	r1, r3
 80072c6:	4610      	mov	r0, r2
 80072c8:	f000 fad8 	bl	800787c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2201      	movs	r2, #1
 80072d0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2201      	movs	r2, #1
 80072d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2201      	movs	r2, #1
 80072e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2201      	movs	r2, #1
 80072e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2201      	movs	r2, #1
 80072f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2201      	movs	r2, #1
 80072f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2201      	movs	r2, #1
 8007300:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2201      	movs	r2, #1
 8007308:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2201      	movs	r2, #1
 8007310:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2201      	movs	r2, #1
 8007318:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2201      	movs	r2, #1
 8007320:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2201      	movs	r2, #1
 8007328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800732c:	2300      	movs	r3, #0
}
 800732e:	4618      	mov	r0, r3
 8007330:	3708      	adds	r7, #8
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}

08007336 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8007336:	b480      	push	{r7}
 8007338:	b083      	sub	sp, #12
 800733a:	af00      	add	r7, sp, #0
 800733c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800733e:	bf00      	nop
 8007340:	370c      	adds	r7, #12
 8007342:	46bd      	mov	sp, r7
 8007344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007348:	4770      	bx	lr

0800734a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800734a:	b580      	push	{r7, lr}
 800734c:	b084      	sub	sp, #16
 800734e:	af00      	add	r7, sp, #0
 8007350:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	68db      	ldr	r3, [r3, #12]
 8007358:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	691b      	ldr	r3, [r3, #16]
 8007360:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	f003 0302 	and.w	r3, r3, #2
 8007368:	2b00      	cmp	r3, #0
 800736a:	d020      	beq.n	80073ae <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	f003 0302 	and.w	r3, r3, #2
 8007372:	2b00      	cmp	r3, #0
 8007374:	d01b      	beq.n	80073ae <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f06f 0202 	mvn.w	r2, #2
 800737e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2201      	movs	r2, #1
 8007384:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	699b      	ldr	r3, [r3, #24]
 800738c:	f003 0303 	and.w	r3, r3, #3
 8007390:	2b00      	cmp	r3, #0
 8007392:	d003      	beq.n	800739c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f000 fa53 	bl	8007840 <HAL_TIM_IC_CaptureCallback>
 800739a:	e005      	b.n	80073a8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f000 fa45 	bl	800782c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f000 fa56 	bl	8007854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2200      	movs	r2, #0
 80073ac:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	f003 0304 	and.w	r3, r3, #4
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d020      	beq.n	80073fa <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f003 0304 	and.w	r3, r3, #4
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d01b      	beq.n	80073fa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f06f 0204 	mvn.w	r2, #4
 80073ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2202      	movs	r2, #2
 80073d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	699b      	ldr	r3, [r3, #24]
 80073d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d003      	beq.n	80073e8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f000 fa2d 	bl	8007840 <HAL_TIM_IC_CaptureCallback>
 80073e6:	e005      	b.n	80073f4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f000 fa1f 	bl	800782c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f000 fa30 	bl	8007854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2200      	movs	r2, #0
 80073f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	f003 0308 	and.w	r3, r3, #8
 8007400:	2b00      	cmp	r3, #0
 8007402:	d020      	beq.n	8007446 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	f003 0308 	and.w	r3, r3, #8
 800740a:	2b00      	cmp	r3, #0
 800740c:	d01b      	beq.n	8007446 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f06f 0208 	mvn.w	r2, #8
 8007416:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2204      	movs	r2, #4
 800741c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	69db      	ldr	r3, [r3, #28]
 8007424:	f003 0303 	and.w	r3, r3, #3
 8007428:	2b00      	cmp	r3, #0
 800742a:	d003      	beq.n	8007434 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f000 fa07 	bl	8007840 <HAL_TIM_IC_CaptureCallback>
 8007432:	e005      	b.n	8007440 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f000 f9f9 	bl	800782c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f000 fa0a 	bl	8007854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2200      	movs	r2, #0
 8007444:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	f003 0310 	and.w	r3, r3, #16
 800744c:	2b00      	cmp	r3, #0
 800744e:	d020      	beq.n	8007492 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f003 0310 	and.w	r3, r3, #16
 8007456:	2b00      	cmp	r3, #0
 8007458:	d01b      	beq.n	8007492 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f06f 0210 	mvn.w	r2, #16
 8007462:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2208      	movs	r2, #8
 8007468:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	69db      	ldr	r3, [r3, #28]
 8007470:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007474:	2b00      	cmp	r3, #0
 8007476:	d003      	beq.n	8007480 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f000 f9e1 	bl	8007840 <HAL_TIM_IC_CaptureCallback>
 800747e:	e005      	b.n	800748c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f000 f9d3 	bl	800782c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 f9e4 	bl	8007854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2200      	movs	r2, #0
 8007490:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	f003 0301 	and.w	r3, r3, #1
 8007498:	2b00      	cmp	r3, #0
 800749a:	d00c      	beq.n	80074b6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	f003 0301 	and.w	r3, r3, #1
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d007      	beq.n	80074b6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f06f 0201 	mvn.w	r2, #1
 80074ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f7fa f94f 	bl	8001754 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d104      	bne.n	80074ca <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d00c      	beq.n	80074e4 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d007      	beq.n	80074e4 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80074dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f000 fe74 	bl	80081cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d00c      	beq.n	8007508 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d007      	beq.n	8007508 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007500:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f000 fe6c 	bl	80081e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800750e:	2b00      	cmp	r3, #0
 8007510:	d00c      	beq.n	800752c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007518:	2b00      	cmp	r3, #0
 800751a:	d007      	beq.n	800752c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007524:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f000 f99e 	bl	8007868 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	f003 0320 	and.w	r3, r3, #32
 8007532:	2b00      	cmp	r3, #0
 8007534:	d00c      	beq.n	8007550 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	f003 0320 	and.w	r3, r3, #32
 800753c:	2b00      	cmp	r3, #0
 800753e:	d007      	beq.n	8007550 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f06f 0220 	mvn.w	r2, #32
 8007548:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f000 fe34 	bl	80081b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007550:	bf00      	nop
 8007552:	3710      	adds	r7, #16
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}

08007558 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b086      	sub	sp, #24
 800755c:	af00      	add	r7, sp, #0
 800755e:	60f8      	str	r0, [r7, #12]
 8007560:	60b9      	str	r1, [r7, #8]
 8007562:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007564:	2300      	movs	r3, #0
 8007566:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800756e:	2b01      	cmp	r3, #1
 8007570:	d101      	bne.n	8007576 <HAL_TIM_OC_ConfigChannel+0x1e>
 8007572:	2302      	movs	r3, #2
 8007574:	e066      	b.n	8007644 <HAL_TIM_OC_ConfigChannel+0xec>
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2201      	movs	r2, #1
 800757a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2b14      	cmp	r3, #20
 8007582:	d857      	bhi.n	8007634 <HAL_TIM_OC_ConfigChannel+0xdc>
 8007584:	a201      	add	r2, pc, #4	@ (adr r2, 800758c <HAL_TIM_OC_ConfigChannel+0x34>)
 8007586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800758a:	bf00      	nop
 800758c:	080075e1 	.word	0x080075e1
 8007590:	08007635 	.word	0x08007635
 8007594:	08007635 	.word	0x08007635
 8007598:	08007635 	.word	0x08007635
 800759c:	080075ef 	.word	0x080075ef
 80075a0:	08007635 	.word	0x08007635
 80075a4:	08007635 	.word	0x08007635
 80075a8:	08007635 	.word	0x08007635
 80075ac:	080075fd 	.word	0x080075fd
 80075b0:	08007635 	.word	0x08007635
 80075b4:	08007635 	.word	0x08007635
 80075b8:	08007635 	.word	0x08007635
 80075bc:	0800760b 	.word	0x0800760b
 80075c0:	08007635 	.word	0x08007635
 80075c4:	08007635 	.word	0x08007635
 80075c8:	08007635 	.word	0x08007635
 80075cc:	08007619 	.word	0x08007619
 80075d0:	08007635 	.word	0x08007635
 80075d4:	08007635 	.word	0x08007635
 80075d8:	08007635 	.word	0x08007635
 80075dc:	08007627 	.word	0x08007627
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	68b9      	ldr	r1, [r7, #8]
 80075e6:	4618      	mov	r0, r3
 80075e8:	f000 f9ee 	bl	80079c8 <TIM_OC1_SetConfig>
      break;
 80075ec:	e025      	b.n	800763a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	68b9      	ldr	r1, [r7, #8]
 80075f4:	4618      	mov	r0, r3
 80075f6:	f000 fa77 	bl	8007ae8 <TIM_OC2_SetConfig>
      break;
 80075fa:	e01e      	b.n	800763a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	68b9      	ldr	r1, [r7, #8]
 8007602:	4618      	mov	r0, r3
 8007604:	f000 fafa 	bl	8007bfc <TIM_OC3_SetConfig>
      break;
 8007608:	e017      	b.n	800763a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	68b9      	ldr	r1, [r7, #8]
 8007610:	4618      	mov	r0, r3
 8007612:	f000 fb7b 	bl	8007d0c <TIM_OC4_SetConfig>
      break;
 8007616:	e010      	b.n	800763a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	68b9      	ldr	r1, [r7, #8]
 800761e:	4618      	mov	r0, r3
 8007620:	f000 fbde 	bl	8007de0 <TIM_OC5_SetConfig>
      break;
 8007624:	e009      	b.n	800763a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	68b9      	ldr	r1, [r7, #8]
 800762c:	4618      	mov	r0, r3
 800762e:	f000 fc3b 	bl	8007ea8 <TIM_OC6_SetConfig>
      break;
 8007632:	e002      	b.n	800763a <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8007634:	2301      	movs	r3, #1
 8007636:	75fb      	strb	r3, [r7, #23]
      break;
 8007638:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2200      	movs	r2, #0
 800763e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007642:	7dfb      	ldrb	r3, [r7, #23]
}
 8007644:	4618      	mov	r0, r3
 8007646:	3718      	adds	r7, #24
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}

0800764c <HAL_TIM_GenerateEvent>:
  *         only for timer instances supporting break input(s).
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_TIM_GenerateEvent(TIM_HandleTypeDef *htim, uint32_t EventSource)
{
 800764c:	b480      	push	{r7}
 800764e:	b083      	sub	sp, #12
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_EVENT_SOURCE(EventSource));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800765c:	2b01      	cmp	r3, #1
 800765e:	d101      	bne.n	8007664 <HAL_TIM_GenerateEvent+0x18>
 8007660:	2302      	movs	r3, #2
 8007662:	e014      	b.n	800768e <HAL_TIM_GenerateEvent+0x42>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2201      	movs	r2, #1
 8007668:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2202      	movs	r2, #2
 8007670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the event sources */
  htim->Instance->EGR = EventSource;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	683a      	ldr	r2, [r7, #0]
 800767a:	615a      	str	r2, [r3, #20]

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2201      	movs	r2, #1
 8007680:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2200      	movs	r2, #0
 8007688:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800768c:	2300      	movs	r3, #0
}
 800768e:	4618      	mov	r0, r3
 8007690:	370c      	adds	r7, #12
 8007692:	46bd      	mov	sp, r7
 8007694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007698:	4770      	bx	lr

0800769a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800769a:	b580      	push	{r7, lr}
 800769c:	b084      	sub	sp, #16
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6078      	str	r0, [r7, #4]
 80076a2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80076a4:	2300      	movs	r3, #0
 80076a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80076ae:	2b01      	cmp	r3, #1
 80076b0:	d101      	bne.n	80076b6 <HAL_TIM_ConfigClockSource+0x1c>
 80076b2:	2302      	movs	r3, #2
 80076b4:	e0b6      	b.n	8007824 <HAL_TIM_ConfigClockSource+0x18a>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2201      	movs	r2, #1
 80076ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2202      	movs	r2, #2
 80076c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	689b      	ldr	r3, [r3, #8]
 80076cc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80076d4:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80076d8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80076e0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	68ba      	ldr	r2, [r7, #8]
 80076e8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80076f2:	d03e      	beq.n	8007772 <HAL_TIM_ConfigClockSource+0xd8>
 80076f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80076f8:	f200 8087 	bhi.w	800780a <HAL_TIM_ConfigClockSource+0x170>
 80076fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007700:	f000 8086 	beq.w	8007810 <HAL_TIM_ConfigClockSource+0x176>
 8007704:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007708:	d87f      	bhi.n	800780a <HAL_TIM_ConfigClockSource+0x170>
 800770a:	2b70      	cmp	r3, #112	@ 0x70
 800770c:	d01a      	beq.n	8007744 <HAL_TIM_ConfigClockSource+0xaa>
 800770e:	2b70      	cmp	r3, #112	@ 0x70
 8007710:	d87b      	bhi.n	800780a <HAL_TIM_ConfigClockSource+0x170>
 8007712:	2b60      	cmp	r3, #96	@ 0x60
 8007714:	d050      	beq.n	80077b8 <HAL_TIM_ConfigClockSource+0x11e>
 8007716:	2b60      	cmp	r3, #96	@ 0x60
 8007718:	d877      	bhi.n	800780a <HAL_TIM_ConfigClockSource+0x170>
 800771a:	2b50      	cmp	r3, #80	@ 0x50
 800771c:	d03c      	beq.n	8007798 <HAL_TIM_ConfigClockSource+0xfe>
 800771e:	2b50      	cmp	r3, #80	@ 0x50
 8007720:	d873      	bhi.n	800780a <HAL_TIM_ConfigClockSource+0x170>
 8007722:	2b40      	cmp	r3, #64	@ 0x40
 8007724:	d058      	beq.n	80077d8 <HAL_TIM_ConfigClockSource+0x13e>
 8007726:	2b40      	cmp	r3, #64	@ 0x40
 8007728:	d86f      	bhi.n	800780a <HAL_TIM_ConfigClockSource+0x170>
 800772a:	2b30      	cmp	r3, #48	@ 0x30
 800772c:	d064      	beq.n	80077f8 <HAL_TIM_ConfigClockSource+0x15e>
 800772e:	2b30      	cmp	r3, #48	@ 0x30
 8007730:	d86b      	bhi.n	800780a <HAL_TIM_ConfigClockSource+0x170>
 8007732:	2b20      	cmp	r3, #32
 8007734:	d060      	beq.n	80077f8 <HAL_TIM_ConfigClockSource+0x15e>
 8007736:	2b20      	cmp	r3, #32
 8007738:	d867      	bhi.n	800780a <HAL_TIM_ConfigClockSource+0x170>
 800773a:	2b00      	cmp	r3, #0
 800773c:	d05c      	beq.n	80077f8 <HAL_TIM_ConfigClockSource+0x15e>
 800773e:	2b10      	cmp	r3, #16
 8007740:	d05a      	beq.n	80077f8 <HAL_TIM_ConfigClockSource+0x15e>
 8007742:	e062      	b.n	800780a <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007754:	f000 fc88 	bl	8008068 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	689b      	ldr	r3, [r3, #8]
 800775e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007766:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	68ba      	ldr	r2, [r7, #8]
 800776e:	609a      	str	r2, [r3, #8]
      break;
 8007770:	e04f      	b.n	8007812 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007782:	f000 fc71 	bl	8008068 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	689a      	ldr	r2, [r3, #8]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007794:	609a      	str	r2, [r3, #8]
      break;
 8007796:	e03c      	b.n	8007812 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80077a4:	461a      	mov	r2, r3
 80077a6:	f000 fbe5 	bl	8007f74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	2150      	movs	r1, #80	@ 0x50
 80077b0:	4618      	mov	r0, r3
 80077b2:	f000 fc3e 	bl	8008032 <TIM_ITRx_SetConfig>
      break;
 80077b6:	e02c      	b.n	8007812 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80077c4:	461a      	mov	r2, r3
 80077c6:	f000 fc04 	bl	8007fd2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	2160      	movs	r1, #96	@ 0x60
 80077d0:	4618      	mov	r0, r3
 80077d2:	f000 fc2e 	bl	8008032 <TIM_ITRx_SetConfig>
      break;
 80077d6:	e01c      	b.n	8007812 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80077e4:	461a      	mov	r2, r3
 80077e6:	f000 fbc5 	bl	8007f74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	2140      	movs	r1, #64	@ 0x40
 80077f0:	4618      	mov	r0, r3
 80077f2:	f000 fc1e 	bl	8008032 <TIM_ITRx_SetConfig>
      break;
 80077f6:	e00c      	b.n	8007812 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681a      	ldr	r2, [r3, #0]
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4619      	mov	r1, r3
 8007802:	4610      	mov	r0, r2
 8007804:	f000 fc15 	bl	8008032 <TIM_ITRx_SetConfig>
      break;
 8007808:	e003      	b.n	8007812 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800780a:	2301      	movs	r3, #1
 800780c:	73fb      	strb	r3, [r7, #15]
      break;
 800780e:	e000      	b.n	8007812 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8007810:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2201      	movs	r2, #1
 8007816:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2200      	movs	r2, #0
 800781e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007822:	7bfb      	ldrb	r3, [r7, #15]
}
 8007824:	4618      	mov	r0, r3
 8007826:	3710      	adds	r7, #16
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}

0800782c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800782c:	b480      	push	{r7}
 800782e:	b083      	sub	sp, #12
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007834:	bf00      	nop
 8007836:	370c      	adds	r7, #12
 8007838:	46bd      	mov	sp, r7
 800783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783e:	4770      	bx	lr

08007840 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007840:	b480      	push	{r7}
 8007842:	b083      	sub	sp, #12
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007848:	bf00      	nop
 800784a:	370c      	adds	r7, #12
 800784c:	46bd      	mov	sp, r7
 800784e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007852:	4770      	bx	lr

08007854 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007854:	b480      	push	{r7}
 8007856:	b083      	sub	sp, #12
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800785c:	bf00      	nop
 800785e:	370c      	adds	r7, #12
 8007860:	46bd      	mov	sp, r7
 8007862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007866:	4770      	bx	lr

08007868 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007868:	b480      	push	{r7}
 800786a:	b083      	sub	sp, #12
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007870:	bf00      	nop
 8007872:	370c      	adds	r7, #12
 8007874:	46bd      	mov	sp, r7
 8007876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787a:	4770      	bx	lr

0800787c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800787c:	b480      	push	{r7}
 800787e:	b085      	sub	sp, #20
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	4a46      	ldr	r2, [pc, #280]	@ (80079a8 <TIM_Base_SetConfig+0x12c>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d013      	beq.n	80078bc <TIM_Base_SetConfig+0x40>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800789a:	d00f      	beq.n	80078bc <TIM_Base_SetConfig+0x40>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	4a43      	ldr	r2, [pc, #268]	@ (80079ac <TIM_Base_SetConfig+0x130>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d00b      	beq.n	80078bc <TIM_Base_SetConfig+0x40>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	4a42      	ldr	r2, [pc, #264]	@ (80079b0 <TIM_Base_SetConfig+0x134>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d007      	beq.n	80078bc <TIM_Base_SetConfig+0x40>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	4a41      	ldr	r2, [pc, #260]	@ (80079b4 <TIM_Base_SetConfig+0x138>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d003      	beq.n	80078bc <TIM_Base_SetConfig+0x40>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	4a40      	ldr	r2, [pc, #256]	@ (80079b8 <TIM_Base_SetConfig+0x13c>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d108      	bne.n	80078ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	68fa      	ldr	r2, [r7, #12]
 80078ca:	4313      	orrs	r3, r2
 80078cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	4a35      	ldr	r2, [pc, #212]	@ (80079a8 <TIM_Base_SetConfig+0x12c>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d01f      	beq.n	8007916 <TIM_Base_SetConfig+0x9a>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078dc:	d01b      	beq.n	8007916 <TIM_Base_SetConfig+0x9a>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	4a32      	ldr	r2, [pc, #200]	@ (80079ac <TIM_Base_SetConfig+0x130>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d017      	beq.n	8007916 <TIM_Base_SetConfig+0x9a>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	4a31      	ldr	r2, [pc, #196]	@ (80079b0 <TIM_Base_SetConfig+0x134>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d013      	beq.n	8007916 <TIM_Base_SetConfig+0x9a>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	4a30      	ldr	r2, [pc, #192]	@ (80079b4 <TIM_Base_SetConfig+0x138>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d00f      	beq.n	8007916 <TIM_Base_SetConfig+0x9a>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	4a2f      	ldr	r2, [pc, #188]	@ (80079b8 <TIM_Base_SetConfig+0x13c>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d00b      	beq.n	8007916 <TIM_Base_SetConfig+0x9a>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	4a2e      	ldr	r2, [pc, #184]	@ (80079bc <TIM_Base_SetConfig+0x140>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d007      	beq.n	8007916 <TIM_Base_SetConfig+0x9a>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	4a2d      	ldr	r2, [pc, #180]	@ (80079c0 <TIM_Base_SetConfig+0x144>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d003      	beq.n	8007916 <TIM_Base_SetConfig+0x9a>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	4a2c      	ldr	r2, [pc, #176]	@ (80079c4 <TIM_Base_SetConfig+0x148>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d108      	bne.n	8007928 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800791c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	68db      	ldr	r3, [r3, #12]
 8007922:	68fa      	ldr	r2, [r7, #12]
 8007924:	4313      	orrs	r3, r2
 8007926:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	695b      	ldr	r3, [r3, #20]
 8007932:	4313      	orrs	r3, r2
 8007934:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	68fa      	ldr	r2, [r7, #12]
 800793a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	689a      	ldr	r2, [r3, #8]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	681a      	ldr	r2, [r3, #0]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	4a16      	ldr	r2, [pc, #88]	@ (80079a8 <TIM_Base_SetConfig+0x12c>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d00f      	beq.n	8007974 <TIM_Base_SetConfig+0xf8>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	4a18      	ldr	r2, [pc, #96]	@ (80079b8 <TIM_Base_SetConfig+0x13c>)
 8007958:	4293      	cmp	r3, r2
 800795a:	d00b      	beq.n	8007974 <TIM_Base_SetConfig+0xf8>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	4a17      	ldr	r2, [pc, #92]	@ (80079bc <TIM_Base_SetConfig+0x140>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d007      	beq.n	8007974 <TIM_Base_SetConfig+0xf8>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	4a16      	ldr	r2, [pc, #88]	@ (80079c0 <TIM_Base_SetConfig+0x144>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d003      	beq.n	8007974 <TIM_Base_SetConfig+0xf8>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	4a15      	ldr	r2, [pc, #84]	@ (80079c4 <TIM_Base_SetConfig+0x148>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d103      	bne.n	800797c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	691a      	ldr	r2, [r3, #16]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2201      	movs	r2, #1
 8007980:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	691b      	ldr	r3, [r3, #16]
 8007986:	f003 0301 	and.w	r3, r3, #1
 800798a:	2b01      	cmp	r3, #1
 800798c:	d105      	bne.n	800799a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	691b      	ldr	r3, [r3, #16]
 8007992:	f023 0201 	bic.w	r2, r3, #1
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	611a      	str	r2, [r3, #16]
  }
}
 800799a:	bf00      	nop
 800799c:	3714      	adds	r7, #20
 800799e:	46bd      	mov	sp, r7
 80079a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a4:	4770      	bx	lr
 80079a6:	bf00      	nop
 80079a8:	40012c00 	.word	0x40012c00
 80079ac:	40000400 	.word	0x40000400
 80079b0:	40000800 	.word	0x40000800
 80079b4:	40000c00 	.word	0x40000c00
 80079b8:	40013400 	.word	0x40013400
 80079bc:	40014000 	.word	0x40014000
 80079c0:	40014400 	.word	0x40014400
 80079c4:	40014800 	.word	0x40014800

080079c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b087      	sub	sp, #28
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6a1b      	ldr	r3, [r3, #32]
 80079d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6a1b      	ldr	r3, [r3, #32]
 80079dc:	f023 0201 	bic.w	r2, r3, #1
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	699b      	ldr	r3, [r3, #24]
 80079ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80079f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	f023 0303 	bic.w	r3, r3, #3
 8007a02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	68fa      	ldr	r2, [r7, #12]
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	f023 0302 	bic.w	r3, r3, #2
 8007a14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	689b      	ldr	r3, [r3, #8]
 8007a1a:	697a      	ldr	r2, [r7, #20]
 8007a1c:	4313      	orrs	r3, r2
 8007a1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	4a2c      	ldr	r2, [pc, #176]	@ (8007ad4 <TIM_OC1_SetConfig+0x10c>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d00f      	beq.n	8007a48 <TIM_OC1_SetConfig+0x80>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	4a2b      	ldr	r2, [pc, #172]	@ (8007ad8 <TIM_OC1_SetConfig+0x110>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d00b      	beq.n	8007a48 <TIM_OC1_SetConfig+0x80>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	4a2a      	ldr	r2, [pc, #168]	@ (8007adc <TIM_OC1_SetConfig+0x114>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d007      	beq.n	8007a48 <TIM_OC1_SetConfig+0x80>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	4a29      	ldr	r2, [pc, #164]	@ (8007ae0 <TIM_OC1_SetConfig+0x118>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d003      	beq.n	8007a48 <TIM_OC1_SetConfig+0x80>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	4a28      	ldr	r2, [pc, #160]	@ (8007ae4 <TIM_OC1_SetConfig+0x11c>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d10c      	bne.n	8007a62 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	f023 0308 	bic.w	r3, r3, #8
 8007a4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	68db      	ldr	r3, [r3, #12]
 8007a54:	697a      	ldr	r2, [r7, #20]
 8007a56:	4313      	orrs	r3, r2
 8007a58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	f023 0304 	bic.w	r3, r3, #4
 8007a60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	4a1b      	ldr	r2, [pc, #108]	@ (8007ad4 <TIM_OC1_SetConfig+0x10c>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d00f      	beq.n	8007a8a <TIM_OC1_SetConfig+0xc2>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	4a1a      	ldr	r2, [pc, #104]	@ (8007ad8 <TIM_OC1_SetConfig+0x110>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d00b      	beq.n	8007a8a <TIM_OC1_SetConfig+0xc2>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	4a19      	ldr	r2, [pc, #100]	@ (8007adc <TIM_OC1_SetConfig+0x114>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d007      	beq.n	8007a8a <TIM_OC1_SetConfig+0xc2>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	4a18      	ldr	r2, [pc, #96]	@ (8007ae0 <TIM_OC1_SetConfig+0x118>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d003      	beq.n	8007a8a <TIM_OC1_SetConfig+0xc2>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	4a17      	ldr	r2, [pc, #92]	@ (8007ae4 <TIM_OC1_SetConfig+0x11c>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d111      	bne.n	8007aae <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007a90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007a98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	695b      	ldr	r3, [r3, #20]
 8007a9e:	693a      	ldr	r2, [r7, #16]
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	699b      	ldr	r3, [r3, #24]
 8007aa8:	693a      	ldr	r2, [r7, #16]
 8007aaa:	4313      	orrs	r3, r2
 8007aac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	693a      	ldr	r2, [r7, #16]
 8007ab2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	68fa      	ldr	r2, [r7, #12]
 8007ab8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	685a      	ldr	r2, [r3, #4]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	697a      	ldr	r2, [r7, #20]
 8007ac6:	621a      	str	r2, [r3, #32]
}
 8007ac8:	bf00      	nop
 8007aca:	371c      	adds	r7, #28
 8007acc:	46bd      	mov	sp, r7
 8007ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad2:	4770      	bx	lr
 8007ad4:	40012c00 	.word	0x40012c00
 8007ad8:	40013400 	.word	0x40013400
 8007adc:	40014000 	.word	0x40014000
 8007ae0:	40014400 	.word	0x40014400
 8007ae4:	40014800 	.word	0x40014800

08007ae8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b087      	sub	sp, #28
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6a1b      	ldr	r3, [r3, #32]
 8007af6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6a1b      	ldr	r3, [r3, #32]
 8007afc:	f023 0210 	bic.w	r2, r3, #16
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	699b      	ldr	r3, [r3, #24]
 8007b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007b16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	021b      	lsls	r3, r3, #8
 8007b2a:	68fa      	ldr	r2, [r7, #12]
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	f023 0320 	bic.w	r3, r3, #32
 8007b36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	689b      	ldr	r3, [r3, #8]
 8007b3c:	011b      	lsls	r3, r3, #4
 8007b3e:	697a      	ldr	r2, [r7, #20]
 8007b40:	4313      	orrs	r3, r2
 8007b42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	4a28      	ldr	r2, [pc, #160]	@ (8007be8 <TIM_OC2_SetConfig+0x100>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d003      	beq.n	8007b54 <TIM_OC2_SetConfig+0x6c>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	4a27      	ldr	r2, [pc, #156]	@ (8007bec <TIM_OC2_SetConfig+0x104>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d10d      	bne.n	8007b70 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007b5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	68db      	ldr	r3, [r3, #12]
 8007b60:	011b      	lsls	r3, r3, #4
 8007b62:	697a      	ldr	r2, [r7, #20]
 8007b64:	4313      	orrs	r3, r2
 8007b66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b6e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	4a1d      	ldr	r2, [pc, #116]	@ (8007be8 <TIM_OC2_SetConfig+0x100>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d00f      	beq.n	8007b98 <TIM_OC2_SetConfig+0xb0>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	4a1c      	ldr	r2, [pc, #112]	@ (8007bec <TIM_OC2_SetConfig+0x104>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d00b      	beq.n	8007b98 <TIM_OC2_SetConfig+0xb0>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	4a1b      	ldr	r2, [pc, #108]	@ (8007bf0 <TIM_OC2_SetConfig+0x108>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d007      	beq.n	8007b98 <TIM_OC2_SetConfig+0xb0>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	4a1a      	ldr	r2, [pc, #104]	@ (8007bf4 <TIM_OC2_SetConfig+0x10c>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d003      	beq.n	8007b98 <TIM_OC2_SetConfig+0xb0>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	4a19      	ldr	r2, [pc, #100]	@ (8007bf8 <TIM_OC2_SetConfig+0x110>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d113      	bne.n	8007bc0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007b98:	693b      	ldr	r3, [r7, #16]
 8007b9a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007b9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007ba6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	695b      	ldr	r3, [r3, #20]
 8007bac:	009b      	lsls	r3, r3, #2
 8007bae:	693a      	ldr	r2, [r7, #16]
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	699b      	ldr	r3, [r3, #24]
 8007bb8:	009b      	lsls	r3, r3, #2
 8007bba:	693a      	ldr	r2, [r7, #16]
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	693a      	ldr	r2, [r7, #16]
 8007bc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	68fa      	ldr	r2, [r7, #12]
 8007bca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	685a      	ldr	r2, [r3, #4]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	697a      	ldr	r2, [r7, #20]
 8007bd8:	621a      	str	r2, [r3, #32]
}
 8007bda:	bf00      	nop
 8007bdc:	371c      	adds	r7, #28
 8007bde:	46bd      	mov	sp, r7
 8007be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be4:	4770      	bx	lr
 8007be6:	bf00      	nop
 8007be8:	40012c00 	.word	0x40012c00
 8007bec:	40013400 	.word	0x40013400
 8007bf0:	40014000 	.word	0x40014000
 8007bf4:	40014400 	.word	0x40014400
 8007bf8:	40014800 	.word	0x40014800

08007bfc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b087      	sub	sp, #28
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6a1b      	ldr	r3, [r3, #32]
 8007c0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6a1b      	ldr	r3, [r3, #32]
 8007c10:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	69db      	ldr	r3, [r3, #28]
 8007c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007c2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	f023 0303 	bic.w	r3, r3, #3
 8007c36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	68fa      	ldr	r2, [r7, #12]
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007c48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	689b      	ldr	r3, [r3, #8]
 8007c4e:	021b      	lsls	r3, r3, #8
 8007c50:	697a      	ldr	r2, [r7, #20]
 8007c52:	4313      	orrs	r3, r2
 8007c54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	4a27      	ldr	r2, [pc, #156]	@ (8007cf8 <TIM_OC3_SetConfig+0xfc>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d003      	beq.n	8007c66 <TIM_OC3_SetConfig+0x6a>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	4a26      	ldr	r2, [pc, #152]	@ (8007cfc <TIM_OC3_SetConfig+0x100>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d10d      	bne.n	8007c82 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007c6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	68db      	ldr	r3, [r3, #12]
 8007c72:	021b      	lsls	r3, r3, #8
 8007c74:	697a      	ldr	r2, [r7, #20]
 8007c76:	4313      	orrs	r3, r2
 8007c78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007c80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	4a1c      	ldr	r2, [pc, #112]	@ (8007cf8 <TIM_OC3_SetConfig+0xfc>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d00f      	beq.n	8007caa <TIM_OC3_SetConfig+0xae>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	4a1b      	ldr	r2, [pc, #108]	@ (8007cfc <TIM_OC3_SetConfig+0x100>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d00b      	beq.n	8007caa <TIM_OC3_SetConfig+0xae>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	4a1a      	ldr	r2, [pc, #104]	@ (8007d00 <TIM_OC3_SetConfig+0x104>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d007      	beq.n	8007caa <TIM_OC3_SetConfig+0xae>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	4a19      	ldr	r2, [pc, #100]	@ (8007d04 <TIM_OC3_SetConfig+0x108>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d003      	beq.n	8007caa <TIM_OC3_SetConfig+0xae>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	4a18      	ldr	r2, [pc, #96]	@ (8007d08 <TIM_OC3_SetConfig+0x10c>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d113      	bne.n	8007cd2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007caa:	693b      	ldr	r3, [r7, #16]
 8007cac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007cb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007cb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	695b      	ldr	r3, [r3, #20]
 8007cbe:	011b      	lsls	r3, r3, #4
 8007cc0:	693a      	ldr	r2, [r7, #16]
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	699b      	ldr	r3, [r3, #24]
 8007cca:	011b      	lsls	r3, r3, #4
 8007ccc:	693a      	ldr	r2, [r7, #16]
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	693a      	ldr	r2, [r7, #16]
 8007cd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	68fa      	ldr	r2, [r7, #12]
 8007cdc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	685a      	ldr	r2, [r3, #4]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	697a      	ldr	r2, [r7, #20]
 8007cea:	621a      	str	r2, [r3, #32]
}
 8007cec:	bf00      	nop
 8007cee:	371c      	adds	r7, #28
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr
 8007cf8:	40012c00 	.word	0x40012c00
 8007cfc:	40013400 	.word	0x40013400
 8007d00:	40014000 	.word	0x40014000
 8007d04:	40014400 	.word	0x40014400
 8007d08:	40014800 	.word	0x40014800

08007d0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b087      	sub	sp, #28
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
 8007d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6a1b      	ldr	r3, [r3, #32]
 8007d1a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6a1b      	ldr	r3, [r3, #32]
 8007d20:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	69db      	ldr	r3, [r3, #28]
 8007d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007d3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	021b      	lsls	r3, r3, #8
 8007d4e:	68fa      	ldr	r2, [r7, #12]
 8007d50:	4313      	orrs	r3, r2
 8007d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007d5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	689b      	ldr	r3, [r3, #8]
 8007d60:	031b      	lsls	r3, r3, #12
 8007d62:	693a      	ldr	r2, [r7, #16]
 8007d64:	4313      	orrs	r3, r2
 8007d66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	4a18      	ldr	r2, [pc, #96]	@ (8007dcc <TIM_OC4_SetConfig+0xc0>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d00f      	beq.n	8007d90 <TIM_OC4_SetConfig+0x84>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	4a17      	ldr	r2, [pc, #92]	@ (8007dd0 <TIM_OC4_SetConfig+0xc4>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d00b      	beq.n	8007d90 <TIM_OC4_SetConfig+0x84>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	4a16      	ldr	r2, [pc, #88]	@ (8007dd4 <TIM_OC4_SetConfig+0xc8>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d007      	beq.n	8007d90 <TIM_OC4_SetConfig+0x84>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	4a15      	ldr	r2, [pc, #84]	@ (8007dd8 <TIM_OC4_SetConfig+0xcc>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d003      	beq.n	8007d90 <TIM_OC4_SetConfig+0x84>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	4a14      	ldr	r2, [pc, #80]	@ (8007ddc <TIM_OC4_SetConfig+0xd0>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d109      	bne.n	8007da4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007d90:	697b      	ldr	r3, [r7, #20]
 8007d92:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007d96:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	695b      	ldr	r3, [r3, #20]
 8007d9c:	019b      	lsls	r3, r3, #6
 8007d9e:	697a      	ldr	r2, [r7, #20]
 8007da0:	4313      	orrs	r3, r2
 8007da2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	697a      	ldr	r2, [r7, #20]
 8007da8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	68fa      	ldr	r2, [r7, #12]
 8007dae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	685a      	ldr	r2, [r3, #4]
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	693a      	ldr	r2, [r7, #16]
 8007dbc:	621a      	str	r2, [r3, #32]
}
 8007dbe:	bf00      	nop
 8007dc0:	371c      	adds	r7, #28
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc8:	4770      	bx	lr
 8007dca:	bf00      	nop
 8007dcc:	40012c00 	.word	0x40012c00
 8007dd0:	40013400 	.word	0x40013400
 8007dd4:	40014000 	.word	0x40014000
 8007dd8:	40014400 	.word	0x40014400
 8007ddc:	40014800 	.word	0x40014800

08007de0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b087      	sub	sp, #28
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6a1b      	ldr	r3, [r3, #32]
 8007dee:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6a1b      	ldr	r3, [r3, #32]
 8007df4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007e0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	68fa      	ldr	r2, [r7, #12]
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007e24:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	689b      	ldr	r3, [r3, #8]
 8007e2a:	041b      	lsls	r3, r3, #16
 8007e2c:	693a      	ldr	r2, [r7, #16]
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	4a17      	ldr	r2, [pc, #92]	@ (8007e94 <TIM_OC5_SetConfig+0xb4>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d00f      	beq.n	8007e5a <TIM_OC5_SetConfig+0x7a>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	4a16      	ldr	r2, [pc, #88]	@ (8007e98 <TIM_OC5_SetConfig+0xb8>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d00b      	beq.n	8007e5a <TIM_OC5_SetConfig+0x7a>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	4a15      	ldr	r2, [pc, #84]	@ (8007e9c <TIM_OC5_SetConfig+0xbc>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d007      	beq.n	8007e5a <TIM_OC5_SetConfig+0x7a>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	4a14      	ldr	r2, [pc, #80]	@ (8007ea0 <TIM_OC5_SetConfig+0xc0>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d003      	beq.n	8007e5a <TIM_OC5_SetConfig+0x7a>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	4a13      	ldr	r2, [pc, #76]	@ (8007ea4 <TIM_OC5_SetConfig+0xc4>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d109      	bne.n	8007e6e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007e60:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	695b      	ldr	r3, [r3, #20]
 8007e66:	021b      	lsls	r3, r3, #8
 8007e68:	697a      	ldr	r2, [r7, #20]
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	697a      	ldr	r2, [r7, #20]
 8007e72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	68fa      	ldr	r2, [r7, #12]
 8007e78:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	685a      	ldr	r2, [r3, #4]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	693a      	ldr	r2, [r7, #16]
 8007e86:	621a      	str	r2, [r3, #32]
}
 8007e88:	bf00      	nop
 8007e8a:	371c      	adds	r7, #28
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e92:	4770      	bx	lr
 8007e94:	40012c00 	.word	0x40012c00
 8007e98:	40013400 	.word	0x40013400
 8007e9c:	40014000 	.word	0x40014000
 8007ea0:	40014400 	.word	0x40014400
 8007ea4:	40014800 	.word	0x40014800

08007ea8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b087      	sub	sp, #28
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6a1b      	ldr	r3, [r3, #32]
 8007eb6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6a1b      	ldr	r3, [r3, #32]
 8007ebc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	685b      	ldr	r3, [r3, #4]
 8007ec8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007ed6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007eda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	021b      	lsls	r3, r3, #8
 8007ee2:	68fa      	ldr	r2, [r7, #12]
 8007ee4:	4313      	orrs	r3, r2
 8007ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007eee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	689b      	ldr	r3, [r3, #8]
 8007ef4:	051b      	lsls	r3, r3, #20
 8007ef6:	693a      	ldr	r2, [r7, #16]
 8007ef8:	4313      	orrs	r3, r2
 8007efa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	4a18      	ldr	r2, [pc, #96]	@ (8007f60 <TIM_OC6_SetConfig+0xb8>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d00f      	beq.n	8007f24 <TIM_OC6_SetConfig+0x7c>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	4a17      	ldr	r2, [pc, #92]	@ (8007f64 <TIM_OC6_SetConfig+0xbc>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d00b      	beq.n	8007f24 <TIM_OC6_SetConfig+0x7c>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	4a16      	ldr	r2, [pc, #88]	@ (8007f68 <TIM_OC6_SetConfig+0xc0>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d007      	beq.n	8007f24 <TIM_OC6_SetConfig+0x7c>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	4a15      	ldr	r2, [pc, #84]	@ (8007f6c <TIM_OC6_SetConfig+0xc4>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d003      	beq.n	8007f24 <TIM_OC6_SetConfig+0x7c>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	4a14      	ldr	r2, [pc, #80]	@ (8007f70 <TIM_OC6_SetConfig+0xc8>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d109      	bne.n	8007f38 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007f24:	697b      	ldr	r3, [r7, #20]
 8007f26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007f2a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	695b      	ldr	r3, [r3, #20]
 8007f30:	029b      	lsls	r3, r3, #10
 8007f32:	697a      	ldr	r2, [r7, #20]
 8007f34:	4313      	orrs	r3, r2
 8007f36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	697a      	ldr	r2, [r7, #20]
 8007f3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	68fa      	ldr	r2, [r7, #12]
 8007f42:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	685a      	ldr	r2, [r3, #4]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	693a      	ldr	r2, [r7, #16]
 8007f50:	621a      	str	r2, [r3, #32]
}
 8007f52:	bf00      	nop
 8007f54:	371c      	adds	r7, #28
 8007f56:	46bd      	mov	sp, r7
 8007f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5c:	4770      	bx	lr
 8007f5e:	bf00      	nop
 8007f60:	40012c00 	.word	0x40012c00
 8007f64:	40013400 	.word	0x40013400
 8007f68:	40014000 	.word	0x40014000
 8007f6c:	40014400 	.word	0x40014400
 8007f70:	40014800 	.word	0x40014800

08007f74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b087      	sub	sp, #28
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	60f8      	str	r0, [r7, #12]
 8007f7c:	60b9      	str	r1, [r7, #8]
 8007f7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	6a1b      	ldr	r3, [r3, #32]
 8007f84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	6a1b      	ldr	r3, [r3, #32]
 8007f8a:	f023 0201 	bic.w	r2, r3, #1
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	699b      	ldr	r3, [r3, #24]
 8007f96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007f98:	693b      	ldr	r3, [r7, #16]
 8007f9a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007f9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	011b      	lsls	r3, r3, #4
 8007fa4:	693a      	ldr	r2, [r7, #16]
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	f023 030a 	bic.w	r3, r3, #10
 8007fb0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007fb2:	697a      	ldr	r2, [r7, #20]
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	4313      	orrs	r3, r2
 8007fb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	693a      	ldr	r2, [r7, #16]
 8007fbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	697a      	ldr	r2, [r7, #20]
 8007fc4:	621a      	str	r2, [r3, #32]
}
 8007fc6:	bf00      	nop
 8007fc8:	371c      	adds	r7, #28
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd0:	4770      	bx	lr

08007fd2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007fd2:	b480      	push	{r7}
 8007fd4:	b087      	sub	sp, #28
 8007fd6:	af00      	add	r7, sp, #0
 8007fd8:	60f8      	str	r0, [r7, #12]
 8007fda:	60b9      	str	r1, [r7, #8]
 8007fdc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	6a1b      	ldr	r3, [r3, #32]
 8007fe2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	6a1b      	ldr	r3, [r3, #32]
 8007fe8:	f023 0210 	bic.w	r2, r3, #16
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	699b      	ldr	r3, [r3, #24]
 8007ff4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007ff6:	693b      	ldr	r3, [r7, #16]
 8007ff8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007ffc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	031b      	lsls	r3, r3, #12
 8008002:	693a      	ldr	r2, [r7, #16]
 8008004:	4313      	orrs	r3, r2
 8008006:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800800e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	011b      	lsls	r3, r3, #4
 8008014:	697a      	ldr	r2, [r7, #20]
 8008016:	4313      	orrs	r3, r2
 8008018:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	693a      	ldr	r2, [r7, #16]
 800801e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	697a      	ldr	r2, [r7, #20]
 8008024:	621a      	str	r2, [r3, #32]
}
 8008026:	bf00      	nop
 8008028:	371c      	adds	r7, #28
 800802a:	46bd      	mov	sp, r7
 800802c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008030:	4770      	bx	lr

08008032 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008032:	b480      	push	{r7}
 8008034:	b085      	sub	sp, #20
 8008036:	af00      	add	r7, sp, #0
 8008038:	6078      	str	r0, [r7, #4]
 800803a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	689b      	ldr	r3, [r3, #8]
 8008040:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008048:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800804a:	683a      	ldr	r2, [r7, #0]
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	4313      	orrs	r3, r2
 8008050:	f043 0307 	orr.w	r3, r3, #7
 8008054:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	68fa      	ldr	r2, [r7, #12]
 800805a:	609a      	str	r2, [r3, #8]
}
 800805c:	bf00      	nop
 800805e:	3714      	adds	r7, #20
 8008060:	46bd      	mov	sp, r7
 8008062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008066:	4770      	bx	lr

08008068 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008068:	b480      	push	{r7}
 800806a:	b087      	sub	sp, #28
 800806c:	af00      	add	r7, sp, #0
 800806e:	60f8      	str	r0, [r7, #12]
 8008070:	60b9      	str	r1, [r7, #8]
 8008072:	607a      	str	r2, [r7, #4]
 8008074:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	689b      	ldr	r3, [r3, #8]
 800807a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008082:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	021a      	lsls	r2, r3, #8
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	431a      	orrs	r2, r3
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	4313      	orrs	r3, r2
 8008090:	697a      	ldr	r2, [r7, #20]
 8008092:	4313      	orrs	r3, r2
 8008094:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	697a      	ldr	r2, [r7, #20]
 800809a:	609a      	str	r2, [r3, #8]
}
 800809c:	bf00      	nop
 800809e:	371c      	adds	r7, #28
 80080a0:	46bd      	mov	sp, r7
 80080a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a6:	4770      	bx	lr

080080a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b085      	sub	sp, #20
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
 80080b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	d101      	bne.n	80080c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80080bc:	2302      	movs	r3, #2
 80080be:	e068      	b.n	8008192 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2201      	movs	r2, #1
 80080c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2202      	movs	r2, #2
 80080cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	685b      	ldr	r3, [r3, #4]
 80080d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	689b      	ldr	r3, [r3, #8]
 80080de:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4a2e      	ldr	r2, [pc, #184]	@ (80081a0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d004      	beq.n	80080f4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4a2d      	ldr	r2, [pc, #180]	@ (80081a4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d108      	bne.n	8008106 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80080fa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	68fa      	ldr	r2, [r7, #12]
 8008102:	4313      	orrs	r3, r2
 8008104:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800810c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	68fa      	ldr	r2, [r7, #12]
 8008114:	4313      	orrs	r3, r2
 8008116:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	68fa      	ldr	r2, [r7, #12]
 800811e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4a1e      	ldr	r2, [pc, #120]	@ (80081a0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d01d      	beq.n	8008166 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008132:	d018      	beq.n	8008166 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4a1b      	ldr	r2, [pc, #108]	@ (80081a8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d013      	beq.n	8008166 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	4a1a      	ldr	r2, [pc, #104]	@ (80081ac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008144:	4293      	cmp	r3, r2
 8008146:	d00e      	beq.n	8008166 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4a18      	ldr	r2, [pc, #96]	@ (80081b0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d009      	beq.n	8008166 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4a13      	ldr	r2, [pc, #76]	@ (80081a4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d004      	beq.n	8008166 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4a14      	ldr	r2, [pc, #80]	@ (80081b4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d10c      	bne.n	8008180 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800816c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	689b      	ldr	r3, [r3, #8]
 8008172:	68ba      	ldr	r2, [r7, #8]
 8008174:	4313      	orrs	r3, r2
 8008176:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	68ba      	ldr	r2, [r7, #8]
 800817e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2201      	movs	r2, #1
 8008184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2200      	movs	r2, #0
 800818c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008190:	2300      	movs	r3, #0
}
 8008192:	4618      	mov	r0, r3
 8008194:	3714      	adds	r7, #20
 8008196:	46bd      	mov	sp, r7
 8008198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819c:	4770      	bx	lr
 800819e:	bf00      	nop
 80081a0:	40012c00 	.word	0x40012c00
 80081a4:	40013400 	.word	0x40013400
 80081a8:	40000400 	.word	0x40000400
 80081ac:	40000800 	.word	0x40000800
 80081b0:	40000c00 	.word	0x40000c00
 80081b4:	40014000 	.word	0x40014000

080081b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b083      	sub	sp, #12
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80081c0:	bf00      	nop
 80081c2:	370c      	adds	r7, #12
 80081c4:	46bd      	mov	sp, r7
 80081c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ca:	4770      	bx	lr

080081cc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80081cc:	b480      	push	{r7}
 80081ce:	b083      	sub	sp, #12
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80081d4:	bf00      	nop
 80081d6:	370c      	adds	r7, #12
 80081d8:	46bd      	mov	sp, r7
 80081da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081de:	4770      	bx	lr

080081e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b083      	sub	sp, #12
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80081e8:	bf00      	nop
 80081ea:	370c      	adds	r7, #12
 80081ec:	46bd      	mov	sp, r7
 80081ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f2:	4770      	bx	lr

080081f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b082      	sub	sp, #8
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d101      	bne.n	8008206 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008202:	2301      	movs	r3, #1
 8008204:	e040      	b.n	8008288 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800820a:	2b00      	cmp	r3, #0
 800820c:	d106      	bne.n	800821c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2200      	movs	r2, #0
 8008212:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f7f9 ff18 	bl	800204c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2224      	movs	r2, #36	@ 0x24
 8008220:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	681a      	ldr	r2, [r3, #0]
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f022 0201 	bic.w	r2, r2, #1
 8008230:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008236:	2b00      	cmp	r3, #0
 8008238:	d002      	beq.n	8008240 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 fe90 	bl	8008f60 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f000 fbd5 	bl	80089f0 <UART_SetConfig>
 8008246:	4603      	mov	r3, r0
 8008248:	2b01      	cmp	r3, #1
 800824a:	d101      	bne.n	8008250 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800824c:	2301      	movs	r3, #1
 800824e:	e01b      	b.n	8008288 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	685a      	ldr	r2, [r3, #4]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800825e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	689a      	ldr	r2, [r3, #8]
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800826e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	681a      	ldr	r2, [r3, #0]
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f042 0201 	orr.w	r2, r2, #1
 800827e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f000 ff0f 	bl	80090a4 <UART_CheckIdleState>
 8008286:	4603      	mov	r3, r0
}
 8008288:	4618      	mov	r0, r3
 800828a:	3708      	adds	r7, #8
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}

08008290 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b08a      	sub	sp, #40	@ 0x28
 8008294:	af02      	add	r7, sp, #8
 8008296:	60f8      	str	r0, [r7, #12]
 8008298:	60b9      	str	r1, [r7, #8]
 800829a:	603b      	str	r3, [r7, #0]
 800829c:	4613      	mov	r3, r2
 800829e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80082a4:	2b20      	cmp	r3, #32
 80082a6:	d177      	bne.n	8008398 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d002      	beq.n	80082b4 <HAL_UART_Transmit+0x24>
 80082ae:	88fb      	ldrh	r3, [r7, #6]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d101      	bne.n	80082b8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80082b4:	2301      	movs	r3, #1
 80082b6:	e070      	b.n	800839a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	2200      	movs	r2, #0
 80082bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	2221      	movs	r2, #33	@ 0x21
 80082c4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80082c6:	f7fa f887 	bl	80023d8 <HAL_GetTick>
 80082ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	88fa      	ldrh	r2, [r7, #6]
 80082d0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	88fa      	ldrh	r2, [r7, #6]
 80082d8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	689b      	ldr	r3, [r3, #8]
 80082e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082e4:	d108      	bne.n	80082f8 <HAL_UART_Transmit+0x68>
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	691b      	ldr	r3, [r3, #16]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d104      	bne.n	80082f8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80082ee:	2300      	movs	r3, #0
 80082f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	61bb      	str	r3, [r7, #24]
 80082f6:	e003      	b.n	8008300 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80082fc:	2300      	movs	r3, #0
 80082fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008300:	e02f      	b.n	8008362 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	9300      	str	r3, [sp, #0]
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	2200      	movs	r2, #0
 800830a:	2180      	movs	r1, #128	@ 0x80
 800830c:	68f8      	ldr	r0, [r7, #12]
 800830e:	f000 ff71 	bl	80091f4 <UART_WaitOnFlagUntilTimeout>
 8008312:	4603      	mov	r3, r0
 8008314:	2b00      	cmp	r3, #0
 8008316:	d004      	beq.n	8008322 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	2220      	movs	r2, #32
 800831c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800831e:	2303      	movs	r3, #3
 8008320:	e03b      	b.n	800839a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8008322:	69fb      	ldr	r3, [r7, #28]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d10b      	bne.n	8008340 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008328:	69bb      	ldr	r3, [r7, #24]
 800832a:	881a      	ldrh	r2, [r3, #0]
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008334:	b292      	uxth	r2, r2
 8008336:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008338:	69bb      	ldr	r3, [r7, #24]
 800833a:	3302      	adds	r3, #2
 800833c:	61bb      	str	r3, [r7, #24]
 800833e:	e007      	b.n	8008350 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008340:	69fb      	ldr	r3, [r7, #28]
 8008342:	781a      	ldrb	r2, [r3, #0]
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800834a:	69fb      	ldr	r3, [r7, #28]
 800834c:	3301      	adds	r3, #1
 800834e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008356:	b29b      	uxth	r3, r3
 8008358:	3b01      	subs	r3, #1
 800835a:	b29a      	uxth	r2, r3
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008368:	b29b      	uxth	r3, r3
 800836a:	2b00      	cmp	r3, #0
 800836c:	d1c9      	bne.n	8008302 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	9300      	str	r3, [sp, #0]
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	2200      	movs	r2, #0
 8008376:	2140      	movs	r1, #64	@ 0x40
 8008378:	68f8      	ldr	r0, [r7, #12]
 800837a:	f000 ff3b 	bl	80091f4 <UART_WaitOnFlagUntilTimeout>
 800837e:	4603      	mov	r3, r0
 8008380:	2b00      	cmp	r3, #0
 8008382:	d004      	beq.n	800838e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	2220      	movs	r2, #32
 8008388:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800838a:	2303      	movs	r3, #3
 800838c:	e005      	b.n	800839a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	2220      	movs	r2, #32
 8008392:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8008394:	2300      	movs	r3, #0
 8008396:	e000      	b.n	800839a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8008398:	2302      	movs	r3, #2
  }
}
 800839a:	4618      	mov	r0, r3
 800839c:	3720      	adds	r7, #32
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}
	...

080083a4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b0ba      	sub	sp, #232	@ 0xe8
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	69db      	ldr	r3, [r3, #28]
 80083b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	689b      	ldr	r3, [r3, #8]
 80083c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80083ca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80083ce:	f640 030f 	movw	r3, #2063	@ 0x80f
 80083d2:	4013      	ands	r3, r2
 80083d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80083d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d115      	bne.n	800840c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80083e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083e4:	f003 0320 	and.w	r3, r3, #32
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d00f      	beq.n	800840c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80083ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80083f0:	f003 0320 	and.w	r3, r3, #32
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d009      	beq.n	800840c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	f000 82ca 	beq.w	8008996 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	4798      	blx	r3
      }
      return;
 800840a:	e2c4      	b.n	8008996 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800840c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008410:	2b00      	cmp	r3, #0
 8008412:	f000 8117 	beq.w	8008644 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008416:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800841a:	f003 0301 	and.w	r3, r3, #1
 800841e:	2b00      	cmp	r3, #0
 8008420:	d106      	bne.n	8008430 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008422:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008426:	4b85      	ldr	r3, [pc, #532]	@ (800863c <HAL_UART_IRQHandler+0x298>)
 8008428:	4013      	ands	r3, r2
 800842a:	2b00      	cmp	r3, #0
 800842c:	f000 810a 	beq.w	8008644 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008430:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008434:	f003 0301 	and.w	r3, r3, #1
 8008438:	2b00      	cmp	r3, #0
 800843a:	d011      	beq.n	8008460 <HAL_UART_IRQHandler+0xbc>
 800843c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008440:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008444:	2b00      	cmp	r3, #0
 8008446:	d00b      	beq.n	8008460 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	2201      	movs	r2, #1
 800844e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008456:	f043 0201 	orr.w	r2, r3, #1
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008460:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008464:	f003 0302 	and.w	r3, r3, #2
 8008468:	2b00      	cmp	r3, #0
 800846a:	d011      	beq.n	8008490 <HAL_UART_IRQHandler+0xec>
 800846c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008470:	f003 0301 	and.w	r3, r3, #1
 8008474:	2b00      	cmp	r3, #0
 8008476:	d00b      	beq.n	8008490 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	2202      	movs	r2, #2
 800847e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008486:	f043 0204 	orr.w	r2, r3, #4
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008490:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008494:	f003 0304 	and.w	r3, r3, #4
 8008498:	2b00      	cmp	r3, #0
 800849a:	d011      	beq.n	80084c0 <HAL_UART_IRQHandler+0x11c>
 800849c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80084a0:	f003 0301 	and.w	r3, r3, #1
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d00b      	beq.n	80084c0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	2204      	movs	r2, #4
 80084ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80084b6:	f043 0202 	orr.w	r2, r3, #2
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80084c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084c4:	f003 0308 	and.w	r3, r3, #8
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d017      	beq.n	80084fc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80084cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80084d0:	f003 0320 	and.w	r3, r3, #32
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d105      	bne.n	80084e4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80084d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80084dc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d00b      	beq.n	80084fc <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	2208      	movs	r2, #8
 80084ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80084f2:	f043 0208 	orr.w	r2, r3, #8
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80084fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008500:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008504:	2b00      	cmp	r3, #0
 8008506:	d012      	beq.n	800852e <HAL_UART_IRQHandler+0x18a>
 8008508:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800850c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008510:	2b00      	cmp	r3, #0
 8008512:	d00c      	beq.n	800852e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800851c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008524:	f043 0220 	orr.w	r2, r3, #32
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008534:	2b00      	cmp	r3, #0
 8008536:	f000 8230 	beq.w	800899a <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800853a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800853e:	f003 0320 	and.w	r3, r3, #32
 8008542:	2b00      	cmp	r3, #0
 8008544:	d00d      	beq.n	8008562 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008546:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800854a:	f003 0320 	and.w	r3, r3, #32
 800854e:	2b00      	cmp	r3, #0
 8008550:	d007      	beq.n	8008562 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008556:	2b00      	cmp	r3, #0
 8008558:	d003      	beq.n	8008562 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008568:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	689b      	ldr	r3, [r3, #8]
 8008572:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008576:	2b40      	cmp	r3, #64	@ 0x40
 8008578:	d005      	beq.n	8008586 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800857a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800857e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008582:	2b00      	cmp	r3, #0
 8008584:	d04f      	beq.n	8008626 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f000 fea1 	bl	80092ce <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	689b      	ldr	r3, [r3, #8]
 8008592:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008596:	2b40      	cmp	r3, #64	@ 0x40
 8008598:	d141      	bne.n	800861e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	3308      	adds	r3, #8
 80085a0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80085a8:	e853 3f00 	ldrex	r3, [r3]
 80085ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80085b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80085b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80085b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	3308      	adds	r3, #8
 80085c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80085c6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80085ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80085d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80085d6:	e841 2300 	strex	r3, r2, [r1]
 80085da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80085de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d1d9      	bne.n	800859a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d013      	beq.n	8008616 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80085f2:	4a13      	ldr	r2, [pc, #76]	@ (8008640 <HAL_UART_IRQHandler+0x29c>)
 80085f4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80085fa:	4618      	mov	r0, r3
 80085fc:	f7fb ff16 	bl	800442c <HAL_DMA_Abort_IT>
 8008600:	4603      	mov	r3, r0
 8008602:	2b00      	cmp	r3, #0
 8008604:	d017      	beq.n	8008636 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800860a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800860c:	687a      	ldr	r2, [r7, #4]
 800860e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8008610:	4610      	mov	r0, r2
 8008612:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008614:	e00f      	b.n	8008636 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f000 f9d4 	bl	80089c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800861c:	e00b      	b.n	8008636 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f000 f9d0 	bl	80089c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008624:	e007      	b.n	8008636 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f000 f9cc 	bl	80089c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2200      	movs	r2, #0
 8008630:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8008634:	e1b1      	b.n	800899a <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008636:	bf00      	nop
    return;
 8008638:	e1af      	b.n	800899a <HAL_UART_IRQHandler+0x5f6>
 800863a:	bf00      	nop
 800863c:	04000120 	.word	0x04000120
 8008640:	08009397 	.word	0x08009397

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008648:	2b01      	cmp	r3, #1
 800864a:	f040 816a 	bne.w	8008922 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800864e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008652:	f003 0310 	and.w	r3, r3, #16
 8008656:	2b00      	cmp	r3, #0
 8008658:	f000 8163 	beq.w	8008922 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800865c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008660:	f003 0310 	and.w	r3, r3, #16
 8008664:	2b00      	cmp	r3, #0
 8008666:	f000 815c 	beq.w	8008922 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	2210      	movs	r2, #16
 8008670:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	689b      	ldr	r3, [r3, #8]
 8008678:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800867c:	2b40      	cmp	r3, #64	@ 0x40
 800867e:	f040 80d4 	bne.w	800882a <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	685b      	ldr	r3, [r3, #4]
 800868a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800868e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008692:	2b00      	cmp	r3, #0
 8008694:	f000 80ad 	beq.w	80087f2 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800869e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80086a2:	429a      	cmp	r2, r3
 80086a4:	f080 80a5 	bcs.w	80087f2 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80086ae:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f003 0320 	and.w	r3, r3, #32
 80086be:	2b00      	cmp	r3, #0
 80086c0:	f040 8086 	bne.w	80087d0 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80086d0:	e853 3f00 	ldrex	r3, [r3]
 80086d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80086d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80086dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80086e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	461a      	mov	r2, r3
 80086ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80086ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80086f2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80086fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80086fe:	e841 2300 	strex	r3, r2, [r1]
 8008702:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008706:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800870a:	2b00      	cmp	r3, #0
 800870c:	d1da      	bne.n	80086c4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	3308      	adds	r3, #8
 8008714:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008716:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008718:	e853 3f00 	ldrex	r3, [r3]
 800871c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800871e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008720:	f023 0301 	bic.w	r3, r3, #1
 8008724:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	3308      	adds	r3, #8
 800872e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008732:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008736:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008738:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800873a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800873e:	e841 2300 	strex	r3, r2, [r1]
 8008742:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008744:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008746:	2b00      	cmp	r3, #0
 8008748:	d1e1      	bne.n	800870e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	3308      	adds	r3, #8
 8008750:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008752:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008754:	e853 3f00 	ldrex	r3, [r3]
 8008758:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800875a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800875c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008760:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	3308      	adds	r3, #8
 800876a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800876e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008770:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008772:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008774:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008776:	e841 2300 	strex	r3, r2, [r1]
 800877a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800877c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800877e:	2b00      	cmp	r3, #0
 8008780:	d1e3      	bne.n	800874a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2220      	movs	r2, #32
 8008786:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2200      	movs	r2, #0
 800878e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008796:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008798:	e853 3f00 	ldrex	r3, [r3]
 800879c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800879e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80087a0:	f023 0310 	bic.w	r3, r3, #16
 80087a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	461a      	mov	r2, r3
 80087ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80087b2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80087b4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087b6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80087b8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80087ba:	e841 2300 	strex	r3, r2, [r1]
 80087be:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80087c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d1e4      	bne.n	8008790 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087ca:	4618      	mov	r0, r3
 80087cc:	f7fb fdf0 	bl	80043b0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2202      	movs	r2, #2
 80087d4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80087e2:	b29b      	uxth	r3, r3
 80087e4:	1ad3      	subs	r3, r2, r3
 80087e6:	b29b      	uxth	r3, r3
 80087e8:	4619      	mov	r1, r3
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f000 f8f4 	bl	80089d8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80087f0:	e0d5      	b.n	800899e <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80087f8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80087fc:	429a      	cmp	r2, r3
 80087fe:	f040 80ce 	bne.w	800899e <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f003 0320 	and.w	r3, r3, #32
 800880e:	2b20      	cmp	r3, #32
 8008810:	f040 80c5 	bne.w	800899e <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2202      	movs	r2, #2
 8008818:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008820:	4619      	mov	r1, r3
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f000 f8d8 	bl	80089d8 <HAL_UARTEx_RxEventCallback>
      return;
 8008828:	e0b9      	b.n	800899e <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008836:	b29b      	uxth	r3, r3
 8008838:	1ad3      	subs	r3, r2, r3
 800883a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008844:	b29b      	uxth	r3, r3
 8008846:	2b00      	cmp	r3, #0
 8008848:	f000 80ab 	beq.w	80089a2 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 800884c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008850:	2b00      	cmp	r3, #0
 8008852:	f000 80a6 	beq.w	80089a2 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800885c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800885e:	e853 3f00 	ldrex	r3, [r3]
 8008862:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008864:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008866:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800886a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	461a      	mov	r2, r3
 8008874:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008878:	647b      	str	r3, [r7, #68]	@ 0x44
 800887a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800887c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800887e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008880:	e841 2300 	strex	r3, r2, [r1]
 8008884:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008886:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008888:	2b00      	cmp	r3, #0
 800888a:	d1e4      	bne.n	8008856 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	3308      	adds	r3, #8
 8008892:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008896:	e853 3f00 	ldrex	r3, [r3]
 800889a:	623b      	str	r3, [r7, #32]
   return(result);
 800889c:	6a3b      	ldr	r3, [r7, #32]
 800889e:	f023 0301 	bic.w	r3, r3, #1
 80088a2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	3308      	adds	r3, #8
 80088ac:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80088b0:	633a      	str	r2, [r7, #48]	@ 0x30
 80088b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80088b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80088b8:	e841 2300 	strex	r3, r2, [r1]
 80088bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80088be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d1e3      	bne.n	800888c <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2220      	movs	r2, #32
 80088c8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2200      	movs	r2, #0
 80088d0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2200      	movs	r2, #0
 80088d6:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088de:	693b      	ldr	r3, [r7, #16]
 80088e0:	e853 3f00 	ldrex	r3, [r3]
 80088e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	f023 0310 	bic.w	r3, r3, #16
 80088ec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	461a      	mov	r2, r3
 80088f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80088fa:	61fb      	str	r3, [r7, #28]
 80088fc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088fe:	69b9      	ldr	r1, [r7, #24]
 8008900:	69fa      	ldr	r2, [r7, #28]
 8008902:	e841 2300 	strex	r3, r2, [r1]
 8008906:	617b      	str	r3, [r7, #20]
   return(result);
 8008908:	697b      	ldr	r3, [r7, #20]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d1e4      	bne.n	80088d8 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2202      	movs	r2, #2
 8008912:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008914:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008918:	4619      	mov	r1, r3
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f000 f85c 	bl	80089d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008920:	e03f      	b.n	80089a2 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008922:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008926:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800892a:	2b00      	cmp	r3, #0
 800892c:	d00e      	beq.n	800894c <HAL_UART_IRQHandler+0x5a8>
 800892e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008932:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008936:	2b00      	cmp	r3, #0
 8008938:	d008      	beq.n	800894c <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008942:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f000 fd66 	bl	8009416 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800894a:	e02d      	b.n	80089a8 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800894c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008950:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008954:	2b00      	cmp	r3, #0
 8008956:	d00e      	beq.n	8008976 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008958:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800895c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008960:	2b00      	cmp	r3, #0
 8008962:	d008      	beq.n	8008976 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008968:	2b00      	cmp	r3, #0
 800896a:	d01c      	beq.n	80089a6 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	4798      	blx	r3
    }
    return;
 8008974:	e017      	b.n	80089a6 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008976:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800897a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800897e:	2b00      	cmp	r3, #0
 8008980:	d012      	beq.n	80089a8 <HAL_UART_IRQHandler+0x604>
 8008982:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008986:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800898a:	2b00      	cmp	r3, #0
 800898c:	d00c      	beq.n	80089a8 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f000 fd17 	bl	80093c2 <UART_EndTransmit_IT>
    return;
 8008994:	e008      	b.n	80089a8 <HAL_UART_IRQHandler+0x604>
      return;
 8008996:	bf00      	nop
 8008998:	e006      	b.n	80089a8 <HAL_UART_IRQHandler+0x604>
    return;
 800899a:	bf00      	nop
 800899c:	e004      	b.n	80089a8 <HAL_UART_IRQHandler+0x604>
      return;
 800899e:	bf00      	nop
 80089a0:	e002      	b.n	80089a8 <HAL_UART_IRQHandler+0x604>
      return;
 80089a2:	bf00      	nop
 80089a4:	e000      	b.n	80089a8 <HAL_UART_IRQHandler+0x604>
    return;
 80089a6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80089a8:	37e8      	adds	r7, #232	@ 0xe8
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}
 80089ae:	bf00      	nop

080089b0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80089b0:	b480      	push	{r7}
 80089b2:	b083      	sub	sp, #12
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80089b8:	bf00      	nop
 80089ba:	370c      	adds	r7, #12
 80089bc:	46bd      	mov	sp, r7
 80089be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c2:	4770      	bx	lr

080089c4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80089c4:	b480      	push	{r7}
 80089c6:	b083      	sub	sp, #12
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80089cc:	bf00      	nop
 80089ce:	370c      	adds	r7, #12
 80089d0:	46bd      	mov	sp, r7
 80089d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d6:	4770      	bx	lr

080089d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80089d8:	b480      	push	{r7}
 80089da:	b083      	sub	sp, #12
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
 80089e0:	460b      	mov	r3, r1
 80089e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80089e4:	bf00      	nop
 80089e6:	370c      	adds	r7, #12
 80089e8:	46bd      	mov	sp, r7
 80089ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ee:	4770      	bx	lr

080089f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80089f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80089f4:	b08a      	sub	sp, #40	@ 0x28
 80089f6:	af00      	add	r7, sp, #0
 80089f8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80089fa:	2300      	movs	r3, #0
 80089fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	689a      	ldr	r2, [r3, #8]
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	691b      	ldr	r3, [r3, #16]
 8008a08:	431a      	orrs	r2, r3
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	695b      	ldr	r3, [r3, #20]
 8008a0e:	431a      	orrs	r2, r3
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	69db      	ldr	r3, [r3, #28]
 8008a14:	4313      	orrs	r3, r2
 8008a16:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	681a      	ldr	r2, [r3, #0]
 8008a1e:	4ba4      	ldr	r3, [pc, #656]	@ (8008cb0 <UART_SetConfig+0x2c0>)
 8008a20:	4013      	ands	r3, r2
 8008a22:	68fa      	ldr	r2, [r7, #12]
 8008a24:	6812      	ldr	r2, [r2, #0]
 8008a26:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008a28:	430b      	orrs	r3, r1
 8008a2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	685b      	ldr	r3, [r3, #4]
 8008a32:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	68da      	ldr	r2, [r3, #12]
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	430a      	orrs	r2, r1
 8008a40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	699b      	ldr	r3, [r3, #24]
 8008a46:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	4a99      	ldr	r2, [pc, #612]	@ (8008cb4 <UART_SetConfig+0x2c4>)
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d004      	beq.n	8008a5c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	6a1b      	ldr	r3, [r3, #32]
 8008a56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a58:	4313      	orrs	r3, r2
 8008a5a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	689b      	ldr	r3, [r3, #8]
 8008a62:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a6c:	430a      	orrs	r2, r1
 8008a6e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	4a90      	ldr	r2, [pc, #576]	@ (8008cb8 <UART_SetConfig+0x2c8>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d126      	bne.n	8008ac8 <UART_SetConfig+0xd8>
 8008a7a:	4b90      	ldr	r3, [pc, #576]	@ (8008cbc <UART_SetConfig+0x2cc>)
 8008a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a80:	f003 0303 	and.w	r3, r3, #3
 8008a84:	2b03      	cmp	r3, #3
 8008a86:	d81b      	bhi.n	8008ac0 <UART_SetConfig+0xd0>
 8008a88:	a201      	add	r2, pc, #4	@ (adr r2, 8008a90 <UART_SetConfig+0xa0>)
 8008a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a8e:	bf00      	nop
 8008a90:	08008aa1 	.word	0x08008aa1
 8008a94:	08008ab1 	.word	0x08008ab1
 8008a98:	08008aa9 	.word	0x08008aa9
 8008a9c:	08008ab9 	.word	0x08008ab9
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008aa6:	e116      	b.n	8008cd6 <UART_SetConfig+0x2e6>
 8008aa8:	2302      	movs	r3, #2
 8008aaa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008aae:	e112      	b.n	8008cd6 <UART_SetConfig+0x2e6>
 8008ab0:	2304      	movs	r3, #4
 8008ab2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008ab6:	e10e      	b.n	8008cd6 <UART_SetConfig+0x2e6>
 8008ab8:	2308      	movs	r3, #8
 8008aba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008abe:	e10a      	b.n	8008cd6 <UART_SetConfig+0x2e6>
 8008ac0:	2310      	movs	r3, #16
 8008ac2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008ac6:	e106      	b.n	8008cd6 <UART_SetConfig+0x2e6>
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4a7c      	ldr	r2, [pc, #496]	@ (8008cc0 <UART_SetConfig+0x2d0>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d138      	bne.n	8008b44 <UART_SetConfig+0x154>
 8008ad2:	4b7a      	ldr	r3, [pc, #488]	@ (8008cbc <UART_SetConfig+0x2cc>)
 8008ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ad8:	f003 030c 	and.w	r3, r3, #12
 8008adc:	2b0c      	cmp	r3, #12
 8008ade:	d82d      	bhi.n	8008b3c <UART_SetConfig+0x14c>
 8008ae0:	a201      	add	r2, pc, #4	@ (adr r2, 8008ae8 <UART_SetConfig+0xf8>)
 8008ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ae6:	bf00      	nop
 8008ae8:	08008b1d 	.word	0x08008b1d
 8008aec:	08008b3d 	.word	0x08008b3d
 8008af0:	08008b3d 	.word	0x08008b3d
 8008af4:	08008b3d 	.word	0x08008b3d
 8008af8:	08008b2d 	.word	0x08008b2d
 8008afc:	08008b3d 	.word	0x08008b3d
 8008b00:	08008b3d 	.word	0x08008b3d
 8008b04:	08008b3d 	.word	0x08008b3d
 8008b08:	08008b25 	.word	0x08008b25
 8008b0c:	08008b3d 	.word	0x08008b3d
 8008b10:	08008b3d 	.word	0x08008b3d
 8008b14:	08008b3d 	.word	0x08008b3d
 8008b18:	08008b35 	.word	0x08008b35
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008b22:	e0d8      	b.n	8008cd6 <UART_SetConfig+0x2e6>
 8008b24:	2302      	movs	r3, #2
 8008b26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008b2a:	e0d4      	b.n	8008cd6 <UART_SetConfig+0x2e6>
 8008b2c:	2304      	movs	r3, #4
 8008b2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008b32:	e0d0      	b.n	8008cd6 <UART_SetConfig+0x2e6>
 8008b34:	2308      	movs	r3, #8
 8008b36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008b3a:	e0cc      	b.n	8008cd6 <UART_SetConfig+0x2e6>
 8008b3c:	2310      	movs	r3, #16
 8008b3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008b42:	e0c8      	b.n	8008cd6 <UART_SetConfig+0x2e6>
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	4a5e      	ldr	r2, [pc, #376]	@ (8008cc4 <UART_SetConfig+0x2d4>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d125      	bne.n	8008b9a <UART_SetConfig+0x1aa>
 8008b4e:	4b5b      	ldr	r3, [pc, #364]	@ (8008cbc <UART_SetConfig+0x2cc>)
 8008b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b54:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008b58:	2b30      	cmp	r3, #48	@ 0x30
 8008b5a:	d016      	beq.n	8008b8a <UART_SetConfig+0x19a>
 8008b5c:	2b30      	cmp	r3, #48	@ 0x30
 8008b5e:	d818      	bhi.n	8008b92 <UART_SetConfig+0x1a2>
 8008b60:	2b20      	cmp	r3, #32
 8008b62:	d00a      	beq.n	8008b7a <UART_SetConfig+0x18a>
 8008b64:	2b20      	cmp	r3, #32
 8008b66:	d814      	bhi.n	8008b92 <UART_SetConfig+0x1a2>
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d002      	beq.n	8008b72 <UART_SetConfig+0x182>
 8008b6c:	2b10      	cmp	r3, #16
 8008b6e:	d008      	beq.n	8008b82 <UART_SetConfig+0x192>
 8008b70:	e00f      	b.n	8008b92 <UART_SetConfig+0x1a2>
 8008b72:	2300      	movs	r3, #0
 8008b74:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008b78:	e0ad      	b.n	8008cd6 <UART_SetConfig+0x2e6>
 8008b7a:	2302      	movs	r3, #2
 8008b7c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008b80:	e0a9      	b.n	8008cd6 <UART_SetConfig+0x2e6>
 8008b82:	2304      	movs	r3, #4
 8008b84:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008b88:	e0a5      	b.n	8008cd6 <UART_SetConfig+0x2e6>
 8008b8a:	2308      	movs	r3, #8
 8008b8c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008b90:	e0a1      	b.n	8008cd6 <UART_SetConfig+0x2e6>
 8008b92:	2310      	movs	r3, #16
 8008b94:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008b98:	e09d      	b.n	8008cd6 <UART_SetConfig+0x2e6>
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	4a4a      	ldr	r2, [pc, #296]	@ (8008cc8 <UART_SetConfig+0x2d8>)
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d125      	bne.n	8008bf0 <UART_SetConfig+0x200>
 8008ba4:	4b45      	ldr	r3, [pc, #276]	@ (8008cbc <UART_SetConfig+0x2cc>)
 8008ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008baa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008bae:	2bc0      	cmp	r3, #192	@ 0xc0
 8008bb0:	d016      	beq.n	8008be0 <UART_SetConfig+0x1f0>
 8008bb2:	2bc0      	cmp	r3, #192	@ 0xc0
 8008bb4:	d818      	bhi.n	8008be8 <UART_SetConfig+0x1f8>
 8008bb6:	2b80      	cmp	r3, #128	@ 0x80
 8008bb8:	d00a      	beq.n	8008bd0 <UART_SetConfig+0x1e0>
 8008bba:	2b80      	cmp	r3, #128	@ 0x80
 8008bbc:	d814      	bhi.n	8008be8 <UART_SetConfig+0x1f8>
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d002      	beq.n	8008bc8 <UART_SetConfig+0x1d8>
 8008bc2:	2b40      	cmp	r3, #64	@ 0x40
 8008bc4:	d008      	beq.n	8008bd8 <UART_SetConfig+0x1e8>
 8008bc6:	e00f      	b.n	8008be8 <UART_SetConfig+0x1f8>
 8008bc8:	2300      	movs	r3, #0
 8008bca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008bce:	e082      	b.n	8008cd6 <UART_SetConfig+0x2e6>
 8008bd0:	2302      	movs	r3, #2
 8008bd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008bd6:	e07e      	b.n	8008cd6 <UART_SetConfig+0x2e6>
 8008bd8:	2304      	movs	r3, #4
 8008bda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008bde:	e07a      	b.n	8008cd6 <UART_SetConfig+0x2e6>
 8008be0:	2308      	movs	r3, #8
 8008be2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008be6:	e076      	b.n	8008cd6 <UART_SetConfig+0x2e6>
 8008be8:	2310      	movs	r3, #16
 8008bea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008bee:	e072      	b.n	8008cd6 <UART_SetConfig+0x2e6>
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	4a35      	ldr	r2, [pc, #212]	@ (8008ccc <UART_SetConfig+0x2dc>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d12a      	bne.n	8008c50 <UART_SetConfig+0x260>
 8008bfa:	4b30      	ldr	r3, [pc, #192]	@ (8008cbc <UART_SetConfig+0x2cc>)
 8008bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c00:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008c04:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008c08:	d01a      	beq.n	8008c40 <UART_SetConfig+0x250>
 8008c0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008c0e:	d81b      	bhi.n	8008c48 <UART_SetConfig+0x258>
 8008c10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c14:	d00c      	beq.n	8008c30 <UART_SetConfig+0x240>
 8008c16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c1a:	d815      	bhi.n	8008c48 <UART_SetConfig+0x258>
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d003      	beq.n	8008c28 <UART_SetConfig+0x238>
 8008c20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c24:	d008      	beq.n	8008c38 <UART_SetConfig+0x248>
 8008c26:	e00f      	b.n	8008c48 <UART_SetConfig+0x258>
 8008c28:	2300      	movs	r3, #0
 8008c2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008c2e:	e052      	b.n	8008cd6 <UART_SetConfig+0x2e6>
 8008c30:	2302      	movs	r3, #2
 8008c32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008c36:	e04e      	b.n	8008cd6 <UART_SetConfig+0x2e6>
 8008c38:	2304      	movs	r3, #4
 8008c3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008c3e:	e04a      	b.n	8008cd6 <UART_SetConfig+0x2e6>
 8008c40:	2308      	movs	r3, #8
 8008c42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008c46:	e046      	b.n	8008cd6 <UART_SetConfig+0x2e6>
 8008c48:	2310      	movs	r3, #16
 8008c4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008c4e:	e042      	b.n	8008cd6 <UART_SetConfig+0x2e6>
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	4a17      	ldr	r2, [pc, #92]	@ (8008cb4 <UART_SetConfig+0x2c4>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d13a      	bne.n	8008cd0 <UART_SetConfig+0x2e0>
 8008c5a:	4b18      	ldr	r3, [pc, #96]	@ (8008cbc <UART_SetConfig+0x2cc>)
 8008c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c60:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008c64:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008c68:	d01a      	beq.n	8008ca0 <UART_SetConfig+0x2b0>
 8008c6a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008c6e:	d81b      	bhi.n	8008ca8 <UART_SetConfig+0x2b8>
 8008c70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008c74:	d00c      	beq.n	8008c90 <UART_SetConfig+0x2a0>
 8008c76:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008c7a:	d815      	bhi.n	8008ca8 <UART_SetConfig+0x2b8>
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d003      	beq.n	8008c88 <UART_SetConfig+0x298>
 8008c80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008c84:	d008      	beq.n	8008c98 <UART_SetConfig+0x2a8>
 8008c86:	e00f      	b.n	8008ca8 <UART_SetConfig+0x2b8>
 8008c88:	2300      	movs	r3, #0
 8008c8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008c8e:	e022      	b.n	8008cd6 <UART_SetConfig+0x2e6>
 8008c90:	2302      	movs	r3, #2
 8008c92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008c96:	e01e      	b.n	8008cd6 <UART_SetConfig+0x2e6>
 8008c98:	2304      	movs	r3, #4
 8008c9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008c9e:	e01a      	b.n	8008cd6 <UART_SetConfig+0x2e6>
 8008ca0:	2308      	movs	r3, #8
 8008ca2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008ca6:	e016      	b.n	8008cd6 <UART_SetConfig+0x2e6>
 8008ca8:	2310      	movs	r3, #16
 8008caa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008cae:	e012      	b.n	8008cd6 <UART_SetConfig+0x2e6>
 8008cb0:	efff69f3 	.word	0xefff69f3
 8008cb4:	40008000 	.word	0x40008000
 8008cb8:	40013800 	.word	0x40013800
 8008cbc:	40021000 	.word	0x40021000
 8008cc0:	40004400 	.word	0x40004400
 8008cc4:	40004800 	.word	0x40004800
 8008cc8:	40004c00 	.word	0x40004c00
 8008ccc:	40005000 	.word	0x40005000
 8008cd0:	2310      	movs	r3, #16
 8008cd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	4a9f      	ldr	r2, [pc, #636]	@ (8008f58 <UART_SetConfig+0x568>)
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	d17a      	bne.n	8008dd6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008ce0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008ce4:	2b08      	cmp	r3, #8
 8008ce6:	d824      	bhi.n	8008d32 <UART_SetConfig+0x342>
 8008ce8:	a201      	add	r2, pc, #4	@ (adr r2, 8008cf0 <UART_SetConfig+0x300>)
 8008cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cee:	bf00      	nop
 8008cf0:	08008d15 	.word	0x08008d15
 8008cf4:	08008d33 	.word	0x08008d33
 8008cf8:	08008d1d 	.word	0x08008d1d
 8008cfc:	08008d33 	.word	0x08008d33
 8008d00:	08008d23 	.word	0x08008d23
 8008d04:	08008d33 	.word	0x08008d33
 8008d08:	08008d33 	.word	0x08008d33
 8008d0c:	08008d33 	.word	0x08008d33
 8008d10:	08008d2b 	.word	0x08008d2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d14:	f7fd f8c2 	bl	8005e9c <HAL_RCC_GetPCLK1Freq>
 8008d18:	61f8      	str	r0, [r7, #28]
        break;
 8008d1a:	e010      	b.n	8008d3e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008d1c:	4b8f      	ldr	r3, [pc, #572]	@ (8008f5c <UART_SetConfig+0x56c>)
 8008d1e:	61fb      	str	r3, [r7, #28]
        break;
 8008d20:	e00d      	b.n	8008d3e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008d22:	f7fd f823 	bl	8005d6c <HAL_RCC_GetSysClockFreq>
 8008d26:	61f8      	str	r0, [r7, #28]
        break;
 8008d28:	e009      	b.n	8008d3e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008d2e:	61fb      	str	r3, [r7, #28]
        break;
 8008d30:	e005      	b.n	8008d3e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8008d32:	2300      	movs	r3, #0
 8008d34:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008d36:	2301      	movs	r3, #1
 8008d38:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008d3c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008d3e:	69fb      	ldr	r3, [r7, #28]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	f000 80fb 	beq.w	8008f3c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	685a      	ldr	r2, [r3, #4]
 8008d4a:	4613      	mov	r3, r2
 8008d4c:	005b      	lsls	r3, r3, #1
 8008d4e:	4413      	add	r3, r2
 8008d50:	69fa      	ldr	r2, [r7, #28]
 8008d52:	429a      	cmp	r2, r3
 8008d54:	d305      	bcc.n	8008d62 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	685b      	ldr	r3, [r3, #4]
 8008d5a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008d5c:	69fa      	ldr	r2, [r7, #28]
 8008d5e:	429a      	cmp	r2, r3
 8008d60:	d903      	bls.n	8008d6a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8008d62:	2301      	movs	r3, #1
 8008d64:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008d68:	e0e8      	b.n	8008f3c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008d6a:	69fb      	ldr	r3, [r7, #28]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	461c      	mov	r4, r3
 8008d70:	4615      	mov	r5, r2
 8008d72:	f04f 0200 	mov.w	r2, #0
 8008d76:	f04f 0300 	mov.w	r3, #0
 8008d7a:	022b      	lsls	r3, r5, #8
 8008d7c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008d80:	0222      	lsls	r2, r4, #8
 8008d82:	68f9      	ldr	r1, [r7, #12]
 8008d84:	6849      	ldr	r1, [r1, #4]
 8008d86:	0849      	lsrs	r1, r1, #1
 8008d88:	2000      	movs	r0, #0
 8008d8a:	4688      	mov	r8, r1
 8008d8c:	4681      	mov	r9, r0
 8008d8e:	eb12 0a08 	adds.w	sl, r2, r8
 8008d92:	eb43 0b09 	adc.w	fp, r3, r9
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	685b      	ldr	r3, [r3, #4]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	603b      	str	r3, [r7, #0]
 8008d9e:	607a      	str	r2, [r7, #4]
 8008da0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008da4:	4650      	mov	r0, sl
 8008da6:	4659      	mov	r1, fp
 8008da8:	f7f7 fa0e 	bl	80001c8 <__aeabi_uldivmod>
 8008dac:	4602      	mov	r2, r0
 8008dae:	460b      	mov	r3, r1
 8008db0:	4613      	mov	r3, r2
 8008db2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008db4:	69bb      	ldr	r3, [r7, #24]
 8008db6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008dba:	d308      	bcc.n	8008dce <UART_SetConfig+0x3de>
 8008dbc:	69bb      	ldr	r3, [r7, #24]
 8008dbe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008dc2:	d204      	bcs.n	8008dce <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	69ba      	ldr	r2, [r7, #24]
 8008dca:	60da      	str	r2, [r3, #12]
 8008dcc:	e0b6      	b.n	8008f3c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8008dce:	2301      	movs	r3, #1
 8008dd0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008dd4:	e0b2      	b.n	8008f3c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	69db      	ldr	r3, [r3, #28]
 8008dda:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008dde:	d15e      	bne.n	8008e9e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8008de0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008de4:	2b08      	cmp	r3, #8
 8008de6:	d828      	bhi.n	8008e3a <UART_SetConfig+0x44a>
 8008de8:	a201      	add	r2, pc, #4	@ (adr r2, 8008df0 <UART_SetConfig+0x400>)
 8008dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dee:	bf00      	nop
 8008df0:	08008e15 	.word	0x08008e15
 8008df4:	08008e1d 	.word	0x08008e1d
 8008df8:	08008e25 	.word	0x08008e25
 8008dfc:	08008e3b 	.word	0x08008e3b
 8008e00:	08008e2b 	.word	0x08008e2b
 8008e04:	08008e3b 	.word	0x08008e3b
 8008e08:	08008e3b 	.word	0x08008e3b
 8008e0c:	08008e3b 	.word	0x08008e3b
 8008e10:	08008e33 	.word	0x08008e33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e14:	f7fd f842 	bl	8005e9c <HAL_RCC_GetPCLK1Freq>
 8008e18:	61f8      	str	r0, [r7, #28]
        break;
 8008e1a:	e014      	b.n	8008e46 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e1c:	f7fd f854 	bl	8005ec8 <HAL_RCC_GetPCLK2Freq>
 8008e20:	61f8      	str	r0, [r7, #28]
        break;
 8008e22:	e010      	b.n	8008e46 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008e24:	4b4d      	ldr	r3, [pc, #308]	@ (8008f5c <UART_SetConfig+0x56c>)
 8008e26:	61fb      	str	r3, [r7, #28]
        break;
 8008e28:	e00d      	b.n	8008e46 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008e2a:	f7fc ff9f 	bl	8005d6c <HAL_RCC_GetSysClockFreq>
 8008e2e:	61f8      	str	r0, [r7, #28]
        break;
 8008e30:	e009      	b.n	8008e46 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008e36:	61fb      	str	r3, [r7, #28]
        break;
 8008e38:	e005      	b.n	8008e46 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008e3e:	2301      	movs	r3, #1
 8008e40:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008e44:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008e46:	69fb      	ldr	r3, [r7, #28]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d077      	beq.n	8008f3c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008e4c:	69fb      	ldr	r3, [r7, #28]
 8008e4e:	005a      	lsls	r2, r3, #1
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	685b      	ldr	r3, [r3, #4]
 8008e54:	085b      	lsrs	r3, r3, #1
 8008e56:	441a      	add	r2, r3
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	685b      	ldr	r3, [r3, #4]
 8008e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e60:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e62:	69bb      	ldr	r3, [r7, #24]
 8008e64:	2b0f      	cmp	r3, #15
 8008e66:	d916      	bls.n	8008e96 <UART_SetConfig+0x4a6>
 8008e68:	69bb      	ldr	r3, [r7, #24]
 8008e6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e6e:	d212      	bcs.n	8008e96 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008e70:	69bb      	ldr	r3, [r7, #24]
 8008e72:	b29b      	uxth	r3, r3
 8008e74:	f023 030f 	bic.w	r3, r3, #15
 8008e78:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008e7a:	69bb      	ldr	r3, [r7, #24]
 8008e7c:	085b      	lsrs	r3, r3, #1
 8008e7e:	b29b      	uxth	r3, r3
 8008e80:	f003 0307 	and.w	r3, r3, #7
 8008e84:	b29a      	uxth	r2, r3
 8008e86:	8afb      	ldrh	r3, [r7, #22]
 8008e88:	4313      	orrs	r3, r2
 8008e8a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	8afa      	ldrh	r2, [r7, #22]
 8008e92:	60da      	str	r2, [r3, #12]
 8008e94:	e052      	b.n	8008f3c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008e96:	2301      	movs	r3, #1
 8008e98:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008e9c:	e04e      	b.n	8008f3c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008e9e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008ea2:	2b08      	cmp	r3, #8
 8008ea4:	d827      	bhi.n	8008ef6 <UART_SetConfig+0x506>
 8008ea6:	a201      	add	r2, pc, #4	@ (adr r2, 8008eac <UART_SetConfig+0x4bc>)
 8008ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eac:	08008ed1 	.word	0x08008ed1
 8008eb0:	08008ed9 	.word	0x08008ed9
 8008eb4:	08008ee1 	.word	0x08008ee1
 8008eb8:	08008ef7 	.word	0x08008ef7
 8008ebc:	08008ee7 	.word	0x08008ee7
 8008ec0:	08008ef7 	.word	0x08008ef7
 8008ec4:	08008ef7 	.word	0x08008ef7
 8008ec8:	08008ef7 	.word	0x08008ef7
 8008ecc:	08008eef 	.word	0x08008eef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ed0:	f7fc ffe4 	bl	8005e9c <HAL_RCC_GetPCLK1Freq>
 8008ed4:	61f8      	str	r0, [r7, #28]
        break;
 8008ed6:	e014      	b.n	8008f02 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008ed8:	f7fc fff6 	bl	8005ec8 <HAL_RCC_GetPCLK2Freq>
 8008edc:	61f8      	str	r0, [r7, #28]
        break;
 8008ede:	e010      	b.n	8008f02 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008ee0:	4b1e      	ldr	r3, [pc, #120]	@ (8008f5c <UART_SetConfig+0x56c>)
 8008ee2:	61fb      	str	r3, [r7, #28]
        break;
 8008ee4:	e00d      	b.n	8008f02 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008ee6:	f7fc ff41 	bl	8005d6c <HAL_RCC_GetSysClockFreq>
 8008eea:	61f8      	str	r0, [r7, #28]
        break;
 8008eec:	e009      	b.n	8008f02 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008eee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008ef2:	61fb      	str	r3, [r7, #28]
        break;
 8008ef4:	e005      	b.n	8008f02 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008efa:	2301      	movs	r3, #1
 8008efc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008f00:	bf00      	nop
    }

    if (pclk != 0U)
 8008f02:	69fb      	ldr	r3, [r7, #28]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d019      	beq.n	8008f3c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	685b      	ldr	r3, [r3, #4]
 8008f0c:	085a      	lsrs	r2, r3, #1
 8008f0e:	69fb      	ldr	r3, [r7, #28]
 8008f10:	441a      	add	r2, r3
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	685b      	ldr	r3, [r3, #4]
 8008f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f1a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f1c:	69bb      	ldr	r3, [r7, #24]
 8008f1e:	2b0f      	cmp	r3, #15
 8008f20:	d909      	bls.n	8008f36 <UART_SetConfig+0x546>
 8008f22:	69bb      	ldr	r3, [r7, #24]
 8008f24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f28:	d205      	bcs.n	8008f36 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008f2a:	69bb      	ldr	r3, [r7, #24]
 8008f2c:	b29a      	uxth	r2, r3
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	60da      	str	r2, [r3, #12]
 8008f34:	e002      	b.n	8008f3c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008f36:	2301      	movs	r3, #1
 8008f38:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	2200      	movs	r2, #0
 8008f46:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8008f48:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	3728      	adds	r7, #40	@ 0x28
 8008f50:	46bd      	mov	sp, r7
 8008f52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f56:	bf00      	nop
 8008f58:	40008000 	.word	0x40008000
 8008f5c:	00f42400 	.word	0x00f42400

08008f60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008f60:	b480      	push	{r7}
 8008f62:	b083      	sub	sp, #12
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f6c:	f003 0308 	and.w	r3, r3, #8
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d00a      	beq.n	8008f8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	685b      	ldr	r3, [r3, #4]
 8008f7a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	430a      	orrs	r2, r1
 8008f88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f8e:	f003 0301 	and.w	r3, r3, #1
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d00a      	beq.n	8008fac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	685b      	ldr	r3, [r3, #4]
 8008f9c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	430a      	orrs	r2, r1
 8008faa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fb0:	f003 0302 	and.w	r3, r3, #2
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d00a      	beq.n	8008fce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	685b      	ldr	r3, [r3, #4]
 8008fbe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	430a      	orrs	r2, r1
 8008fcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fd2:	f003 0304 	and.w	r3, r3, #4
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d00a      	beq.n	8008ff0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	685b      	ldr	r3, [r3, #4]
 8008fe0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	430a      	orrs	r2, r1
 8008fee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ff4:	f003 0310 	and.w	r3, r3, #16
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d00a      	beq.n	8009012 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	689b      	ldr	r3, [r3, #8]
 8009002:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	430a      	orrs	r2, r1
 8009010:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009016:	f003 0320 	and.w	r3, r3, #32
 800901a:	2b00      	cmp	r3, #0
 800901c:	d00a      	beq.n	8009034 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	689b      	ldr	r3, [r3, #8]
 8009024:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	430a      	orrs	r2, r1
 8009032:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009038:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800903c:	2b00      	cmp	r3, #0
 800903e:	d01a      	beq.n	8009076 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	685b      	ldr	r3, [r3, #4]
 8009046:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	430a      	orrs	r2, r1
 8009054:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800905a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800905e:	d10a      	bne.n	8009076 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	685b      	ldr	r3, [r3, #4]
 8009066:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	430a      	orrs	r2, r1
 8009074:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800907a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800907e:	2b00      	cmp	r3, #0
 8009080:	d00a      	beq.n	8009098 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	685b      	ldr	r3, [r3, #4]
 8009088:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	430a      	orrs	r2, r1
 8009096:	605a      	str	r2, [r3, #4]
  }
}
 8009098:	bf00      	nop
 800909a:	370c      	adds	r7, #12
 800909c:	46bd      	mov	sp, r7
 800909e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a2:	4770      	bx	lr

080090a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b098      	sub	sp, #96	@ 0x60
 80090a8:	af02      	add	r7, sp, #8
 80090aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2200      	movs	r2, #0
 80090b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80090b4:	f7f9 f990 	bl	80023d8 <HAL_GetTick>
 80090b8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f003 0308 	and.w	r3, r3, #8
 80090c4:	2b08      	cmp	r3, #8
 80090c6:	d12e      	bne.n	8009126 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80090c8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80090cc:	9300      	str	r3, [sp, #0]
 80090ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80090d0:	2200      	movs	r2, #0
 80090d2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f000 f88c 	bl	80091f4 <UART_WaitOnFlagUntilTimeout>
 80090dc:	4603      	mov	r3, r0
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d021      	beq.n	8009126 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090ea:	e853 3f00 	ldrex	r3, [r3]
 80090ee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80090f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80090f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	461a      	mov	r2, r3
 80090fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009100:	647b      	str	r3, [r7, #68]	@ 0x44
 8009102:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009104:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009106:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009108:	e841 2300 	strex	r3, r2, [r1]
 800910c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800910e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009110:	2b00      	cmp	r3, #0
 8009112:	d1e6      	bne.n	80090e2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2220      	movs	r2, #32
 8009118:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2200      	movs	r2, #0
 800911e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009122:	2303      	movs	r3, #3
 8009124:	e062      	b.n	80091ec <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f003 0304 	and.w	r3, r3, #4
 8009130:	2b04      	cmp	r3, #4
 8009132:	d149      	bne.n	80091c8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009134:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009138:	9300      	str	r3, [sp, #0]
 800913a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800913c:	2200      	movs	r2, #0
 800913e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f000 f856 	bl	80091f4 <UART_WaitOnFlagUntilTimeout>
 8009148:	4603      	mov	r3, r0
 800914a:	2b00      	cmp	r3, #0
 800914c:	d03c      	beq.n	80091c8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009156:	e853 3f00 	ldrex	r3, [r3]
 800915a:	623b      	str	r3, [r7, #32]
   return(result);
 800915c:	6a3b      	ldr	r3, [r7, #32]
 800915e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009162:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	461a      	mov	r2, r3
 800916a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800916c:	633b      	str	r3, [r7, #48]	@ 0x30
 800916e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009170:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009172:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009174:	e841 2300 	strex	r3, r2, [r1]
 8009178:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800917a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800917c:	2b00      	cmp	r3, #0
 800917e:	d1e6      	bne.n	800914e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	3308      	adds	r3, #8
 8009186:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009188:	693b      	ldr	r3, [r7, #16]
 800918a:	e853 3f00 	ldrex	r3, [r3]
 800918e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	f023 0301 	bic.w	r3, r3, #1
 8009196:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	3308      	adds	r3, #8
 800919e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80091a0:	61fa      	str	r2, [r7, #28]
 80091a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091a4:	69b9      	ldr	r1, [r7, #24]
 80091a6:	69fa      	ldr	r2, [r7, #28]
 80091a8:	e841 2300 	strex	r3, r2, [r1]
 80091ac:	617b      	str	r3, [r7, #20]
   return(result);
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d1e5      	bne.n	8009180 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2220      	movs	r2, #32
 80091b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2200      	movs	r2, #0
 80091c0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80091c4:	2303      	movs	r3, #3
 80091c6:	e011      	b.n	80091ec <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2220      	movs	r2, #32
 80091cc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2220      	movs	r2, #32
 80091d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2200      	movs	r2, #0
 80091da:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2200      	movs	r2, #0
 80091e0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2200      	movs	r2, #0
 80091e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80091ea:	2300      	movs	r3, #0
}
 80091ec:	4618      	mov	r0, r3
 80091ee:	3758      	adds	r7, #88	@ 0x58
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}

080091f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b084      	sub	sp, #16
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	60f8      	str	r0, [r7, #12]
 80091fc:	60b9      	str	r1, [r7, #8]
 80091fe:	603b      	str	r3, [r7, #0]
 8009200:	4613      	mov	r3, r2
 8009202:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009204:	e04f      	b.n	80092a6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009206:	69bb      	ldr	r3, [r7, #24]
 8009208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800920c:	d04b      	beq.n	80092a6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800920e:	f7f9 f8e3 	bl	80023d8 <HAL_GetTick>
 8009212:	4602      	mov	r2, r0
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	1ad3      	subs	r3, r2, r3
 8009218:	69ba      	ldr	r2, [r7, #24]
 800921a:	429a      	cmp	r2, r3
 800921c:	d302      	bcc.n	8009224 <UART_WaitOnFlagUntilTimeout+0x30>
 800921e:	69bb      	ldr	r3, [r7, #24]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d101      	bne.n	8009228 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009224:	2303      	movs	r3, #3
 8009226:	e04e      	b.n	80092c6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f003 0304 	and.w	r3, r3, #4
 8009232:	2b00      	cmp	r3, #0
 8009234:	d037      	beq.n	80092a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	2b80      	cmp	r3, #128	@ 0x80
 800923a:	d034      	beq.n	80092a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	2b40      	cmp	r3, #64	@ 0x40
 8009240:	d031      	beq.n	80092a6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	69db      	ldr	r3, [r3, #28]
 8009248:	f003 0308 	and.w	r3, r3, #8
 800924c:	2b08      	cmp	r3, #8
 800924e:	d110      	bne.n	8009272 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	2208      	movs	r2, #8
 8009256:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009258:	68f8      	ldr	r0, [r7, #12]
 800925a:	f000 f838 	bl	80092ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	2208      	movs	r2, #8
 8009262:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	2200      	movs	r2, #0
 800926a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800926e:	2301      	movs	r3, #1
 8009270:	e029      	b.n	80092c6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	69db      	ldr	r3, [r3, #28]
 8009278:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800927c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009280:	d111      	bne.n	80092a6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800928a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800928c:	68f8      	ldr	r0, [r7, #12]
 800928e:	f000 f81e 	bl	80092ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	2220      	movs	r2, #32
 8009296:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	2200      	movs	r2, #0
 800929e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80092a2:	2303      	movs	r3, #3
 80092a4:	e00f      	b.n	80092c6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	69da      	ldr	r2, [r3, #28]
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	4013      	ands	r3, r2
 80092b0:	68ba      	ldr	r2, [r7, #8]
 80092b2:	429a      	cmp	r2, r3
 80092b4:	bf0c      	ite	eq
 80092b6:	2301      	moveq	r3, #1
 80092b8:	2300      	movne	r3, #0
 80092ba:	b2db      	uxtb	r3, r3
 80092bc:	461a      	mov	r2, r3
 80092be:	79fb      	ldrb	r3, [r7, #7]
 80092c0:	429a      	cmp	r2, r3
 80092c2:	d0a0      	beq.n	8009206 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80092c4:	2300      	movs	r3, #0
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3710      	adds	r7, #16
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}

080092ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80092ce:	b480      	push	{r7}
 80092d0:	b095      	sub	sp, #84	@ 0x54
 80092d2:	af00      	add	r7, sp, #0
 80092d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092de:	e853 3f00 	ldrex	r3, [r3]
 80092e2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80092e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80092ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	461a      	mov	r2, r3
 80092f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80092f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80092f6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092f8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80092fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80092fc:	e841 2300 	strex	r3, r2, [r1]
 8009300:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009304:	2b00      	cmp	r3, #0
 8009306:	d1e6      	bne.n	80092d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	3308      	adds	r3, #8
 800930e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009310:	6a3b      	ldr	r3, [r7, #32]
 8009312:	e853 3f00 	ldrex	r3, [r3]
 8009316:	61fb      	str	r3, [r7, #28]
   return(result);
 8009318:	69fb      	ldr	r3, [r7, #28]
 800931a:	f023 0301 	bic.w	r3, r3, #1
 800931e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	3308      	adds	r3, #8
 8009326:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009328:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800932a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800932c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800932e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009330:	e841 2300 	strex	r3, r2, [r1]
 8009334:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009338:	2b00      	cmp	r3, #0
 800933a:	d1e5      	bne.n	8009308 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009340:	2b01      	cmp	r3, #1
 8009342:	d118      	bne.n	8009376 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	e853 3f00 	ldrex	r3, [r3]
 8009350:	60bb      	str	r3, [r7, #8]
   return(result);
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	f023 0310 	bic.w	r3, r3, #16
 8009358:	647b      	str	r3, [r7, #68]	@ 0x44
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	461a      	mov	r2, r3
 8009360:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009362:	61bb      	str	r3, [r7, #24]
 8009364:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009366:	6979      	ldr	r1, [r7, #20]
 8009368:	69ba      	ldr	r2, [r7, #24]
 800936a:	e841 2300 	strex	r3, r2, [r1]
 800936e:	613b      	str	r3, [r7, #16]
   return(result);
 8009370:	693b      	ldr	r3, [r7, #16]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d1e6      	bne.n	8009344 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2220      	movs	r2, #32
 800937a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2200      	movs	r2, #0
 8009382:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2200      	movs	r2, #0
 8009388:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800938a:	bf00      	nop
 800938c:	3754      	adds	r7, #84	@ 0x54
 800938e:	46bd      	mov	sp, r7
 8009390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009394:	4770      	bx	lr

08009396 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009396:	b580      	push	{r7, lr}
 8009398:	b084      	sub	sp, #16
 800939a:	af00      	add	r7, sp, #0
 800939c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093a2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	2200      	movs	r2, #0
 80093a8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	2200      	movs	r2, #0
 80093b0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80093b4:	68f8      	ldr	r0, [r7, #12]
 80093b6:	f7ff fb05 	bl	80089c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80093ba:	bf00      	nop
 80093bc:	3710      	adds	r7, #16
 80093be:	46bd      	mov	sp, r7
 80093c0:	bd80      	pop	{r7, pc}

080093c2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80093c2:	b580      	push	{r7, lr}
 80093c4:	b088      	sub	sp, #32
 80093c6:	af00      	add	r7, sp, #0
 80093c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	e853 3f00 	ldrex	r3, [r3]
 80093d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80093de:	61fb      	str	r3, [r7, #28]
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	461a      	mov	r2, r3
 80093e6:	69fb      	ldr	r3, [r7, #28]
 80093e8:	61bb      	str	r3, [r7, #24]
 80093ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ec:	6979      	ldr	r1, [r7, #20]
 80093ee:	69ba      	ldr	r2, [r7, #24]
 80093f0:	e841 2300 	strex	r3, r2, [r1]
 80093f4:	613b      	str	r3, [r7, #16]
   return(result);
 80093f6:	693b      	ldr	r3, [r7, #16]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d1e6      	bne.n	80093ca <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2220      	movs	r2, #32
 8009400:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2200      	movs	r2, #0
 8009406:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f7ff fad1 	bl	80089b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800940e:	bf00      	nop
 8009410:	3720      	adds	r7, #32
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}

08009416 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009416:	b480      	push	{r7}
 8009418:	b083      	sub	sp, #12
 800941a:	af00      	add	r7, sp, #0
 800941c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800941e:	bf00      	nop
 8009420:	370c      	adds	r7, #12
 8009422:	46bd      	mov	sp, r7
 8009424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009428:	4770      	bx	lr

0800942a <memset>:
 800942a:	4402      	add	r2, r0
 800942c:	4603      	mov	r3, r0
 800942e:	4293      	cmp	r3, r2
 8009430:	d100      	bne.n	8009434 <memset+0xa>
 8009432:	4770      	bx	lr
 8009434:	f803 1b01 	strb.w	r1, [r3], #1
 8009438:	e7f9      	b.n	800942e <memset+0x4>
	...

0800943c <__libc_init_array>:
 800943c:	b570      	push	{r4, r5, r6, lr}
 800943e:	4d0d      	ldr	r5, [pc, #52]	@ (8009474 <__libc_init_array+0x38>)
 8009440:	4c0d      	ldr	r4, [pc, #52]	@ (8009478 <__libc_init_array+0x3c>)
 8009442:	1b64      	subs	r4, r4, r5
 8009444:	10a4      	asrs	r4, r4, #2
 8009446:	2600      	movs	r6, #0
 8009448:	42a6      	cmp	r6, r4
 800944a:	d109      	bne.n	8009460 <__libc_init_array+0x24>
 800944c:	4d0b      	ldr	r5, [pc, #44]	@ (800947c <__libc_init_array+0x40>)
 800944e:	4c0c      	ldr	r4, [pc, #48]	@ (8009480 <__libc_init_array+0x44>)
 8009450:	f000 f818 	bl	8009484 <_init>
 8009454:	1b64      	subs	r4, r4, r5
 8009456:	10a4      	asrs	r4, r4, #2
 8009458:	2600      	movs	r6, #0
 800945a:	42a6      	cmp	r6, r4
 800945c:	d105      	bne.n	800946a <__libc_init_array+0x2e>
 800945e:	bd70      	pop	{r4, r5, r6, pc}
 8009460:	f855 3b04 	ldr.w	r3, [r5], #4
 8009464:	4798      	blx	r3
 8009466:	3601      	adds	r6, #1
 8009468:	e7ee      	b.n	8009448 <__libc_init_array+0xc>
 800946a:	f855 3b04 	ldr.w	r3, [r5], #4
 800946e:	4798      	blx	r3
 8009470:	3601      	adds	r6, #1
 8009472:	e7f2      	b.n	800945a <__libc_init_array+0x1e>
 8009474:	0800951c 	.word	0x0800951c
 8009478:	0800951c 	.word	0x0800951c
 800947c:	0800951c 	.word	0x0800951c
 8009480:	08009520 	.word	0x08009520

08009484 <_init>:
 8009484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009486:	bf00      	nop
 8009488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800948a:	bc08      	pop	{r3}
 800948c:	469e      	mov	lr, r3
 800948e:	4770      	bx	lr

08009490 <_fini>:
 8009490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009492:	bf00      	nop
 8009494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009496:	bc08      	pop	{r3}
 8009498:	469e      	mov	lr, r3
 800949a:	4770      	bx	lr
