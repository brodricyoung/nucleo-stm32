
MyDrivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000048c  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000618  08000620  00001620  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000618  08000618  00001620  2**0
                  CONTENTS
  4 .ARM          00000000  08000618  08000618  00001620  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000618  08000620  00001620  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000618  08000618  00001618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800061c  0800061c  0000161c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001620  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00001620  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00001620  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000041a  00000000  00000000  00001650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000220  00000000  00000000  00001a6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000a0  00000000  00000000  00001c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000006b  00000000  00000000  00001d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000010af  00000000  00000000  00001d9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000a42  00000000  00000000  00002e4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00003f90  00000000  00000000  0000388c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0000781c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000194  00000000  00000000  00007860  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000080  00000000  00000000  000079f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000000 	.word	0x20000000
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08000600 	.word	0x08000600

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000004 	.word	0x20000004
 80001c8:	08000600 	.word	0x08000600

080001cc <GPIOA_ClkEnable>:
#include "drivers.h"

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// enables the clock for GPIOA, GPIOB, and GPIOC
////////////////////////////////////////////////////////////////////////////////////////////////////////////
void GPIOA_ClkEnable(void) {
 80001cc:	b480      	push	{r7}
 80001ce:	af00      	add	r7, sp, #0
	*AHB2ENR |= 0b001; // set bit 0 for Port A
 80001d0:	4b05      	ldr	r3, [pc, #20]	@ (80001e8 <GPIOA_ClkEnable+0x1c>)
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	4a04      	ldr	r2, [pc, #16]	@ (80001e8 <GPIOA_ClkEnable+0x1c>)
 80001d6:	f043 0301 	orr.w	r3, r3, #1
 80001da:	6013      	str	r3, [r2, #0]
}
 80001dc:	bf00      	nop
 80001de:	46bd      	mov	sp, r7
 80001e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e4:	4770      	bx	lr
 80001e6:	bf00      	nop
 80001e8:	4002104c 	.word	0x4002104c

080001ec <GPIOB_ClkEnable>:

void GPIOB_ClkEnable(void) {
 80001ec:	b480      	push	{r7}
 80001ee:	af00      	add	r7, sp, #0
	*AHB2ENR |= 0b010; // set bit 1 for Port B
 80001f0:	4b05      	ldr	r3, [pc, #20]	@ (8000208 <GPIOB_ClkEnable+0x1c>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a04      	ldr	r2, [pc, #16]	@ (8000208 <GPIOB_ClkEnable+0x1c>)
 80001f6:	f043 0302 	orr.w	r3, r3, #2
 80001fa:	6013      	str	r3, [r2, #0]
}
 80001fc:	bf00      	nop
 80001fe:	46bd      	mov	sp, r7
 8000200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000204:	4770      	bx	lr
 8000206:	bf00      	nop
 8000208:	4002104c 	.word	0x4002104c

0800020c <GPIOC_ClkEnable>:

void GPIOC_ClkEnable(void) {
 800020c:	b480      	push	{r7}
 800020e:	af00      	add	r7, sp, #0
	*AHB2ENR |= 0b100; // set bit 2 for Port C
 8000210:	4b05      	ldr	r3, [pc, #20]	@ (8000228 <GPIOC_ClkEnable+0x1c>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	4a04      	ldr	r2, [pc, #16]	@ (8000228 <GPIOC_ClkEnable+0x1c>)
 8000216:	f043 0304 	orr.w	r3, r3, #4
 800021a:	6013      	str	r3, [r2, #0]
}
 800021c:	bf00      	nop
 800021e:	46bd      	mov	sp, r7
 8000220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000224:	4770      	bx	lr
 8000226:	bf00      	nop
 8000228:	4002104c 	.word	0x4002104c

0800022c <GPIO_Mode>:

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// configure MODER of a given port for a given pin as an input or output
// - mode: GPIO_MODE_INPUT, GPIO_MODE_OUTPUT
////////////////////////////////////////////////////////////////////////////////////////////////////////////
void GPIO_Mode(Port* GPIOx, uint32_t pin, uint32_t mode) {
 800022c:	b480      	push	{r7}
 800022e:	b087      	sub	sp, #28
 8000230:	af00      	add	r7, sp, #0
 8000232:	60f8      	str	r0, [r7, #12]
 8000234:	60b9      	str	r1, [r7, #8]
 8000236:	607a      	str	r2, [r7, #4]
	switch (mode) {
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	2b00      	cmp	r3, #0
 800023c:	d003      	beq.n	8000246 <GPIO_Mode+0x1a>
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	2b01      	cmp	r3, #1
 8000242:	d00c      	beq.n	800025e <GPIO_Mode+0x32>
			temp &= ~UBIT(pin); 			// reset upper bit
			temp |= LBIT(pin); 				// set lower bit
			GPIOx->MODER = temp; 			// clock in entire configuration in 1 clock cycle to avoid glitches
			break;
	}
}
 8000244:	e025      	b.n	8000292 <GPIO_Mode+0x66>
			GPIOx->MODER &= ~BITPAIR(pin); // reset both bits
 8000246:	68fb      	ldr	r3, [r7, #12]
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	68ba      	ldr	r2, [r7, #8]
 800024c:	0052      	lsls	r2, r2, #1
 800024e:	2103      	movs	r1, #3
 8000250:	fa01 f202 	lsl.w	r2, r1, r2
 8000254:	43d2      	mvns	r2, r2
 8000256:	401a      	ands	r2, r3
 8000258:	68fb      	ldr	r3, [r7, #12]
 800025a:	601a      	str	r2, [r3, #0]
			break;
 800025c:	e019      	b.n	8000292 <GPIO_Mode+0x66>
			uint32_t temp = GPIOx->MODER;	// read the MODER
 800025e:	68fb      	ldr	r3, [r7, #12]
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	617b      	str	r3, [r7, #20]
			temp &= ~UBIT(pin); 			// reset upper bit
 8000264:	68bb      	ldr	r3, [r7, #8]
 8000266:	005b      	lsls	r3, r3, #1
 8000268:	2202      	movs	r2, #2
 800026a:	fa02 f303 	lsl.w	r3, r2, r3
 800026e:	43db      	mvns	r3, r3
 8000270:	461a      	mov	r2, r3
 8000272:	697b      	ldr	r3, [r7, #20]
 8000274:	4013      	ands	r3, r2
 8000276:	617b      	str	r3, [r7, #20]
			temp |= LBIT(pin); 				// set lower bit
 8000278:	68bb      	ldr	r3, [r7, #8]
 800027a:	005b      	lsls	r3, r3, #1
 800027c:	2201      	movs	r2, #1
 800027e:	fa02 f303 	lsl.w	r3, r2, r3
 8000282:	461a      	mov	r2, r3
 8000284:	697b      	ldr	r3, [r7, #20]
 8000286:	4313      	orrs	r3, r2
 8000288:	617b      	str	r3, [r7, #20]
			GPIOx->MODER = temp; 			// clock in entire configuration in 1 clock cycle to avoid glitches
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	697a      	ldr	r2, [r7, #20]
 800028e:	601a      	str	r2, [r3, #0]
			break;
 8000290:	bf00      	nop
}
 8000292:	bf00      	nop
 8000294:	371c      	adds	r7, #28
 8000296:	46bd      	mov	sp, r7
 8000298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029c:	4770      	bx	lr

0800029e <GPIO_WritePin>:
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// write a given state value to a given pin of a given port
////////////////////////////////////////////////////////////////////////////////////////////////////////////
void GPIO_WritePin(Port* GPIOx, uint32_t pin, uint32_t state) {
 800029e:	b480      	push	{r7}
 80002a0:	b085      	sub	sp, #20
 80002a2:	af00      	add	r7, sp, #0
 80002a4:	60f8      	str	r0, [r7, #12]
 80002a6:	60b9      	str	r1, [r7, #8]
 80002a8:	607a      	str	r2, [r7, #4]
	// if state != 0, set the bit
	if (state) {
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d009      	beq.n	80002c4 <GPIO_WritePin+0x26>
		GPIOx->ODR |= BIT(pin); // set bit
 80002b0:	68fb      	ldr	r3, [r7, #12]
 80002b2:	695b      	ldr	r3, [r3, #20]
 80002b4:	2101      	movs	r1, #1
 80002b6:	68ba      	ldr	r2, [r7, #8]
 80002b8:	fa01 f202 	lsl.w	r2, r1, r2
 80002bc:	431a      	orrs	r2, r3
 80002be:	68fb      	ldr	r3, [r7, #12]
 80002c0:	615a      	str	r2, [r3, #20]
	}
	// if state = 0, reset the bit
	else {
		GPIOx->ODR &= ~BIT(pin); // reset bit
	}
}
 80002c2:	e009      	b.n	80002d8 <GPIO_WritePin+0x3a>
		GPIOx->ODR &= ~BIT(pin); // reset bit
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	695b      	ldr	r3, [r3, #20]
 80002c8:	2101      	movs	r1, #1
 80002ca:	68ba      	ldr	r2, [r7, #8]
 80002cc:	fa01 f202 	lsl.w	r2, r1, r2
 80002d0:	43d2      	mvns	r2, r2
 80002d2:	401a      	ands	r2, r3
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	615a      	str	r2, [r3, #20]
}
 80002d8:	bf00      	nop
 80002da:	3714      	adds	r7, #20
 80002dc:	46bd      	mov	sp, r7
 80002de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e2:	4770      	bx	lr

080002e4 <GPIO_Pull>:

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// configure pull resistors for a given pin on a given port
// - pull: GPIO_NOPULL, GPIO_PULLUP, GPIO_PULLDOWN
////////////////////////////////////////////////////////////////////////////////////////////////////////////
void GPIO_Pull(Port* GPIOx, uint32_t pin, uint32_t pull) {
 80002e4:	b480      	push	{r7}
 80002e6:	b087      	sub	sp, #28
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	60f8      	str	r0, [r7, #12]
 80002ec:	60b9      	str	r1, [r7, #8]
 80002ee:	607a      	str	r2, [r7, #4]
	uint32_t temp; // temporary storage to clock in all changes at once

	switch(pull) {
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	2b02      	cmp	r3, #2
 80002f4:	d02f      	beq.n	8000356 <GPIO_Pull+0x72>
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	2b02      	cmp	r3, #2
 80002fa:	d846      	bhi.n	800038a <GPIO_Pull+0xa6>
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d003      	beq.n	800030a <GPIO_Pull+0x26>
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	2b01      	cmp	r3, #1
 8000306:	d00c      	beq.n	8000322 <GPIO_Pull+0x3e>
			temp |= UBIT(pin); 	 // set upper bit
			temp &= ~LBIT(pin);  // reset lower bit
			GPIOx->PUPDR = temp; // clock in entire configuration in 1 clock cycle to avoid glitches
			break;
	}
}
 8000308:	e03f      	b.n	800038a <GPIO_Pull+0xa6>
			GPIOx->PUPDR &= ~BITPAIR(pin); // reset both bits
 800030a:	68fb      	ldr	r3, [r7, #12]
 800030c:	68db      	ldr	r3, [r3, #12]
 800030e:	68ba      	ldr	r2, [r7, #8]
 8000310:	0052      	lsls	r2, r2, #1
 8000312:	2103      	movs	r1, #3
 8000314:	fa01 f202 	lsl.w	r2, r1, r2
 8000318:	43d2      	mvns	r2, r2
 800031a:	401a      	ands	r2, r3
 800031c:	68fb      	ldr	r3, [r7, #12]
 800031e:	60da      	str	r2, [r3, #12]
			break;
 8000320:	e033      	b.n	800038a <GPIO_Pull+0xa6>
			temp = GPIOx->PUPDR; // read the PUPDR
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	68db      	ldr	r3, [r3, #12]
 8000326:	617b      	str	r3, [r7, #20]
			temp &= ~UBIT(pin);  // reset upper bit
 8000328:	68bb      	ldr	r3, [r7, #8]
 800032a:	005b      	lsls	r3, r3, #1
 800032c:	2202      	movs	r2, #2
 800032e:	fa02 f303 	lsl.w	r3, r2, r3
 8000332:	43db      	mvns	r3, r3
 8000334:	461a      	mov	r2, r3
 8000336:	697b      	ldr	r3, [r7, #20]
 8000338:	4013      	ands	r3, r2
 800033a:	617b      	str	r3, [r7, #20]
			temp |= LBIT(pin);   // set lower bit
 800033c:	68bb      	ldr	r3, [r7, #8]
 800033e:	005b      	lsls	r3, r3, #1
 8000340:	2201      	movs	r2, #1
 8000342:	fa02 f303 	lsl.w	r3, r2, r3
 8000346:	461a      	mov	r2, r3
 8000348:	697b      	ldr	r3, [r7, #20]
 800034a:	4313      	orrs	r3, r2
 800034c:	617b      	str	r3, [r7, #20]
			GPIOx->PUPDR = temp; // clock in entire configuration in 1 clock cycle to avoid glitches
 800034e:	68fb      	ldr	r3, [r7, #12]
 8000350:	697a      	ldr	r2, [r7, #20]
 8000352:	60da      	str	r2, [r3, #12]
			break;
 8000354:	e019      	b.n	800038a <GPIO_Pull+0xa6>
			temp = GPIOx->PUPDR; // read the PUPDR
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	68db      	ldr	r3, [r3, #12]
 800035a:	617b      	str	r3, [r7, #20]
			temp |= UBIT(pin); 	 // set upper bit
 800035c:	68bb      	ldr	r3, [r7, #8]
 800035e:	005b      	lsls	r3, r3, #1
 8000360:	2202      	movs	r2, #2
 8000362:	fa02 f303 	lsl.w	r3, r2, r3
 8000366:	461a      	mov	r2, r3
 8000368:	697b      	ldr	r3, [r7, #20]
 800036a:	4313      	orrs	r3, r2
 800036c:	617b      	str	r3, [r7, #20]
			temp &= ~LBIT(pin);  // reset lower bit
 800036e:	68bb      	ldr	r3, [r7, #8]
 8000370:	005b      	lsls	r3, r3, #1
 8000372:	2201      	movs	r2, #1
 8000374:	fa02 f303 	lsl.w	r3, r2, r3
 8000378:	43db      	mvns	r3, r3
 800037a:	461a      	mov	r2, r3
 800037c:	697b      	ldr	r3, [r7, #20]
 800037e:	4013      	ands	r3, r2
 8000380:	617b      	str	r3, [r7, #20]
			GPIOx->PUPDR = temp; // clock in entire configuration in 1 clock cycle to avoid glitches
 8000382:	68fb      	ldr	r3, [r7, #12]
 8000384:	697a      	ldr	r2, [r7, #20]
 8000386:	60da      	str	r2, [r3, #12]
			break;
 8000388:	bf00      	nop
}
 800038a:	bf00      	nop
 800038c:	371c      	adds	r7, #28
 800038e:	46bd      	mov	sp, r7
 8000390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000394:	4770      	bx	lr

08000396 <GPIO_ReadPin>:
// Example:
// 			Assume the IDR = 0001 0010 1101 1010, and you are reading pin 4.
// 			Returns 0000 0000 0000 0001
// 			if reading pin 3, returns 0000 0000 0000 0000
////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint32_t GPIO_ReadPin(Port* GPIOx, uint32_t pin) {
 8000396:	b480      	push	{r7}
 8000398:	b083      	sub	sp, #12
 800039a:	af00      	add	r7, sp, #0
 800039c:	6078      	str	r0, [r7, #4]
 800039e:	6039      	str	r1, [r7, #0]
	return ((GPIOx->IDR & BIT(pin)) >> pin); // get the bit by itself and shift to bit 0 place
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	691b      	ldr	r3, [r3, #16]
 80003a4:	2101      	movs	r1, #1
 80003a6:	683a      	ldr	r2, [r7, #0]
 80003a8:	fa01 f202 	lsl.w	r2, r1, r2
 80003ac:	401a      	ands	r2, r3
 80003ae:	683b      	ldr	r3, [r7, #0]
 80003b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80003b4:	4618      	mov	r0, r3
 80003b6:	370c      	adds	r7, #12
 80003b8:	46bd      	mov	sp, r7
 80003ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003be:	4770      	bx	lr

080003c0 <main>:
#define WINDOW_ALARM_PORT GPIOA
#define WINDOW_ALARM_PIN  9

// This program adapts the alarm code from Lab 5 for use in Lab 6 with drivers
int main(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b082      	sub	sp, #8
 80003c4:	af00      	add	r7, sp, #0
    // Turn on GPIO clocks (Ports A, B, and C)
    GPIOA_ClkEnable();
 80003c6:	f7ff ff01 	bl	80001cc <GPIOA_ClkEnable>
    GPIOB_ClkEnable();
 80003ca:	f7ff ff0f 	bl	80001ec <GPIOB_ClkEnable>
    GPIOC_ClkEnable();
 80003ce:	f7ff ff1d 	bl	800020c <GPIOC_ClkEnable>

    // Configure button pins as inputs
    GPIO_Mode(ARM_BUTTON_PORT,    ARM_BUTTON_PIN,    GPIO_MODE_INPUT);
 80003d2:	2200      	movs	r2, #0
 80003d4:	210d      	movs	r1, #13
 80003d6:	4862      	ldr	r0, [pc, #392]	@ (8000560 <main+0x1a0>)
 80003d8:	f7ff ff28 	bl	800022c <GPIO_Mode>
    GPIO_Mode(DISARM_BUTTON_PORT, DISARM_BUTTON_PIN, GPIO_MODE_INPUT);
 80003dc:	2200      	movs	r2, #0
 80003de:	2100      	movs	r1, #0
 80003e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003e4:	f7ff ff22 	bl	800022c <GPIO_Mode>

    // Configure reed switch pins as inputs
    GPIO_Mode(FRONT_SENSOR_PORT,  FRONT_SENSOR_PIN,  GPIO_MODE_INPUT);
 80003e8:	2200      	movs	r2, #0
 80003ea:	2101      	movs	r1, #1
 80003ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003f0:	f7ff ff1c 	bl	800022c <GPIO_Mode>
    GPIO_Mode(BACK_SENSOR_PORT,   BACK_SENSOR_PIN,   GPIO_MODE_INPUT);
 80003f4:	2200      	movs	r2, #0
 80003f6:	2104      	movs	r1, #4
 80003f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003fc:	f7ff ff16 	bl	800022c <GPIO_Mode>
    GPIO_Mode(WINDOW_SENSOR_PORT, WINDOW_SENSOR_PIN, GPIO_MODE_INPUT);
 8000400:	2200      	movs	r2, #0
 8000402:	2106      	movs	r1, #6
 8000404:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000408:	f7ff ff10 	bl	800022c <GPIO_Mode>

    // Configure LED pins as outputs
    GPIO_Mode(ARM_STATUS_PORT,   ARM_STATUS_PIN,   GPIO_MODE_OUTPUT);
 800040c:	2201      	movs	r2, #1
 800040e:	2105      	movs	r1, #5
 8000410:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000414:	f7ff ff0a 	bl	800022c <GPIO_Mode>
    GPIO_Mode(FRONT_ALARM_PORT,  FRONT_ALARM_PIN,  GPIO_MODE_OUTPUT);
 8000418:	2201      	movs	r2, #1
 800041a:	2107      	movs	r1, #7
 800041c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000420:	f7ff ff04 	bl	800022c <GPIO_Mode>
    GPIO_Mode(BACK_ALARM_PORT,   BACK_ALARM_PIN,   GPIO_MODE_OUTPUT);
 8000424:	2201      	movs	r2, #1
 8000426:	2108      	movs	r1, #8
 8000428:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800042c:	f7ff fefe 	bl	800022c <GPIO_Mode>
    GPIO_Mode(WINDOW_ALARM_PORT, WINDOW_ALARM_PIN, GPIO_MODE_OUTPUT);
 8000430:	2201      	movs	r2, #1
 8000432:	2109      	movs	r1, #9
 8000434:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000438:	f7ff fef8 	bl	800022c <GPIO_Mode>

    // Enable pull-up resistors for inputs
    GPIO_Pull(DISARM_BUTTON_PORT, DISARM_BUTTON_PIN, GPIO_PULLUP);
 800043c:	2201      	movs	r2, #1
 800043e:	2100      	movs	r1, #0
 8000440:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000444:	f7ff ff4e 	bl	80002e4 <GPIO_Pull>
    GPIO_Pull(FRONT_SENSOR_PORT,  FRONT_SENSOR_PIN,  GPIO_PULLUP);
 8000448:	2201      	movs	r2, #1
 800044a:	2101      	movs	r1, #1
 800044c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000450:	f7ff ff48 	bl	80002e4 <GPIO_Pull>
    GPIO_Pull(BACK_SENSOR_PORT,   BACK_SENSOR_PIN,   GPIO_PULLUP);
 8000454:	2201      	movs	r2, #1
 8000456:	2104      	movs	r1, #4
 8000458:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800045c:	f7ff ff42 	bl	80002e4 <GPIO_Pull>
    GPIO_Pull(WINDOW_SENSOR_PORT, WINDOW_SENSOR_PIN, GPIO_PULLUP);
 8000460:	2201      	movs	r2, #1
 8000462:	2106      	movs	r1, #6
 8000464:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000468:	f7ff ff3c 	bl	80002e4 <GPIO_Pull>

    // Initialize Alarm Status (turn off all LEDs)
    GPIO_WritePin(ARM_STATUS_PORT,   ARM_STATUS_PIN,   0);
 800046c:	2200      	movs	r2, #0
 800046e:	2105      	movs	r1, #5
 8000470:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000474:	f7ff ff13 	bl	800029e <GPIO_WritePin>
    GPIO_WritePin(FRONT_ALARM_PORT,  FRONT_ALARM_PIN,  0);
 8000478:	2200      	movs	r2, #0
 800047a:	2107      	movs	r1, #7
 800047c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000480:	f7ff ff0d 	bl	800029e <GPIO_WritePin>
    GPIO_WritePin(BACK_ALARM_PORT,   BACK_ALARM_PIN,   0);
 8000484:	2200      	movs	r2, #0
 8000486:	2108      	movs	r1, #8
 8000488:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800048c:	f7ff ff07 	bl	800029e <GPIO_WritePin>
    GPIO_WritePin(WINDOW_ALARM_PORT, WINDOW_ALARM_PIN, 0);
 8000490:	2200      	movs	r2, #0
 8000492:	2109      	movs	r1, #9
 8000494:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000498:	f7ff ff01 	bl	800029e <GPIO_WritePin>

    // armed state (initialize to disarm)
    int armed = 0;
 800049c:	2300      	movs	r3, #0
 800049e:	607b      	str	r3, [r7, #4]

    // infinite loop
    while(1){

        // check if ArmButton is pressed
        if (GPIO_ReadPin(ARM_BUTTON_PORT, ARM_BUTTON_PIN) == 0){
 80004a0:	210d      	movs	r1, #13
 80004a2:	482f      	ldr	r0, [pc, #188]	@ (8000560 <main+0x1a0>)
 80004a4:	f7ff ff77 	bl	8000396 <GPIO_ReadPin>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d107      	bne.n	80004be <main+0xfe>
            // arm system
            armed = 1; // set arm state
 80004ae:	2301      	movs	r3, #1
 80004b0:	607b      	str	r3, [r7, #4]
            GPIO_WritePin(ARM_STATUS_PORT, ARM_STATUS_PIN, 1); // turn on ArmStatus LED
 80004b2:	2201      	movs	r2, #1
 80004b4:	2105      	movs	r1, #5
 80004b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004ba:	f7ff fef0 	bl	800029e <GPIO_WritePin>
        }

        // check if DisarmButton is pressed
        if (GPIO_ReadPin(DISARM_BUTTON_PORT, DISARM_BUTTON_PIN) == 0){
 80004be:	2100      	movs	r1, #0
 80004c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004c4:	f7ff ff67 	bl	8000396 <GPIO_ReadPin>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d119      	bne.n	8000502 <main+0x142>
            // disarm system
            armed = 0; // reset arm state
 80004ce:	2300      	movs	r3, #0
 80004d0:	607b      	str	r3, [r7, #4]
            GPIO_WritePin(ARM_STATUS_PORT,   ARM_STATUS_PIN,   0); // turn off ArmStatus LED
 80004d2:	2200      	movs	r2, #0
 80004d4:	2105      	movs	r1, #5
 80004d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004da:	f7ff fee0 	bl	800029e <GPIO_WritePin>
            GPIO_WritePin(FRONT_ALARM_PORT,  FRONT_ALARM_PIN,  0); // turn off FrontAlarm LED
 80004de:	2200      	movs	r2, #0
 80004e0:	2107      	movs	r1, #7
 80004e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004e6:	f7ff feda 	bl	800029e <GPIO_WritePin>
            GPIO_WritePin(BACK_ALARM_PORT,   BACK_ALARM_PIN,   0); // turn off BackAlarm LED
 80004ea:	2200      	movs	r2, #0
 80004ec:	2108      	movs	r1, #8
 80004ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004f2:	f7ff fed4 	bl	800029e <GPIO_WritePin>
            GPIO_WritePin(WINDOW_ALARM_PORT, WINDOW_ALARM_PIN, 0); // turn off WindowAlarm LED
 80004f6:	2200      	movs	r2, #0
 80004f8:	2109      	movs	r1, #9
 80004fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004fe:	f7ff fece 	bl	800029e <GPIO_WritePin>
        }

		// if system is armed, check sensors
		if (armed){
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	2b00      	cmp	r3, #0
 8000506:	d0cb      	beq.n	80004a0 <main+0xe0>
			// check the FrontSensor
			if (GPIO_ReadPin(FRONT_SENSOR_PORT, FRONT_SENSOR_PIN) != 0){
 8000508:	2101      	movs	r1, #1
 800050a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800050e:	f7ff ff42 	bl	8000396 <GPIO_ReadPin>
 8000512:	4603      	mov	r3, r0
 8000514:	2b00      	cmp	r3, #0
 8000516:	d005      	beq.n	8000524 <main+0x164>
				// system armed & front door is open:
				GPIO_WritePin(FRONT_ALARM_PORT, FRONT_ALARM_PIN, 1); // turn on FrontAlarm LED
 8000518:	2201      	movs	r2, #1
 800051a:	2107      	movs	r1, #7
 800051c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000520:	f7ff febd 	bl	800029e <GPIO_WritePin>
			}

			// check the BackSensor
			if (GPIO_ReadPin(BACK_SENSOR_PORT, BACK_SENSOR_PIN) != 0){
 8000524:	2104      	movs	r1, #4
 8000526:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800052a:	f7ff ff34 	bl	8000396 <GPIO_ReadPin>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d005      	beq.n	8000540 <main+0x180>
				// system armed & back door is open:
				GPIO_WritePin(BACK_ALARM_PORT, BACK_ALARM_PIN, 1); // turn off BackAlarm LED
 8000534:	2201      	movs	r2, #1
 8000536:	2108      	movs	r1, #8
 8000538:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800053c:	f7ff feaf 	bl	800029e <GPIO_WritePin>
			}

			// check the WindowSensor
			if (GPIO_ReadPin(WINDOW_SENSOR_PORT, WINDOW_SENSOR_PIN) != 0){
 8000540:	2106      	movs	r1, #6
 8000542:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000546:	f7ff ff26 	bl	8000396 <GPIO_ReadPin>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d0a7      	beq.n	80004a0 <main+0xe0>
				// system armed & window is open:
				GPIO_WritePin(WINDOW_ALARM_PORT, WINDOW_ALARM_PIN, 1); // turn on WindowAlarm LED
 8000550:	2201      	movs	r2, #1
 8000552:	2109      	movs	r1, #9
 8000554:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000558:	f7ff fea1 	bl	800029e <GPIO_WritePin>
        if (GPIO_ReadPin(ARM_BUTTON_PORT, ARM_BUTTON_PIN) == 0){
 800055c:	e7a0      	b.n	80004a0 <main+0xe0>
 800055e:	bf00      	nop
 8000560:	48000800 	.word	0x48000800

08000564 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000564:	480d      	ldr	r0, [pc, #52]	@ (800059c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000566:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000568:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800056c:	480c      	ldr	r0, [pc, #48]	@ (80005a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800056e:	490d      	ldr	r1, [pc, #52]	@ (80005a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000570:	4a0d      	ldr	r2, [pc, #52]	@ (80005a8 <LoopForever+0xe>)
  movs r3, #0
 8000572:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000574:	e002      	b.n	800057c <LoopCopyDataInit>

08000576 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000576:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000578:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800057a:	3304      	adds	r3, #4

0800057c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800057c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800057e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000580:	d3f9      	bcc.n	8000576 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000582:	4a0a      	ldr	r2, [pc, #40]	@ (80005ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000584:	4c0a      	ldr	r4, [pc, #40]	@ (80005b0 <LoopForever+0x16>)
  movs r3, #0
 8000586:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000588:	e001      	b.n	800058e <LoopFillZerobss>

0800058a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800058a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800058c:	3204      	adds	r2, #4

0800058e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800058e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000590:	d3fb      	bcc.n	800058a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000592:	f000 f811 	bl	80005b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000596:	f7ff ff13 	bl	80003c0 <main>

0800059a <LoopForever>:

LoopForever:
  b LoopForever
 800059a:	e7fe      	b.n	800059a <LoopForever>
  ldr   r0, =_estack
 800059c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80005a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005a4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80005a8:	08000620 	.word	0x08000620
  ldr r2, =_sbss
 80005ac:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80005b0:	2000001c 	.word	0x2000001c

080005b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005b4:	e7fe      	b.n	80005b4 <ADC1_2_IRQHandler>
	...

080005b8 <__libc_init_array>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	4d0d      	ldr	r5, [pc, #52]	@ (80005f0 <__libc_init_array+0x38>)
 80005bc:	4c0d      	ldr	r4, [pc, #52]	@ (80005f4 <__libc_init_array+0x3c>)
 80005be:	1b64      	subs	r4, r4, r5
 80005c0:	10a4      	asrs	r4, r4, #2
 80005c2:	2600      	movs	r6, #0
 80005c4:	42a6      	cmp	r6, r4
 80005c6:	d109      	bne.n	80005dc <__libc_init_array+0x24>
 80005c8:	4d0b      	ldr	r5, [pc, #44]	@ (80005f8 <__libc_init_array+0x40>)
 80005ca:	4c0c      	ldr	r4, [pc, #48]	@ (80005fc <__libc_init_array+0x44>)
 80005cc:	f000 f818 	bl	8000600 <_init>
 80005d0:	1b64      	subs	r4, r4, r5
 80005d2:	10a4      	asrs	r4, r4, #2
 80005d4:	2600      	movs	r6, #0
 80005d6:	42a6      	cmp	r6, r4
 80005d8:	d105      	bne.n	80005e6 <__libc_init_array+0x2e>
 80005da:	bd70      	pop	{r4, r5, r6, pc}
 80005dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80005e0:	4798      	blx	r3
 80005e2:	3601      	adds	r6, #1
 80005e4:	e7ee      	b.n	80005c4 <__libc_init_array+0xc>
 80005e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80005ea:	4798      	blx	r3
 80005ec:	3601      	adds	r6, #1
 80005ee:	e7f2      	b.n	80005d6 <__libc_init_array+0x1e>
 80005f0:	08000618 	.word	0x08000618
 80005f4:	08000618 	.word	0x08000618
 80005f8:	08000618 	.word	0x08000618
 80005fc:	0800061c 	.word	0x0800061c

08000600 <_init>:
 8000600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000602:	bf00      	nop
 8000604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000606:	bc08      	pop	{r3}
 8000608:	469e      	mov	lr, r3
 800060a:	4770      	bx	lr

0800060c <_fini>:
 800060c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800060e:	bf00      	nop
 8000610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000612:	bc08      	pop	{r3}
 8000614:	469e      	mov	lr, r3
 8000616:	4770      	bx	lr
