
Lab11_Part3-Animation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003990  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08003b18  08003b18  00004b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003be8  08003be8  00005010  2**0
                  CONTENTS
  4 .ARM          00000000  08003be8  08003be8  00005010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003be8  08003be8  00005010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003be8  08003be8  00004be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003bec  08003bec  00004bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08003bf0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  20000010  08003c00  00005010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  08003c00  000050e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b0c5  00000000  00000000  00005040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c55  00000000  00000000  00010105  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf0  00000000  00000000  00011d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000924  00000000  00000000  00012950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025277  00000000  00000000  00013274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000df1a  00000000  00000000  000384eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e4031  00000000  00000000  00046405  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012a436  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030c8  00000000  00000000  0012a47c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000091  00000000  00000000  0012d544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003b00 	.word	0x08003b00

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08003b00 	.word	0x08003b00

080001c8 <lcd_write_nibble>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// LCD
void lcd_write_nibble(uint8_t nibble, uint8_t rs) {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b086      	sub	sp, #24
 80001cc:	af02      	add	r7, sp, #8
 80001ce:	4603      	mov	r3, r0
 80001d0:	460a      	mov	r2, r1
 80001d2:	71fb      	strb	r3, [r7, #7]
 80001d4:	4613      	mov	r3, r2
 80001d6:	71bb      	strb	r3, [r7, #6]
	 uint8_t data = nibble << D4_BIT;
 80001d8:	79fb      	ldrb	r3, [r7, #7]
 80001da:	011b      	lsls	r3, r3, #4
 80001dc:	b2db      	uxtb	r3, r3
 80001de:	73fb      	strb	r3, [r7, #15]
	 data |= rs << RS_BIT;
 80001e0:	7bfa      	ldrb	r2, [r7, #15]
 80001e2:	79bb      	ldrb	r3, [r7, #6]
 80001e4:	4313      	orrs	r3, r2
 80001e6:	b2db      	uxtb	r3, r3
 80001e8:	73fb      	strb	r3, [r7, #15]
	 data |= backlight_state << BL_BIT; // Include backlight state in data
 80001ea:	4b16      	ldr	r3, [pc, #88]	@ (8000244 <lcd_write_nibble+0x7c>)
 80001ec:	781b      	ldrb	r3, [r3, #0]
 80001ee:	00db      	lsls	r3, r3, #3
 80001f0:	b25a      	sxtb	r2, r3
 80001f2:	7bfb      	ldrb	r3, [r7, #15]
 80001f4:	b25b      	sxtb	r3, r3
 80001f6:	4313      	orrs	r3, r2
 80001f8:	b25b      	sxtb	r3, r3
 80001fa:	b2db      	uxtb	r3, r3
 80001fc:	73fb      	strb	r3, [r7, #15]
	 data |= 1 << EN_BIT;
 80001fe:	7bfb      	ldrb	r3, [r7, #15]
 8000200:	f043 0304 	orr.w	r3, r3, #4
 8000204:	b2db      	uxtb	r3, r3
 8000206:	73fb      	strb	r3, [r7, #15]
	 HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000208:	f107 020f 	add.w	r2, r7, #15
 800020c:	2364      	movs	r3, #100	@ 0x64
 800020e:	9300      	str	r3, [sp, #0]
 8000210:	2301      	movs	r3, #1
 8000212:	214e      	movs	r1, #78	@ 0x4e
 8000214:	480c      	ldr	r0, [pc, #48]	@ (8000248 <lcd_write_nibble+0x80>)
 8000216:	f001 fa17 	bl	8001648 <HAL_I2C_Master_Transmit>
	 HAL_Delay(1);
 800021a:	2001      	movs	r0, #1
 800021c:	f000 fe50 	bl	8000ec0 <HAL_Delay>
	 data &= ~(1 << EN_BIT);
 8000220:	7bfb      	ldrb	r3, [r7, #15]
 8000222:	f023 0304 	bic.w	r3, r3, #4
 8000226:	b2db      	uxtb	r3, r3
 8000228:	73fb      	strb	r3, [r7, #15]
	 HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 800022a:	f107 020f 	add.w	r2, r7, #15
 800022e:	2364      	movs	r3, #100	@ 0x64
 8000230:	9300      	str	r3, [sp, #0]
 8000232:	2301      	movs	r3, #1
 8000234:	214e      	movs	r1, #78	@ 0x4e
 8000236:	4804      	ldr	r0, [pc, #16]	@ (8000248 <lcd_write_nibble+0x80>)
 8000238:	f001 fa06 	bl	8001648 <HAL_I2C_Master_Transmit>
}
 800023c:	bf00      	nop
 800023e:	3710      	adds	r7, #16
 8000240:	46bd      	mov	sp, r7
 8000242:	bd80      	pop	{r7, pc}
 8000244:	20000000 	.word	0x20000000
 8000248:	2000002c 	.word	0x2000002c

0800024c <lcd_send_cmd>:

void lcd_send_cmd(uint8_t cmd) {
 800024c:	b580      	push	{r7, lr}
 800024e:	b084      	sub	sp, #16
 8000250:	af00      	add	r7, sp, #0
 8000252:	4603      	mov	r3, r0
 8000254:	71fb      	strb	r3, [r7, #7]
	 uint8_t upper_nibble = cmd >> 4;
 8000256:	79fb      	ldrb	r3, [r7, #7]
 8000258:	091b      	lsrs	r3, r3, #4
 800025a:	73fb      	strb	r3, [r7, #15]
	 uint8_t lower_nibble = cmd & 0x0F;
 800025c:	79fb      	ldrb	r3, [r7, #7]
 800025e:	f003 030f 	and.w	r3, r3, #15
 8000262:	73bb      	strb	r3, [r7, #14]
	 lcd_write_nibble(upper_nibble, 0);
 8000264:	7bfb      	ldrb	r3, [r7, #15]
 8000266:	2100      	movs	r1, #0
 8000268:	4618      	mov	r0, r3
 800026a:	f7ff ffad 	bl	80001c8 <lcd_write_nibble>
	 lcd_write_nibble(lower_nibble, 0);
 800026e:	7bbb      	ldrb	r3, [r7, #14]
 8000270:	2100      	movs	r1, #0
 8000272:	4618      	mov	r0, r3
 8000274:	f7ff ffa8 	bl	80001c8 <lcd_write_nibble>
	 if (cmd == 0x01 || cmd == 0x02) {
 8000278:	79fb      	ldrb	r3, [r7, #7]
 800027a:	2b01      	cmp	r3, #1
 800027c:	d002      	beq.n	8000284 <lcd_send_cmd+0x38>
 800027e:	79fb      	ldrb	r3, [r7, #7]
 8000280:	2b02      	cmp	r3, #2
 8000282:	d102      	bne.n	800028a <lcd_send_cmd+0x3e>
		 HAL_Delay(2);
 8000284:	2002      	movs	r0, #2
 8000286:	f000 fe1b 	bl	8000ec0 <HAL_Delay>
	 }
}
 800028a:	bf00      	nop
 800028c:	3710      	adds	r7, #16
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}

08000292 <lcd_send_data>:

void lcd_send_data(uint8_t data) {
 8000292:	b580      	push	{r7, lr}
 8000294:	b084      	sub	sp, #16
 8000296:	af00      	add	r7, sp, #0
 8000298:	4603      	mov	r3, r0
 800029a:	71fb      	strb	r3, [r7, #7]
	 uint8_t upper_nibble = data >> 4;
 800029c:	79fb      	ldrb	r3, [r7, #7]
 800029e:	091b      	lsrs	r3, r3, #4
 80002a0:	73fb      	strb	r3, [r7, #15]
	 uint8_t lower_nibble = data & 0x0F;
 80002a2:	79fb      	ldrb	r3, [r7, #7]
 80002a4:	f003 030f 	and.w	r3, r3, #15
 80002a8:	73bb      	strb	r3, [r7, #14]
	 lcd_write_nibble(upper_nibble, 1);
 80002aa:	7bfb      	ldrb	r3, [r7, #15]
 80002ac:	2101      	movs	r1, #1
 80002ae:	4618      	mov	r0, r3
 80002b0:	f7ff ff8a 	bl	80001c8 <lcd_write_nibble>
	 lcd_write_nibble(lower_nibble, 1);
 80002b4:	7bbb      	ldrb	r3, [r7, #14]
 80002b6:	2101      	movs	r1, #1
 80002b8:	4618      	mov	r0, r3
 80002ba:	f7ff ff85 	bl	80001c8 <lcd_write_nibble>
}
 80002be:	bf00      	nop
 80002c0:	3710      	adds	r7, #16
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}

080002c6 <lcd_init>:

void lcd_init() {
 80002c6:	b580      	push	{r7, lr}
 80002c8:	af00      	add	r7, sp, #0
	 HAL_Delay(50);
 80002ca:	2032      	movs	r0, #50	@ 0x32
 80002cc:	f000 fdf8 	bl	8000ec0 <HAL_Delay>
	 lcd_write_nibble(0x03, 0);
 80002d0:	2100      	movs	r1, #0
 80002d2:	2003      	movs	r0, #3
 80002d4:	f7ff ff78 	bl	80001c8 <lcd_write_nibble>
	 HAL_Delay(5);
 80002d8:	2005      	movs	r0, #5
 80002da:	f000 fdf1 	bl	8000ec0 <HAL_Delay>
	 lcd_write_nibble(0x03, 0);
 80002de:	2100      	movs	r1, #0
 80002e0:	2003      	movs	r0, #3
 80002e2:	f7ff ff71 	bl	80001c8 <lcd_write_nibble>
	 HAL_Delay(1);
 80002e6:	2001      	movs	r0, #1
 80002e8:	f000 fdea 	bl	8000ec0 <HAL_Delay>
	 lcd_write_nibble(0x03, 0);
 80002ec:	2100      	movs	r1, #0
 80002ee:	2003      	movs	r0, #3
 80002f0:	f7ff ff6a 	bl	80001c8 <lcd_write_nibble>
	 HAL_Delay(1);
 80002f4:	2001      	movs	r0, #1
 80002f6:	f000 fde3 	bl	8000ec0 <HAL_Delay>
	 lcd_write_nibble(0x02, 0);
 80002fa:	2100      	movs	r1, #0
 80002fc:	2002      	movs	r0, #2
 80002fe:	f7ff ff63 	bl	80001c8 <lcd_write_nibble>
	 lcd_send_cmd(0x28);
 8000302:	2028      	movs	r0, #40	@ 0x28
 8000304:	f7ff ffa2 	bl	800024c <lcd_send_cmd>
	 lcd_send_cmd(0x0C);
 8000308:	200c      	movs	r0, #12
 800030a:	f7ff ff9f 	bl	800024c <lcd_send_cmd>
	 lcd_send_cmd(0x06);
 800030e:	2006      	movs	r0, #6
 8000310:	f7ff ff9c 	bl	800024c <lcd_send_cmd>
	 lcd_send_cmd(0x01);
 8000314:	2001      	movs	r0, #1
 8000316:	f7ff ff99 	bl	800024c <lcd_send_cmd>
	 HAL_Delay(2);
 800031a:	2002      	movs	r0, #2
 800031c:	f000 fdd0 	bl	8000ec0 <HAL_Delay>
}
 8000320:	bf00      	nop
 8000322:	bd80      	pop	{r7, pc}

08000324 <lcd_backlight>:
void lcd_clear(void) {
	lcd_send_cmd(0x01);
	 HAL_Delay(2);
}

void lcd_backlight(uint8_t state) {
 8000324:	b480      	push	{r7}
 8000326:	b083      	sub	sp, #12
 8000328:	af00      	add	r7, sp, #0
 800032a:	4603      	mov	r3, r0
 800032c:	71fb      	strb	r3, [r7, #7]
	 if (state) {
 800032e:	79fb      	ldrb	r3, [r7, #7]
 8000330:	2b00      	cmp	r3, #0
 8000332:	d003      	beq.n	800033c <lcd_backlight+0x18>
		 backlight_state = 1;
 8000334:	4b06      	ldr	r3, [pc, #24]	@ (8000350 <lcd_backlight+0x2c>)
 8000336:	2201      	movs	r2, #1
 8000338:	701a      	strb	r2, [r3, #0]
	 } else {
		 backlight_state = 0;
	 }
}
 800033a:	e002      	b.n	8000342 <lcd_backlight+0x1e>
		 backlight_state = 0;
 800033c:	4b04      	ldr	r3, [pc, #16]	@ (8000350 <lcd_backlight+0x2c>)
 800033e:	2200      	movs	r2, #0
 8000340:	701a      	strb	r2, [r3, #0]
}
 8000342:	bf00      	nop
 8000344:	370c      	adds	r7, #12
 8000346:	46bd      	mov	sp, r7
 8000348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop
 8000350:	20000000 	.word	0x20000000

08000354 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000358:	f000 fd36 	bl	8000dc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800035c:	f000 f8fe 	bl	800055c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000360:	f000 f9cc 	bl	80006fc <MX_GPIO_Init>
  MX_SPI1_Init();
 8000364:	f000 f98c 	bl	8000680 <MX_SPI1_Init>
  MX_I2C1_Init();
 8000368:	f000 f94a 	bl	8000600 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  // GLCD
  GLCD_init(); 		// initialize the screen
 800036c:	f000 faa8 	bl	80008c0 <GLCD_init>
  GLCD_clear(); 	// clear the screen
 8000370:	f000 faea 	bl	8000948 <GLCD_clear>

  // LCD
  // I2C pull-up resistors
  GPIOB->PUPDR |= 0b01 << (8*2);
 8000374:	4b78      	ldr	r3, [pc, #480]	@ (8000558 <main+0x204>)
 8000376:	68db      	ldr	r3, [r3, #12]
 8000378:	4a77      	ldr	r2, [pc, #476]	@ (8000558 <main+0x204>)
 800037a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800037e:	60d3      	str	r3, [r2, #12]
  GPIOB->PUPDR |= 0b01 << (9*2);
 8000380:	4b75      	ldr	r3, [pc, #468]	@ (8000558 <main+0x204>)
 8000382:	68db      	ldr	r3, [r3, #12]
 8000384:	4a74      	ldr	r2, [pc, #464]	@ (8000558 <main+0x204>)
 8000386:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800038a:	60d3      	str	r3, [r2, #12]
  // Initialize the LCD
  lcd_init();
 800038c:	f7ff ff9b 	bl	80002c6 <lcd_init>
  lcd_backlight(1); // Turn on backlight
 8000390:	2001      	movs	r0, #1
 8000392:	f7ff ffc7 	bl	8000324 <lcd_backlight>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  GLCD_putchar(0, 9, 12);  // hoop top
 8000396:	220c      	movs	r2, #12
 8000398:	2109      	movs	r1, #9
 800039a:	2000      	movs	r0, #0
 800039c:	f000 faec 	bl	8000978 <GLCD_putchar>
	  GLCD_putchar(1, 8, 13);  // hoop mid left
 80003a0:	220d      	movs	r2, #13
 80003a2:	2108      	movs	r1, #8
 80003a4:	2001      	movs	r0, #1
 80003a6:	f000 fae7 	bl	8000978 <GLCD_putchar>
	  GLCD_putchar(1, 9, 14);  // hoop mid right
 80003aa:	220e      	movs	r2, #14
 80003ac:	2109      	movs	r1, #9
 80003ae:	2001      	movs	r0, #1
 80003b0:	f000 fae2 	bl	8000978 <GLCD_putchar>
	  GLCD_putchar(2, 8, 15);  // hoop bottom left
 80003b4:	220f      	movs	r2, #15
 80003b6:	2108      	movs	r1, #8
 80003b8:	2002      	movs	r0, #2
 80003ba:	f000 fadd 	bl	8000978 <GLCD_putchar>
	  GLCD_putchar(2, 9, 16);  // hoop bottom right
 80003be:	2210      	movs	r2, #16
 80003c0:	2109      	movs	r1, #9
 80003c2:	2002      	movs	r0, #2
 80003c4:	f000 fad8 	bl	8000978 <GLCD_putchar>
	  GLCD_putchar(3, 0, 0);  // person top
 80003c8:	2200      	movs	r2, #0
 80003ca:	2100      	movs	r1, #0
 80003cc:	2003      	movs	r0, #3
 80003ce:	f000 fad3 	bl	8000978 <GLCD_putchar>
	  GLCD_putchar(4, 0, 1);  // person middle
 80003d2:	2201      	movs	r2, #1
 80003d4:	2100      	movs	r1, #0
 80003d6:	2004      	movs	r0, #4
 80003d8:	f000 face 	bl	8000978 <GLCD_putchar>
	  GLCD_putchar(5, 0, 2);  // person bottom
 80003dc:	2202      	movs	r2, #2
 80003de:	2100      	movs	r1, #0
 80003e0:	2005      	movs	r0, #5
 80003e2:	f000 fac9 	bl	8000978 <GLCD_putchar>
	  GLCD_putchar(4, 1, 3);  // person arm with ball
 80003e6:	2203      	movs	r2, #3
 80003e8:	2101      	movs	r1, #1
 80003ea:	2004      	movs	r0, #4
 80003ec:	f000 fac4 	bl	8000978 <GLCD_putchar>
	  HAL_Delay(500);
 80003f0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80003f4:	f000 fd64 	bl	8000ec0 <HAL_Delay>
	  GLCD_putchar(4, 1, 4);  // person arm no ball
 80003f8:	2204      	movs	r2, #4
 80003fa:	2101      	movs	r1, #1
 80003fc:	2004      	movs	r0, #4
 80003fe:	f000 fabb 	bl	8000978 <GLCD_putchar>
	  GLCD_putchar(3, 2, 5);  // ball phase 1
 8000402:	2205      	movs	r2, #5
 8000404:	2102      	movs	r1, #2
 8000406:	2003      	movs	r0, #3
 8000408:	f000 fab6 	bl	8000978 <GLCD_putchar>
	  HAL_Delay(500);
 800040c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000410:	f000 fd56 	bl	8000ec0 <HAL_Delay>
	  GLCD_putchar(3, 2, 17);  // clear ball phase 1
 8000414:	2211      	movs	r2, #17
 8000416:	2102      	movs	r1, #2
 8000418:	2003      	movs	r0, #3
 800041a:	f000 faad 	bl	8000978 <GLCD_putchar>
	  GLCD_putchar(2, 3, 5);  // ball phase 2
 800041e:	2205      	movs	r2, #5
 8000420:	2103      	movs	r1, #3
 8000422:	2002      	movs	r0, #2
 8000424:	f000 faa8 	bl	8000978 <GLCD_putchar>
	  HAL_Delay(500);
 8000428:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800042c:	f000 fd48 	bl	8000ec0 <HAL_Delay>
	  GLCD_putchar(2, 3, 17);  // clear ball phase 2
 8000430:	2211      	movs	r2, #17
 8000432:	2103      	movs	r1, #3
 8000434:	2002      	movs	r0, #2
 8000436:	f000 fa9f 	bl	8000978 <GLCD_putchar>
	  GLCD_putchar(1, 3, 7);  // ball phase 3
 800043a:	2207      	movs	r2, #7
 800043c:	2103      	movs	r1, #3
 800043e:	2001      	movs	r0, #1
 8000440:	f000 fa9a 	bl	8000978 <GLCD_putchar>
	  HAL_Delay(500);
 8000444:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000448:	f000 fd3a 	bl	8000ec0 <HAL_Delay>
	  GLCD_putchar(1, 3, 17);  // clear ball phase 3
 800044c:	2211      	movs	r2, #17
 800044e:	2103      	movs	r1, #3
 8000450:	2001      	movs	r0, #1
 8000452:	f000 fa91 	bl	8000978 <GLCD_putchar>
	  GLCD_putchar(0, 4, 7);  // ball phase 4
 8000456:	2207      	movs	r2, #7
 8000458:	2104      	movs	r1, #4
 800045a:	2000      	movs	r0, #0
 800045c:	f000 fa8c 	bl	8000978 <GLCD_putchar>
	  HAL_Delay(500);
 8000460:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000464:	f000 fd2c 	bl	8000ec0 <HAL_Delay>
	  GLCD_putchar(0, 4, 17);  // clear ball phase 4
 8000468:	2211      	movs	r2, #17
 800046a:	2104      	movs	r1, #4
 800046c:	2000      	movs	r0, #0
 800046e:	f000 fa83 	bl	8000978 <GLCD_putchar>
	  GLCD_putchar(0, 5, 8);  // ball phase 5
 8000472:	2208      	movs	r2, #8
 8000474:	2105      	movs	r1, #5
 8000476:	2000      	movs	r0, #0
 8000478:	f000 fa7e 	bl	8000978 <GLCD_putchar>
	  HAL_Delay(500);
 800047c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000480:	f000 fd1e 	bl	8000ec0 <HAL_Delay>
	  GLCD_putchar(0, 5, 17);  // clear ball phase 5
 8000484:	2211      	movs	r2, #17
 8000486:	2105      	movs	r1, #5
 8000488:	2000      	movs	r0, #0
 800048a:	f000 fa75 	bl	8000978 <GLCD_putchar>
	  GLCD_putchar(0, 6, 9);  // ball phase 6
 800048e:	2209      	movs	r2, #9
 8000490:	2106      	movs	r1, #6
 8000492:	2000      	movs	r0, #0
 8000494:	f000 fa70 	bl	8000978 <GLCD_putchar>
	  HAL_Delay(500);
 8000498:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800049c:	f000 fd10 	bl	8000ec0 <HAL_Delay>
	  GLCD_putchar(0, 6, 17);  // clear ball phase 6
 80004a0:	2211      	movs	r2, #17
 80004a2:	2106      	movs	r1, #6
 80004a4:	2000      	movs	r0, #0
 80004a6:	f000 fa67 	bl	8000978 <GLCD_putchar>
	  GLCD_putchar(0, 7, 7);  // ball phase 7
 80004aa:	2207      	movs	r2, #7
 80004ac:	2107      	movs	r1, #7
 80004ae:	2000      	movs	r0, #0
 80004b0:	f000 fa62 	bl	8000978 <GLCD_putchar>
	  HAL_Delay(500);
 80004b4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80004b8:	f000 fd02 	bl	8000ec0 <HAL_Delay>
	  GLCD_putchar(0, 7, 17);  // clear ball phase 7
 80004bc:	2211      	movs	r2, #17
 80004be:	2107      	movs	r1, #7
 80004c0:	2000      	movs	r0, #0
 80004c2:	f000 fa59 	bl	8000978 <GLCD_putchar>
	  GLCD_putchar(1, 8, 10);  // ball phase 8 top hoop
 80004c6:	220a      	movs	r2, #10
 80004c8:	2108      	movs	r1, #8
 80004ca:	2001      	movs	r0, #1
 80004cc:	f000 fa54 	bl	8000978 <GLCD_putchar>
	  HAL_Delay(500);
 80004d0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80004d4:	f000 fcf4 	bl	8000ec0 <HAL_Delay>
	  GLCD_putchar(1, 8, 13);  // clear ball phase 8 top hoop
 80004d8:	220d      	movs	r2, #13
 80004da:	2108      	movs	r1, #8
 80004dc:	2001      	movs	r0, #1
 80004de:	f000 fa4b 	bl	8000978 <GLCD_putchar>
	  GLCD_putchar(2, 8, 11);  // ball phase 9 bottom hoop
 80004e2:	220b      	movs	r2, #11
 80004e4:	2108      	movs	r1, #8
 80004e6:	2002      	movs	r0, #2
 80004e8:	f000 fa46 	bl	8000978 <GLCD_putchar>
	  HAL_Delay(500);
 80004ec:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80004f0:	f000 fce6 	bl	8000ec0 <HAL_Delay>
	  GLCD_putchar(2, 8, 15);  // clear ball phase 9 bottom hoop
 80004f4:	220f      	movs	r2, #15
 80004f6:	2108      	movs	r1, #8
 80004f8:	2002      	movs	r0, #2
 80004fa:	f000 fa3d 	bl	8000978 <GLCD_putchar>
	  GLCD_putchar(3, 8, 7);  // ball phase 10
 80004fe:	2207      	movs	r2, #7
 8000500:	2108      	movs	r1, #8
 8000502:	2003      	movs	r0, #3
 8000504:	f000 fa38 	bl	8000978 <GLCD_putchar>
	  HAL_Delay(500);
 8000508:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800050c:	f000 fcd8 	bl	8000ec0 <HAL_Delay>
	  GLCD_putchar(3, 8, 17);  // clear ball phase 10
 8000510:	2211      	movs	r2, #17
 8000512:	2108      	movs	r1, #8
 8000514:	2003      	movs	r0, #3
 8000516:	f000 fa2f 	bl	8000978 <GLCD_putchar>
	  GLCD_putchar(4, 8, 7);  // ball phase 11
 800051a:	2207      	movs	r2, #7
 800051c:	2108      	movs	r1, #8
 800051e:	2004      	movs	r0, #4
 8000520:	f000 fa2a 	bl	8000978 <GLCD_putchar>
	  HAL_Delay(500);
 8000524:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000528:	f000 fcca 	bl	8000ec0 <HAL_Delay>
	  GLCD_putchar(4, 8, 17);  // clear ball phase 11
 800052c:	2211      	movs	r2, #17
 800052e:	2108      	movs	r1, #8
 8000530:	2004      	movs	r0, #4
 8000532:	f000 fa21 	bl	8000978 <GLCD_putchar>
	  GLCD_putchar(5, 8, 7);  // ball phase 12
 8000536:	2207      	movs	r2, #7
 8000538:	2108      	movs	r1, #8
 800053a:	2005      	movs	r0, #5
 800053c:	f000 fa1c 	bl	8000978 <GLCD_putchar>
	  HAL_Delay(500);
 8000540:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000544:	f000 fcbc 	bl	8000ec0 <HAL_Delay>
	  GLCD_putchar(5, 8, 17);  // clear ball phase 12
 8000548:	2211      	movs	r2, #17
 800054a:	2108      	movs	r1, #8
 800054c:	2005      	movs	r0, #5
 800054e:	f000 fa13 	bl	8000978 <GLCD_putchar>
	  GLCD_putchar(0, 9, 12);  // hoop top
 8000552:	bf00      	nop
 8000554:	e71f      	b.n	8000396 <main+0x42>
 8000556:	bf00      	nop
 8000558:	48000400 	.word	0x48000400

0800055c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b096      	sub	sp, #88	@ 0x58
 8000560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000562:	f107 0314 	add.w	r3, r7, #20
 8000566:	2244      	movs	r2, #68	@ 0x44
 8000568:	2100      	movs	r1, #0
 800056a:	4618      	mov	r0, r3
 800056c:	f003 fa9c 	bl	8003aa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000570:	463b      	mov	r3, r7
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
 8000576:	605a      	str	r2, [r3, #4]
 8000578:	609a      	str	r2, [r3, #8]
 800057a:	60da      	str	r2, [r3, #12]
 800057c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800057e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000582:	f001 fc39 	bl	8001df8 <HAL_PWREx_ControlVoltageScaling>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800058c:	f000 fae0 	bl	8000b50 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000590:	2302      	movs	r3, #2
 8000592:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000594:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000598:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800059a:	2310      	movs	r3, #16
 800059c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059e:	2302      	movs	r3, #2
 80005a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005a2:	2302      	movs	r3, #2
 80005a4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005a6:	2301      	movs	r3, #1
 80005a8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80005aa:	230a      	movs	r3, #10
 80005ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005ae:	2307      	movs	r3, #7
 80005b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005b2:	2302      	movs	r3, #2
 80005b4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005b6:	2302      	movs	r3, #2
 80005b8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ba:	f107 0314 	add.w	r3, r7, #20
 80005be:	4618      	mov	r0, r3
 80005c0:	f001 fc70 	bl	8001ea4 <HAL_RCC_OscConfig>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005ca:	f000 fac1 	bl	8000b50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ce:	230f      	movs	r3, #15
 80005d0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d2:	2303      	movs	r3, #3
 80005d4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d6:	2300      	movs	r3, #0
 80005d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005da:	2300      	movs	r3, #0
 80005dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005e2:	463b      	mov	r3, r7
 80005e4:	2104      	movs	r1, #4
 80005e6:	4618      	mov	r0, r3
 80005e8:	f002 f838 	bl	800265c <HAL_RCC_ClockConfig>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005f2:	f000 faad 	bl	8000b50 <Error_Handler>
  }
}
 80005f6:	bf00      	nop
 80005f8:	3758      	adds	r7, #88	@ 0x58
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
	...

08000600 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000604:	4b1b      	ldr	r3, [pc, #108]	@ (8000674 <MX_I2C1_Init+0x74>)
 8000606:	4a1c      	ldr	r2, [pc, #112]	@ (8000678 <MX_I2C1_Init+0x78>)
 8000608:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 800060a:	4b1a      	ldr	r3, [pc, #104]	@ (8000674 <MX_I2C1_Init+0x74>)
 800060c:	4a1b      	ldr	r2, [pc, #108]	@ (800067c <MX_I2C1_Init+0x7c>)
 800060e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000610:	4b18      	ldr	r3, [pc, #96]	@ (8000674 <MX_I2C1_Init+0x74>)
 8000612:	2200      	movs	r2, #0
 8000614:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000616:	4b17      	ldr	r3, [pc, #92]	@ (8000674 <MX_I2C1_Init+0x74>)
 8000618:	2201      	movs	r2, #1
 800061a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800061c:	4b15      	ldr	r3, [pc, #84]	@ (8000674 <MX_I2C1_Init+0x74>)
 800061e:	2200      	movs	r2, #0
 8000620:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000622:	4b14      	ldr	r3, [pc, #80]	@ (8000674 <MX_I2C1_Init+0x74>)
 8000624:	2200      	movs	r2, #0
 8000626:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000628:	4b12      	ldr	r3, [pc, #72]	@ (8000674 <MX_I2C1_Init+0x74>)
 800062a:	2200      	movs	r2, #0
 800062c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800062e:	4b11      	ldr	r3, [pc, #68]	@ (8000674 <MX_I2C1_Init+0x74>)
 8000630:	2200      	movs	r2, #0
 8000632:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000634:	4b0f      	ldr	r3, [pc, #60]	@ (8000674 <MX_I2C1_Init+0x74>)
 8000636:	2200      	movs	r2, #0
 8000638:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800063a:	480e      	ldr	r0, [pc, #56]	@ (8000674 <MX_I2C1_Init+0x74>)
 800063c:	f000 ff68 	bl	8001510 <HAL_I2C_Init>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000646:	f000 fa83 	bl	8000b50 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800064a:	2100      	movs	r1, #0
 800064c:	4809      	ldr	r0, [pc, #36]	@ (8000674 <MX_I2C1_Init+0x74>)
 800064e:	f001 fb2d 	bl	8001cac <HAL_I2CEx_ConfigAnalogFilter>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000658:	f000 fa7a 	bl	8000b50 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800065c:	2100      	movs	r1, #0
 800065e:	4805      	ldr	r0, [pc, #20]	@ (8000674 <MX_I2C1_Init+0x74>)
 8000660:	f001 fb6f 	bl	8001d42 <HAL_I2CEx_ConfigDigitalFilter>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800066a:	f000 fa71 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800066e:	bf00      	nop
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	2000002c 	.word	0x2000002c
 8000678:	40005400 	.word	0x40005400
 800067c:	10d19ce4 	.word	0x10d19ce4

08000680 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000684:	4b1b      	ldr	r3, [pc, #108]	@ (80006f4 <MX_SPI1_Init+0x74>)
 8000686:	4a1c      	ldr	r2, [pc, #112]	@ (80006f8 <MX_SPI1_Init+0x78>)
 8000688:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800068a:	4b1a      	ldr	r3, [pc, #104]	@ (80006f4 <MX_SPI1_Init+0x74>)
 800068c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000690:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000692:	4b18      	ldr	r3, [pc, #96]	@ (80006f4 <MX_SPI1_Init+0x74>)
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000698:	4b16      	ldr	r3, [pc, #88]	@ (80006f4 <MX_SPI1_Init+0x74>)
 800069a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800069e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006a0:	4b14      	ldr	r3, [pc, #80]	@ (80006f4 <MX_SPI1_Init+0x74>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006a6:	4b13      	ldr	r3, [pc, #76]	@ (80006f4 <MX_SPI1_Init+0x74>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006ac:	4b11      	ldr	r3, [pc, #68]	@ (80006f4 <MX_SPI1_Init+0x74>)
 80006ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006b2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80006b4:	4b0f      	ldr	r3, [pc, #60]	@ (80006f4 <MX_SPI1_Init+0x74>)
 80006b6:	2220      	movs	r2, #32
 80006b8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006ba:	4b0e      	ldr	r3, [pc, #56]	@ (80006f4 <MX_SPI1_Init+0x74>)
 80006bc:	2200      	movs	r2, #0
 80006be:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006c0:	4b0c      	ldr	r3, [pc, #48]	@ (80006f4 <MX_SPI1_Init+0x74>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006c6:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <MX_SPI1_Init+0x74>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80006cc:	4b09      	ldr	r3, [pc, #36]	@ (80006f4 <MX_SPI1_Init+0x74>)
 80006ce:	2207      	movs	r2, #7
 80006d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80006d2:	4b08      	ldr	r3, [pc, #32]	@ (80006f4 <MX_SPI1_Init+0x74>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80006d8:	4b06      	ldr	r3, [pc, #24]	@ (80006f4 <MX_SPI1_Init+0x74>)
 80006da:	2208      	movs	r2, #8
 80006dc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006de:	4805      	ldr	r0, [pc, #20]	@ (80006f4 <MX_SPI1_Init+0x74>)
 80006e0:	f002 fe64 	bl	80033ac <HAL_SPI_Init>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80006ea:	f000 fa31 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	20000080 	.word	0x20000080
 80006f8:	40013000 	.word	0x40013000

080006fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b08a      	sub	sp, #40	@ 0x28
 8000700:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000702:	f107 0314 	add.w	r3, r7, #20
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	60da      	str	r2, [r3, #12]
 8000710:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000712:	4b46      	ldr	r3, [pc, #280]	@ (800082c <MX_GPIO_Init+0x130>)
 8000714:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000716:	4a45      	ldr	r2, [pc, #276]	@ (800082c <MX_GPIO_Init+0x130>)
 8000718:	f043 0304 	orr.w	r3, r3, #4
 800071c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800071e:	4b43      	ldr	r3, [pc, #268]	@ (800082c <MX_GPIO_Init+0x130>)
 8000720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000722:	f003 0304 	and.w	r3, r3, #4
 8000726:	613b      	str	r3, [r7, #16]
 8000728:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800072a:	4b40      	ldr	r3, [pc, #256]	@ (800082c <MX_GPIO_Init+0x130>)
 800072c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800072e:	4a3f      	ldr	r2, [pc, #252]	@ (800082c <MX_GPIO_Init+0x130>)
 8000730:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000734:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000736:	4b3d      	ldr	r3, [pc, #244]	@ (800082c <MX_GPIO_Init+0x130>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800073a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000742:	4b3a      	ldr	r3, [pc, #232]	@ (800082c <MX_GPIO_Init+0x130>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000746:	4a39      	ldr	r2, [pc, #228]	@ (800082c <MX_GPIO_Init+0x130>)
 8000748:	f043 0301 	orr.w	r3, r3, #1
 800074c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800074e:	4b37      	ldr	r3, [pc, #220]	@ (800082c <MX_GPIO_Init+0x130>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000752:	f003 0301 	and.w	r3, r3, #1
 8000756:	60bb      	str	r3, [r7, #8]
 8000758:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800075a:	4b34      	ldr	r3, [pc, #208]	@ (800082c <MX_GPIO_Init+0x130>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800075e:	4a33      	ldr	r2, [pc, #204]	@ (800082c <MX_GPIO_Init+0x130>)
 8000760:	f043 0302 	orr.w	r3, r3, #2
 8000764:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000766:	4b31      	ldr	r3, [pc, #196]	@ (800082c <MX_GPIO_Init+0x130>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800076a:	f003 0302 	and.w	r3, r3, #2
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DC_Pin|RESET_Pin|KEY_LED_Pin, GPIO_PIN_RESET);
 8000772:	2200      	movs	r2, #0
 8000774:	f240 4103 	movw	r1, #1027	@ 0x403
 8000778:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800077c:	f000 fe98 	bl	80014b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
 8000780:	2200      	movs	r2, #0
 8000782:	2140      	movs	r1, #64	@ 0x40
 8000784:	482a      	ldr	r0, [pc, #168]	@ (8000830 <MX_GPIO_Init+0x134>)
 8000786:	f000 fe93 	bl	80014b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DATA_AVAILABLE_Pin */
  GPIO_InitStruct.Pin = DATA_AVAILABLE_Pin;
 800078a:	2301      	movs	r3, #1
 800078c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800078e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000792:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000794:	2302      	movs	r3, #2
 8000796:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DATA_AVAILABLE_GPIO_Port, &GPIO_InitStruct);
 8000798:	f107 0314 	add.w	r3, r7, #20
 800079c:	4619      	mov	r1, r3
 800079e:	4825      	ldr	r0, [pc, #148]	@ (8000834 <MX_GPIO_Init+0x138>)
 80007a0:	f000 fcc4 	bl	800112c <HAL_GPIO_Init>

  /*Configure GPIO pins : DC_Pin RESET_Pin KEY_LED_Pin */
  GPIO_InitStruct.Pin = DC_Pin|RESET_Pin|KEY_LED_Pin;
 80007a4:	f240 4303 	movw	r3, #1027	@ 0x403
 80007a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007aa:	2301      	movs	r3, #1
 80007ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b2:	2300      	movs	r3, #0
 80007b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b6:	f107 0314 	add.w	r3, r7, #20
 80007ba:	4619      	mov	r1, r3
 80007bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007c0:	f000 fcb4 	bl	800112c <HAL_GPIO_Init>

  /*Configure GPIO pins : DATA0_Pin DATA2_Pin */
  GPIO_InitStruct.Pin = DATA0_Pin|DATA2_Pin;
 80007c4:	2314      	movs	r3, #20
 80007c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007c8:	2300      	movs	r3, #0
 80007ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d0:	f107 0314 	add.w	r3, r7, #20
 80007d4:	4619      	mov	r1, r3
 80007d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007da:	f000 fca7 	bl	800112c <HAL_GPIO_Init>

  /*Configure GPIO pins : DATA3_Pin DATA1_Pin */
  GPIO_InitStruct.Pin = DATA3_Pin|DATA1_Pin;
 80007de:	2321      	movs	r3, #33	@ 0x21
 80007e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007e2:	2300      	movs	r3, #0
 80007e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ea:	f107 0314 	add.w	r3, r7, #20
 80007ee:	4619      	mov	r1, r3
 80007f0:	480f      	ldr	r0, [pc, #60]	@ (8000830 <MX_GPIO_Init+0x134>)
 80007f2:	f000 fc9b 	bl	800112c <HAL_GPIO_Init>

  /*Configure GPIO pin : CE_Pin */
  GPIO_InitStruct.Pin = CE_Pin;
 80007f6:	2340      	movs	r3, #64	@ 0x40
 80007f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fa:	2301      	movs	r3, #1
 80007fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000802:	2300      	movs	r3, #0
 8000804:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CE_GPIO_Port, &GPIO_InitStruct);
 8000806:	f107 0314 	add.w	r3, r7, #20
 800080a:	4619      	mov	r1, r3
 800080c:	4808      	ldr	r0, [pc, #32]	@ (8000830 <MX_GPIO_Init+0x134>)
 800080e:	f000 fc8d 	bl	800112c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 15, 0);
 8000812:	2200      	movs	r2, #0
 8000814:	210f      	movs	r1, #15
 8000816:	2006      	movs	r0, #6
 8000818:	f000 fc51 	bl	80010be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800081c:	2006      	movs	r0, #6
 800081e:	f000 fc6a 	bl	80010f6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000822:	bf00      	nop
 8000824:	3728      	adds	r7, #40	@ 0x28
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40021000 	.word	0x40021000
 8000830:	48000400 	.word	0x48000400
 8000834:	48000800 	.word	0x48000800

08000838 <SPI_write>:

/* USER CODE BEGIN 4 */
void SPI_write(unsigned char data){
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	4603      	mov	r3, r0
 8000840:	71fb      	strb	r3, [r7, #7]
	// Chip Enable (low is asserted)
	HAL_GPIO_WritePin(CE_PORT, CE_PIN, GPIO_PIN_RESET);
 8000842:	2200      	movs	r2, #0
 8000844:	2140      	movs	r1, #64	@ 0x40
 8000846:	4809      	ldr	r0, [pc, #36]	@ (800086c <SPI_write+0x34>)
 8000848:	f000 fe32 	bl	80014b0 <HAL_GPIO_WritePin>
	// Send data over SPI1
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &data, 1, HAL_MAX_DELAY);
 800084c:	1df9      	adds	r1, r7, #7
 800084e:	f04f 33ff 	mov.w	r3, #4294967295
 8000852:	2201      	movs	r2, #1
 8000854:	4806      	ldr	r0, [pc, #24]	@ (8000870 <SPI_write+0x38>)
 8000856:	f002 fe4c 	bl	80034f2 <HAL_SPI_Transmit>
	// Chip Disable
	HAL_GPIO_WritePin(CE_PORT, CE_PIN, GPIO_PIN_SET);
 800085a:	2201      	movs	r2, #1
 800085c:	2140      	movs	r1, #64	@ 0x40
 800085e:	4803      	ldr	r0, [pc, #12]	@ (800086c <SPI_write+0x34>)
 8000860:	f000 fe26 	bl	80014b0 <HAL_GPIO_WritePin>
}
 8000864:	bf00      	nop
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	48000400 	.word	0x48000400
 8000870:	20000080 	.word	0x20000080

08000874 <GLCD_data_write>:

void GLCD_data_write(unsigned char data){
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	71fb      	strb	r3, [r7, #7]
	// Switch to "data" mode (D/C pin high)
	HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 800087e:	2201      	movs	r2, #1
 8000880:	2101      	movs	r1, #1
 8000882:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000886:	f000 fe13 	bl	80014b0 <HAL_GPIO_WritePin>
	// Send data over SPI
	SPI_write(data);
 800088a:	79fb      	ldrb	r3, [r7, #7]
 800088c:	4618      	mov	r0, r3
 800088e:	f7ff ffd3 	bl	8000838 <SPI_write>
}
 8000892:	bf00      	nop
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}

0800089a <GLCD_command_write>:

void GLCD_command_write(unsigned char data){
 800089a:	b580      	push	{r7, lr}
 800089c:	b082      	sub	sp, #8
 800089e:	af00      	add	r7, sp, #0
 80008a0:	4603      	mov	r3, r0
 80008a2:	71fb      	strb	r3, [r7, #7]
	// Switch to "command" mode (D/C pin low)
	HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 80008a4:	2200      	movs	r2, #0
 80008a6:	2101      	movs	r1, #1
 80008a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008ac:	f000 fe00 	bl	80014b0 <HAL_GPIO_WritePin>
	// Send data over SPI
	SPI_write(data);
 80008b0:	79fb      	ldrb	r3, [r7, #7]
 80008b2:	4618      	mov	r0, r3
 80008b4:	f7ff ffc0 	bl	8000838 <SPI_write>
}
 80008b8:	bf00      	nop
 80008ba:	3708      	adds	r7, #8
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}

080008c0 <GLCD_init>:

void GLCD_init(void){
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
	// Keep CE high when not transmitting
	HAL_GPIO_WritePin(CE_PORT, CE_PIN, GPIO_PIN_SET);
 80008c4:	2201      	movs	r2, #1
 80008c6:	2140      	movs	r1, #64	@ 0x40
 80008c8:	4811      	ldr	r0, [pc, #68]	@ (8000910 <GLCD_init+0x50>)
 80008ca:	f000 fdf1 	bl	80014b0 <HAL_GPIO_WritePin>
	// Reset the screen (low pulse - down & up)
	HAL_GPIO_WritePin(RESET_PORT, RESET_PIN, GPIO_PIN_RESET);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2102      	movs	r1, #2
 80008d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008d6:	f000 fdeb 	bl	80014b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RESET_PORT, RESET_PIN, GPIO_PIN_SET);
 80008da:	2201      	movs	r2, #1
 80008dc:	2102      	movs	r1, #2
 80008de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008e2:	f000 fde5 	bl	80014b0 <HAL_GPIO_WritePin>
	// Configure the screen (according to the datasheet)
	GLCD_command_write(0x21); // enter extended command mode
 80008e6:	2021      	movs	r0, #33	@ 0x21
 80008e8:	f7ff ffd7 	bl	800089a <GLCD_command_write>
	// may need to change
	GLCD_command_write(0xC0); // set LCD Vop for contrast (this may be adjusted)
 80008ec:	20c0      	movs	r0, #192	@ 0xc0
 80008ee:	f7ff ffd4 	bl	800089a <GLCD_command_write>
	GLCD_command_write(0x04); // set temp coefficient
 80008f2:	2004      	movs	r0, #4
 80008f4:	f7ff ffd1 	bl	800089a <GLCD_command_write>
	// may need to change
	GLCD_command_write(0x17); // set LCD bias mode (this may be adjusted)
 80008f8:	2017      	movs	r0, #23
 80008fa:	f7ff ffce 	bl	800089a <GLCD_command_write>
	GLCD_command_write(0x20); // return to normal command mode
 80008fe:	2020      	movs	r0, #32
 8000900:	f7ff ffcb 	bl	800089a <GLCD_command_write>
	GLCD_command_write(0x0C); // set display mode normal
 8000904:	200c      	movs	r0, #12
 8000906:	f7ff ffc8 	bl	800089a <GLCD_command_write>
}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	48000400 	.word	0x48000400

08000914 <GLCD_setCursor>:

void GLCD_setCursor(unsigned char x, unsigned char y){
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	4603      	mov	r3, r0
 800091c:	460a      	mov	r2, r1
 800091e:	71fb      	strb	r3, [r7, #7]
 8000920:	4613      	mov	r3, r2
 8000922:	71bb      	strb	r3, [r7, #6]
	GLCD_command_write(0x80 | x); // column
 8000924:	79fb      	ldrb	r3, [r7, #7]
 8000926:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800092a:	b2db      	uxtb	r3, r3
 800092c:	4618      	mov	r0, r3
 800092e:	f7ff ffb4 	bl	800089a <GLCD_command_write>
	GLCD_command_write(0x40 | y); // bank
 8000932:	79bb      	ldrb	r3, [r7, #6]
 8000934:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000938:	b2db      	uxtb	r3, r3
 800093a:	4618      	mov	r0, r3
 800093c:	f7ff ffad 	bl	800089a <GLCD_command_write>
}
 8000940:	bf00      	nop
 8000942:	3708      	adds	r7, #8
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}

08000948 <GLCD_clear>:

void GLCD_clear(void){
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
	int i;
	for(i = 0; i < (GLCD_WIDTH * NUM_BANKS); i++){
 800094e:	2300      	movs	r3, #0
 8000950:	607b      	str	r3, [r7, #4]
 8000952:	e005      	b.n	8000960 <GLCD_clear+0x18>
		GLCD_data_write(0x00); // write zeros
 8000954:	2000      	movs	r0, #0
 8000956:	f7ff ff8d 	bl	8000874 <GLCD_data_write>
	for(i = 0; i < (GLCD_WIDTH * NUM_BANKS); i++){
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	3301      	adds	r3, #1
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	f5b3 7ffc 	cmp.w	r3, #504	@ 0x1f8
 8000966:	dbf5      	blt.n	8000954 <GLCD_clear+0xc>
	}
	GLCD_setCursor(0,0); // return cursor to top left
 8000968:	2100      	movs	r1, #0
 800096a:	2000      	movs	r0, #0
 800096c:	f7ff ffd2 	bl	8000914 <GLCD_setCursor>
}
 8000970:	bf00      	nop
 8000972:	3708      	adds	r7, #8
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}

08000978 <GLCD_putchar>:

void GLCD_putchar(int bank_number, int col_number, int font_table_row){
 8000978:	b580      	push	{r7, lr}
 800097a:	b086      	sub	sp, #24
 800097c:	af00      	add	r7, sp, #0
 800097e:	60f8      	str	r0, [r7, #12]
 8000980:	60b9      	str	r1, [r7, #8]
 8000982:	607a      	str	r2, [r7, #4]
	int col = col_number * 8;
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	00db      	lsls	r3, r3, #3
 8000988:	613b      	str	r3, [r7, #16]
	GLCD_setCursor(col, bank_number);
 800098a:	693b      	ldr	r3, [r7, #16]
 800098c:	b2db      	uxtb	r3, r3
 800098e:	68fa      	ldr	r2, [r7, #12]
 8000990:	b2d2      	uxtb	r2, r2
 8000992:	4611      	mov	r1, r2
 8000994:	4618      	mov	r0, r3
 8000996:	f7ff ffbd 	bl	8000914 <GLCD_setCursor>
	 int i;
	 for (i=0; i<8; i++){
 800099a:	2300      	movs	r3, #0
 800099c:	617b      	str	r3, [r7, #20]
 800099e:	e00c      	b.n	80009ba <GLCD_putchar+0x42>
		 GLCD_data_write(font_table[font_table_row][i]);
 80009a0:	4a0a      	ldr	r2, [pc, #40]	@ (80009cc <GLCD_putchar+0x54>)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	00db      	lsls	r3, r3, #3
 80009a6:	441a      	add	r2, r3
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	4413      	add	r3, r2
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	4618      	mov	r0, r3
 80009b0:	f7ff ff60 	bl	8000874 <GLCD_data_write>
	 for (i=0; i<8; i++){
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	3301      	adds	r3, #1
 80009b8:	617b      	str	r3, [r7, #20]
 80009ba:	697b      	ldr	r3, [r7, #20]
 80009bc:	2b07      	cmp	r3, #7
 80009be:	ddef      	ble.n	80009a0 <GLCD_putchar+0x28>
	 }
}
 80009c0:	bf00      	nop
 80009c2:	bf00      	nop
 80009c4:	3718      	adds	r7, #24
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	08003b18 	.word	0x08003b18

080009d0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	4603      	mov	r3, r0
 80009d8:	80fb      	strh	r3, [r7, #6]

	 if (HAL_GPIO_ReadPin(DATA_AVAILABLE_GPIO_Port, DATA_AVAILABLE_Pin)) {
 80009da:	2101      	movs	r1, #1
 80009dc:	4813      	ldr	r0, [pc, #76]	@ (8000a2c <HAL_GPIO_EXTI_Callback+0x5c>)
 80009de:	f000 fd4f 	bl	8001480 <HAL_GPIO_ReadPin>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d01d      	beq.n	8000a24 <HAL_GPIO_EXTI_Callback+0x54>
		 // Turn on LED2 to show key press detected
		 HAL_GPIO_WritePin(KEY_LED_GPIO_Port, KEY_LED_Pin, 1); // turn on the KEY_LED (LED2)
 80009e8:	2201      	movs	r2, #1
 80009ea:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009f2:	f000 fd5d 	bl	80014b0 <HAL_GPIO_WritePin>

		 uint8_t key = keypad_decode();  // determine which key was pressed
 80009f6:	f000 f81b 	bl	8000a30 <keypad_decode>
 80009fa:	4603      	mov	r3, r0
 80009fc:	73fb      	strb	r3, [r7, #15]
		 lcd_send_data(key); // Send data to the LCD
 80009fe:	7bfb      	ldrb	r3, [r7, #15]
 8000a00:	4618      	mov	r0, r3
 8000a02:	f7ff fc46 	bl	8000292 <lcd_send_data>

		 // wait for user to release key, then turn off LED2
		while (HAL_GPIO_ReadPin(DATA_AVAILABLE_GPIO_Port, DATA_AVAILABLE_Pin) == GPIO_PIN_SET);
 8000a06:	bf00      	nop
 8000a08:	2101      	movs	r1, #1
 8000a0a:	4808      	ldr	r0, [pc, #32]	@ (8000a2c <HAL_GPIO_EXTI_Callback+0x5c>)
 8000a0c:	f000 fd38 	bl	8001480 <HAL_GPIO_ReadPin>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b01      	cmp	r3, #1
 8000a14:	d0f8      	beq.n	8000a08 <HAL_GPIO_EXTI_Callback+0x38>
		HAL_GPIO_WritePin(KEY_LED_GPIO_Port, KEY_LED_Pin, 0); // turn off the KEY_LED (LED2)
 8000a16:	2200      	movs	r2, #0
 8000a18:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a1c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a20:	f000 fd46 	bl	80014b0 <HAL_GPIO_WritePin>
	 }
}
 8000a24:	bf00      	nop
 8000a26:	3710      	adds	r7, #16
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	48000800 	.word	0x48000800

08000a30 <keypad_decode>:
uint8_t keypad_decode() {
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
	uint8_t key;
	unsigned char data = 0b0000;
 8000a36:	2300      	movs	r3, #0
 8000a38:	71bb      	strb	r3, [r7, #6]

	// read the data pins and combine into the 4-bit value: D3_D2_D1_D0
	unsigned char D3 = HAL_GPIO_ReadPin(DATA3_GPIO_Port, DATA3_Pin);
 8000a3a:	2101      	movs	r1, #1
 8000a3c:	4843      	ldr	r0, [pc, #268]	@ (8000b4c <keypad_decode+0x11c>)
 8000a3e:	f000 fd1f 	bl	8001480 <HAL_GPIO_ReadPin>
 8000a42:	4603      	mov	r3, r0
 8000a44:	717b      	strb	r3, [r7, #5]
	unsigned char D2 = HAL_GPIO_ReadPin(DATA2_GPIO_Port, DATA2_Pin);
 8000a46:	2110      	movs	r1, #16
 8000a48:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a4c:	f000 fd18 	bl	8001480 <HAL_GPIO_ReadPin>
 8000a50:	4603      	mov	r3, r0
 8000a52:	713b      	strb	r3, [r7, #4]
	unsigned char D1 = HAL_GPIO_ReadPin(DATA1_GPIO_Port, DATA1_Pin);
 8000a54:	2120      	movs	r1, #32
 8000a56:	483d      	ldr	r0, [pc, #244]	@ (8000b4c <keypad_decode+0x11c>)
 8000a58:	f000 fd12 	bl	8001480 <HAL_GPIO_ReadPin>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	70fb      	strb	r3, [r7, #3]
	unsigned char D0 = HAL_GPIO_ReadPin(DATA0_GPIO_Port, DATA0_Pin);
 8000a60:	2104      	movs	r1, #4
 8000a62:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a66:	f000 fd0b 	bl	8001480 <HAL_GPIO_ReadPin>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	70bb      	strb	r3, [r7, #2]
	data = ((D3 << 3) | (D2 << 2) | (D1 << 1) | D0);
 8000a6e:	797b      	ldrb	r3, [r7, #5]
 8000a70:	00db      	lsls	r3, r3, #3
 8000a72:	b25a      	sxtb	r2, r3
 8000a74:	793b      	ldrb	r3, [r7, #4]
 8000a76:	009b      	lsls	r3, r3, #2
 8000a78:	b25b      	sxtb	r3, r3
 8000a7a:	4313      	orrs	r3, r2
 8000a7c:	b25a      	sxtb	r2, r3
 8000a7e:	78fb      	ldrb	r3, [r7, #3]
 8000a80:	005b      	lsls	r3, r3, #1
 8000a82:	b25b      	sxtb	r3, r3
 8000a84:	4313      	orrs	r3, r2
 8000a86:	b25a      	sxtb	r2, r3
 8000a88:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8000a8c:	4313      	orrs	r3, r2
 8000a8e:	b25b      	sxtb	r3, r3
 8000a90:	71bb      	strb	r3, [r7, #6]
	// 4 5 6 B
	// 7 8 9 C
	// * 0 # D

   // Finish this switch statement to remap the "data" to the correct "key"
	switch (data) {
 8000a92:	79bb      	ldrb	r3, [r7, #6]
 8000a94:	2b0f      	cmp	r3, #15
 8000a96:	d853      	bhi.n	8000b40 <keypad_decode+0x110>
 8000a98:	a201      	add	r2, pc, #4	@ (adr r2, 8000aa0 <keypad_decode+0x70>)
 8000a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a9e:	bf00      	nop
 8000aa0:	08000ae1 	.word	0x08000ae1
 8000aa4:	08000ae7 	.word	0x08000ae7
 8000aa8:	08000aed 	.word	0x08000aed
 8000aac:	08000af3 	.word	0x08000af3
 8000ab0:	08000af9 	.word	0x08000af9
 8000ab4:	08000aff 	.word	0x08000aff
 8000ab8:	08000b05 	.word	0x08000b05
 8000abc:	08000b0b 	.word	0x08000b0b
 8000ac0:	08000b11 	.word	0x08000b11
 8000ac4:	08000b17 	.word	0x08000b17
 8000ac8:	08000b1d 	.word	0x08000b1d
 8000acc:	08000b23 	.word	0x08000b23
 8000ad0:	08000b29 	.word	0x08000b29
 8000ad4:	08000b2f 	.word	0x08000b2f
 8000ad8:	08000b35 	.word	0x08000b35
 8000adc:	08000b3b 	.word	0x08000b3b
      case 0x0:
         key = 0x31; // 1
 8000ae0:	2331      	movs	r3, #49	@ 0x31
 8000ae2:	71fb      	strb	r3, [r7, #7]
         break;
 8000ae4:	e02c      	b.n	8000b40 <keypad_decode+0x110>
      case 0x1:
         key = 0x32; // 2
 8000ae6:	2332      	movs	r3, #50	@ 0x32
 8000ae8:	71fb      	strb	r3, [r7, #7]
         break;
 8000aea:	e029      	b.n	8000b40 <keypad_decode+0x110>
      case 0x2:
         key = 0x33; // 3
 8000aec:	2333      	movs	r3, #51	@ 0x33
 8000aee:	71fb      	strb	r3, [r7, #7]
         break;
 8000af0:	e026      	b.n	8000b40 <keypad_decode+0x110>
      case 0x3:
         key = 0x41; // A
 8000af2:	2341      	movs	r3, #65	@ 0x41
 8000af4:	71fb      	strb	r3, [r7, #7]
         break;
 8000af6:	e023      	b.n	8000b40 <keypad_decode+0x110>
      case 0x4:
         key = 0x34; // 4
 8000af8:	2334      	movs	r3, #52	@ 0x34
 8000afa:	71fb      	strb	r3, [r7, #7]
         break;
 8000afc:	e020      	b.n	8000b40 <keypad_decode+0x110>
      case 0x5:
         key = 0x35; // 5
 8000afe:	2335      	movs	r3, #53	@ 0x35
 8000b00:	71fb      	strb	r3, [r7, #7]
         break;
 8000b02:	e01d      	b.n	8000b40 <keypad_decode+0x110>
      case 0x6:
         key = 0x36; // 6
 8000b04:	2336      	movs	r3, #54	@ 0x36
 8000b06:	71fb      	strb	r3, [r7, #7]
         break;
 8000b08:	e01a      	b.n	8000b40 <keypad_decode+0x110>
      case 0x7:
         key = 0x42; // B
 8000b0a:	2342      	movs	r3, #66	@ 0x42
 8000b0c:	71fb      	strb	r3, [r7, #7]
         break;
 8000b0e:	e017      	b.n	8000b40 <keypad_decode+0x110>
      case 0x8:
         key = 0x37; // 7
 8000b10:	2337      	movs	r3, #55	@ 0x37
 8000b12:	71fb      	strb	r3, [r7, #7]
         break;
 8000b14:	e014      	b.n	8000b40 <keypad_decode+0x110>
      case 0x9:
         key = 0x38; // 8
 8000b16:	2338      	movs	r3, #56	@ 0x38
 8000b18:	71fb      	strb	r3, [r7, #7]
         break;
 8000b1a:	e011      	b.n	8000b40 <keypad_decode+0x110>
      case 0xA:
         key = 0x39; // 9
 8000b1c:	2339      	movs	r3, #57	@ 0x39
 8000b1e:	71fb      	strb	r3, [r7, #7]
         break;
 8000b20:	e00e      	b.n	8000b40 <keypad_decode+0x110>
      case 0xB:
         key = 0x43; // C
 8000b22:	2343      	movs	r3, #67	@ 0x43
 8000b24:	71fb      	strb	r3, [r7, #7]
         break;
 8000b26:	e00b      	b.n	8000b40 <keypad_decode+0x110>
      case 0xC:
         key = 0x2A; // *
 8000b28:	232a      	movs	r3, #42	@ 0x2a
 8000b2a:	71fb      	strb	r3, [r7, #7]
         break;
 8000b2c:	e008      	b.n	8000b40 <keypad_decode+0x110>
      case 0xD:
         key = 0x30; // 0
 8000b2e:	2330      	movs	r3, #48	@ 0x30
 8000b30:	71fb      	strb	r3, [r7, #7]
         break;
 8000b32:	e005      	b.n	8000b40 <keypad_decode+0x110>
      case 0xE:
         key = 0x23; // #
 8000b34:	2323      	movs	r3, #35	@ 0x23
 8000b36:	71fb      	strb	r3, [r7, #7]
         break;
 8000b38:	e002      	b.n	8000b40 <keypad_decode+0x110>
      case 0xF:
         key = 0x44; // D
 8000b3a:	2344      	movs	r3, #68	@ 0x44
 8000b3c:	71fb      	strb	r3, [r7, #7]
         break;
 8000b3e:	bf00      	nop
	}
	return key;
 8000b40:	79fb      	ldrb	r3, [r7, #7]
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	48000400 	.word	0x48000400

08000b50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b54:	b672      	cpsid	i
}
 8000b56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b58:	bf00      	nop
 8000b5a:	e7fd      	b.n	8000b58 <Error_Handler+0x8>

08000b5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b62:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba0 <HAL_MspInit+0x44>)
 8000b64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b66:	4a0e      	ldr	r2, [pc, #56]	@ (8000ba0 <HAL_MspInit+0x44>)
 8000b68:	f043 0301 	orr.w	r3, r3, #1
 8000b6c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba0 <HAL_MspInit+0x44>)
 8000b70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7a:	4b09      	ldr	r3, [pc, #36]	@ (8000ba0 <HAL_MspInit+0x44>)
 8000b7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b7e:	4a08      	ldr	r2, [pc, #32]	@ (8000ba0 <HAL_MspInit+0x44>)
 8000b80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b84:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b86:	4b06      	ldr	r3, [pc, #24]	@ (8000ba0 <HAL_MspInit+0x44>)
 8000b88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b8e:	603b      	str	r3, [r7, #0]
 8000b90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b92:	bf00      	nop
 8000b94:	370c      	adds	r7, #12
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	40021000 	.word	0x40021000

08000ba4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b0ac      	sub	sp, #176	@ 0xb0
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bac:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]
 8000bba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bbc:	f107 0314 	add.w	r3, r7, #20
 8000bc0:	2288      	movs	r2, #136	@ 0x88
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f002 ff6f 	bl	8003aa8 <memset>
  if(hi2c->Instance==I2C1)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4a21      	ldr	r2, [pc, #132]	@ (8000c54 <HAL_I2C_MspInit+0xb0>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d13b      	bne.n	8000c4c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000bd4:	2340      	movs	r3, #64	@ 0x40
 8000bd6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	4618      	mov	r0, r3
 8000be2:	f001 ff27 	bl	8002a34 <HAL_RCCEx_PeriphCLKConfig>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000bec:	f7ff ffb0 	bl	8000b50 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf0:	4b19      	ldr	r3, [pc, #100]	@ (8000c58 <HAL_I2C_MspInit+0xb4>)
 8000bf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bf4:	4a18      	ldr	r2, [pc, #96]	@ (8000c58 <HAL_I2C_MspInit+0xb4>)
 8000bf6:	f043 0302 	orr.w	r3, r3, #2
 8000bfa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bfc:	4b16      	ldr	r3, [pc, #88]	@ (8000c58 <HAL_I2C_MspInit+0xb4>)
 8000bfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c00:	f003 0302 	and.w	r3, r3, #2
 8000c04:	613b      	str	r3, [r7, #16]
 8000c06:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c08:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c0c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c10:	2312      	movs	r3, #18
 8000c12:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1c:	2303      	movs	r3, #3
 8000c1e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c22:	2304      	movs	r3, #4
 8000c24:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c28:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	480b      	ldr	r0, [pc, #44]	@ (8000c5c <HAL_I2C_MspInit+0xb8>)
 8000c30:	f000 fa7c 	bl	800112c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c34:	4b08      	ldr	r3, [pc, #32]	@ (8000c58 <HAL_I2C_MspInit+0xb4>)
 8000c36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c38:	4a07      	ldr	r2, [pc, #28]	@ (8000c58 <HAL_I2C_MspInit+0xb4>)
 8000c3a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c40:	4b05      	ldr	r3, [pc, #20]	@ (8000c58 <HAL_I2C_MspInit+0xb4>)
 8000c42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c48:	60fb      	str	r3, [r7, #12]
 8000c4a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000c4c:	bf00      	nop
 8000c4e:	37b0      	adds	r7, #176	@ 0xb0
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	40005400 	.word	0x40005400
 8000c58:	40021000 	.word	0x40021000
 8000c5c:	48000400 	.word	0x48000400

08000c60 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b08a      	sub	sp, #40	@ 0x28
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c68:	f107 0314 	add.w	r3, r7, #20
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	60da      	str	r2, [r3, #12]
 8000c76:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a17      	ldr	r2, [pc, #92]	@ (8000cdc <HAL_SPI_MspInit+0x7c>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d128      	bne.n	8000cd4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c82:	4b17      	ldr	r3, [pc, #92]	@ (8000ce0 <HAL_SPI_MspInit+0x80>)
 8000c84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c86:	4a16      	ldr	r2, [pc, #88]	@ (8000ce0 <HAL_SPI_MspInit+0x80>)
 8000c88:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c8c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c8e:	4b14      	ldr	r3, [pc, #80]	@ (8000ce0 <HAL_SPI_MspInit+0x80>)
 8000c90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c92:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c96:	613b      	str	r3, [r7, #16]
 8000c98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9a:	4b11      	ldr	r3, [pc, #68]	@ (8000ce0 <HAL_SPI_MspInit+0x80>)
 8000c9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c9e:	4a10      	ldr	r2, [pc, #64]	@ (8000ce0 <HAL_SPI_MspInit+0x80>)
 8000ca0:	f043 0301 	orr.w	r3, r3, #1
 8000ca4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ca6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce0 <HAL_SPI_MspInit+0x80>)
 8000ca8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000cb2:	23a0      	movs	r3, #160	@ 0xa0
 8000cb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cc2:	2305      	movs	r3, #5
 8000cc4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc6:	f107 0314 	add.w	r3, r7, #20
 8000cca:	4619      	mov	r1, r3
 8000ccc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cd0:	f000 fa2c 	bl	800112c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000cd4:	bf00      	nop
 8000cd6:	3728      	adds	r7, #40	@ 0x28
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	40013000 	.word	0x40013000
 8000ce0:	40021000 	.word	0x40021000

08000ce4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ce8:	bf00      	nop
 8000cea:	e7fd      	b.n	8000ce8 <NMI_Handler+0x4>

08000cec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cf0:	bf00      	nop
 8000cf2:	e7fd      	b.n	8000cf0 <HardFault_Handler+0x4>

08000cf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf8:	bf00      	nop
 8000cfa:	e7fd      	b.n	8000cf8 <MemManage_Handler+0x4>

08000cfc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d00:	bf00      	nop
 8000d02:	e7fd      	b.n	8000d00 <BusFault_Handler+0x4>

08000d04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d08:	bf00      	nop
 8000d0a:	e7fd      	b.n	8000d08 <UsageFault_Handler+0x4>

08000d0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr

08000d1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr

08000d28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr

08000d36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d3a:	f000 f8a1 	bl	8000e80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000d42:	b580      	push	{r7, lr}
 8000d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DATA_AVAILABLE_Pin);
 8000d46:	2001      	movs	r0, #1
 8000d48:	f000 fbca 	bl	80014e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000d4c:	bf00      	nop
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d54:	4b06      	ldr	r3, [pc, #24]	@ (8000d70 <SystemInit+0x20>)
 8000d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d5a:	4a05      	ldr	r2, [pc, #20]	@ (8000d70 <SystemInit+0x20>)
 8000d5c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d60:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	e000ed00 	.word	0xe000ed00

08000d74 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d74:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000dac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d78:	f7ff ffea 	bl	8000d50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d7c:	480c      	ldr	r0, [pc, #48]	@ (8000db0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d7e:	490d      	ldr	r1, [pc, #52]	@ (8000db4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d80:	4a0d      	ldr	r2, [pc, #52]	@ (8000db8 <LoopForever+0xe>)
  movs r3, #0
 8000d82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d84:	e002      	b.n	8000d8c <LoopCopyDataInit>

08000d86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d8a:	3304      	adds	r3, #4

08000d8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d90:	d3f9      	bcc.n	8000d86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d92:	4a0a      	ldr	r2, [pc, #40]	@ (8000dbc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d94:	4c0a      	ldr	r4, [pc, #40]	@ (8000dc0 <LoopForever+0x16>)
  movs r3, #0
 8000d96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d98:	e001      	b.n	8000d9e <LoopFillZerobss>

08000d9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d9c:	3204      	adds	r2, #4

08000d9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000da0:	d3fb      	bcc.n	8000d9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000da2:	f002 fe89 	bl	8003ab8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000da6:	f7ff fad5 	bl	8000354 <main>

08000daa <LoopForever>:

LoopForever:
    b LoopForever
 8000daa:	e7fe      	b.n	8000daa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000dac:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000db0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000db4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000db8:	08003bf0 	.word	0x08003bf0
  ldr r2, =_sbss
 8000dbc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000dc0:	200000e8 	.word	0x200000e8

08000dc4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000dc4:	e7fe      	b.n	8000dc4 <ADC1_2_IRQHandler>
	...

08000dc8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dd2:	4b0c      	ldr	r3, [pc, #48]	@ (8000e04 <HAL_Init+0x3c>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a0b      	ldr	r2, [pc, #44]	@ (8000e04 <HAL_Init+0x3c>)
 8000dd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ddc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dde:	2003      	movs	r0, #3
 8000de0:	f000 f962 	bl	80010a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000de4:	2001      	movs	r0, #1
 8000de6:	f000 f80f 	bl	8000e08 <HAL_InitTick>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d002      	beq.n	8000df6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000df0:	2301      	movs	r3, #1
 8000df2:	71fb      	strb	r3, [r7, #7]
 8000df4:	e001      	b.n	8000dfa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000df6:	f7ff feb1 	bl	8000b5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000dfa:	79fb      	ldrb	r3, [r7, #7]
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	40022000 	.word	0x40022000

08000e08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e10:	2300      	movs	r3, #0
 8000e12:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e14:	4b17      	ldr	r3, [pc, #92]	@ (8000e74 <HAL_InitTick+0x6c>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d023      	beq.n	8000e64 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e1c:	4b16      	ldr	r3, [pc, #88]	@ (8000e78 <HAL_InitTick+0x70>)
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	4b14      	ldr	r3, [pc, #80]	@ (8000e74 <HAL_InitTick+0x6c>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	4619      	mov	r1, r3
 8000e26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e32:	4618      	mov	r0, r3
 8000e34:	f000 f96d 	bl	8001112 <HAL_SYSTICK_Config>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d10f      	bne.n	8000e5e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2b0f      	cmp	r3, #15
 8000e42:	d809      	bhi.n	8000e58 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e44:	2200      	movs	r2, #0
 8000e46:	6879      	ldr	r1, [r7, #4]
 8000e48:	f04f 30ff 	mov.w	r0, #4294967295
 8000e4c:	f000 f937 	bl	80010be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e50:	4a0a      	ldr	r2, [pc, #40]	@ (8000e7c <HAL_InitTick+0x74>)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6013      	str	r3, [r2, #0]
 8000e56:	e007      	b.n	8000e68 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	73fb      	strb	r3, [r7, #15]
 8000e5c:	e004      	b.n	8000e68 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	73fb      	strb	r3, [r7, #15]
 8000e62:	e001      	b.n	8000e68 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e64:	2301      	movs	r3, #1
 8000e66:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3710      	adds	r7, #16
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	2000000c 	.word	0x2000000c
 8000e78:	20000004 	.word	0x20000004
 8000e7c:	20000008 	.word	0x20000008

08000e80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e84:	4b06      	ldr	r3, [pc, #24]	@ (8000ea0 <HAL_IncTick+0x20>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	461a      	mov	r2, r3
 8000e8a:	4b06      	ldr	r3, [pc, #24]	@ (8000ea4 <HAL_IncTick+0x24>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4413      	add	r3, r2
 8000e90:	4a04      	ldr	r2, [pc, #16]	@ (8000ea4 <HAL_IncTick+0x24>)
 8000e92:	6013      	str	r3, [r2, #0]
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	2000000c 	.word	0x2000000c
 8000ea4:	200000e4 	.word	0x200000e4

08000ea8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  return uwTick;
 8000eac:	4b03      	ldr	r3, [pc, #12]	@ (8000ebc <HAL_GetTick+0x14>)
 8000eae:	681b      	ldr	r3, [r3, #0]
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	200000e4 	.word	0x200000e4

08000ec0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ec8:	f7ff ffee 	bl	8000ea8 <HAL_GetTick>
 8000ecc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ed8:	d005      	beq.n	8000ee6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000eda:	4b0a      	ldr	r3, [pc, #40]	@ (8000f04 <HAL_Delay+0x44>)
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	461a      	mov	r2, r3
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ee6:	bf00      	nop
 8000ee8:	f7ff ffde 	bl	8000ea8 <HAL_GetTick>
 8000eec:	4602      	mov	r2, r0
 8000eee:	68bb      	ldr	r3, [r7, #8]
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	68fa      	ldr	r2, [r7, #12]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d8f7      	bhi.n	8000ee8 <HAL_Delay+0x28>
  {
  }
}
 8000ef8:	bf00      	nop
 8000efa:	bf00      	nop
 8000efc:	3710      	adds	r7, #16
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	2000000c 	.word	0x2000000c

08000f08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b085      	sub	sp, #20
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	f003 0307 	and.w	r3, r3, #7
 8000f16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f18:	4b0c      	ldr	r3, [pc, #48]	@ (8000f4c <__NVIC_SetPriorityGrouping+0x44>)
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f1e:	68ba      	ldr	r2, [r7, #8]
 8000f20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f24:	4013      	ands	r3, r2
 8000f26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f3a:	4a04      	ldr	r2, [pc, #16]	@ (8000f4c <__NVIC_SetPriorityGrouping+0x44>)
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	60d3      	str	r3, [r2, #12]
}
 8000f40:	bf00      	nop
 8000f42:	3714      	adds	r7, #20
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f54:	4b04      	ldr	r3, [pc, #16]	@ (8000f68 <__NVIC_GetPriorityGrouping+0x18>)
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	0a1b      	lsrs	r3, r3, #8
 8000f5a:	f003 0307 	and.w	r3, r3, #7
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr
 8000f68:	e000ed00 	.word	0xe000ed00

08000f6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	db0b      	blt.n	8000f96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f7e:	79fb      	ldrb	r3, [r7, #7]
 8000f80:	f003 021f 	and.w	r2, r3, #31
 8000f84:	4907      	ldr	r1, [pc, #28]	@ (8000fa4 <__NVIC_EnableIRQ+0x38>)
 8000f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8a:	095b      	lsrs	r3, r3, #5
 8000f8c:	2001      	movs	r0, #1
 8000f8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f96:	bf00      	nop
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	e000e100 	.word	0xe000e100

08000fa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	6039      	str	r1, [r7, #0]
 8000fb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	db0a      	blt.n	8000fd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	b2da      	uxtb	r2, r3
 8000fc0:	490c      	ldr	r1, [pc, #48]	@ (8000ff4 <__NVIC_SetPriority+0x4c>)
 8000fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc6:	0112      	lsls	r2, r2, #4
 8000fc8:	b2d2      	uxtb	r2, r2
 8000fca:	440b      	add	r3, r1
 8000fcc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fd0:	e00a      	b.n	8000fe8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	b2da      	uxtb	r2, r3
 8000fd6:	4908      	ldr	r1, [pc, #32]	@ (8000ff8 <__NVIC_SetPriority+0x50>)
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	f003 030f 	and.w	r3, r3, #15
 8000fde:	3b04      	subs	r3, #4
 8000fe0:	0112      	lsls	r2, r2, #4
 8000fe2:	b2d2      	uxtb	r2, r2
 8000fe4:	440b      	add	r3, r1
 8000fe6:	761a      	strb	r2, [r3, #24]
}
 8000fe8:	bf00      	nop
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	e000e100 	.word	0xe000e100
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b089      	sub	sp, #36	@ 0x24
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	f003 0307 	and.w	r3, r3, #7
 800100e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	f1c3 0307 	rsb	r3, r3, #7
 8001016:	2b04      	cmp	r3, #4
 8001018:	bf28      	it	cs
 800101a:	2304      	movcs	r3, #4
 800101c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	3304      	adds	r3, #4
 8001022:	2b06      	cmp	r3, #6
 8001024:	d902      	bls.n	800102c <NVIC_EncodePriority+0x30>
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	3b03      	subs	r3, #3
 800102a:	e000      	b.n	800102e <NVIC_EncodePriority+0x32>
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001030:	f04f 32ff 	mov.w	r2, #4294967295
 8001034:	69bb      	ldr	r3, [r7, #24]
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	43da      	mvns	r2, r3
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	401a      	ands	r2, r3
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001044:	f04f 31ff 	mov.w	r1, #4294967295
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	fa01 f303 	lsl.w	r3, r1, r3
 800104e:	43d9      	mvns	r1, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001054:	4313      	orrs	r3, r2
         );
}
 8001056:	4618      	mov	r0, r3
 8001058:	3724      	adds	r7, #36	@ 0x24
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
	...

08001064 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	3b01      	subs	r3, #1
 8001070:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001074:	d301      	bcc.n	800107a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001076:	2301      	movs	r3, #1
 8001078:	e00f      	b.n	800109a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800107a:	4a0a      	ldr	r2, [pc, #40]	@ (80010a4 <SysTick_Config+0x40>)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3b01      	subs	r3, #1
 8001080:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001082:	210f      	movs	r1, #15
 8001084:	f04f 30ff 	mov.w	r0, #4294967295
 8001088:	f7ff ff8e 	bl	8000fa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800108c:	4b05      	ldr	r3, [pc, #20]	@ (80010a4 <SysTick_Config+0x40>)
 800108e:	2200      	movs	r2, #0
 8001090:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001092:	4b04      	ldr	r3, [pc, #16]	@ (80010a4 <SysTick_Config+0x40>)
 8001094:	2207      	movs	r2, #7
 8001096:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001098:	2300      	movs	r3, #0
}
 800109a:	4618      	mov	r0, r3
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	e000e010 	.word	0xe000e010

080010a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f7ff ff29 	bl	8000f08 <__NVIC_SetPriorityGrouping>
}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b086      	sub	sp, #24
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	4603      	mov	r3, r0
 80010c6:	60b9      	str	r1, [r7, #8]
 80010c8:	607a      	str	r2, [r7, #4]
 80010ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010cc:	2300      	movs	r3, #0
 80010ce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010d0:	f7ff ff3e 	bl	8000f50 <__NVIC_GetPriorityGrouping>
 80010d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	68b9      	ldr	r1, [r7, #8]
 80010da:	6978      	ldr	r0, [r7, #20]
 80010dc:	f7ff ff8e 	bl	8000ffc <NVIC_EncodePriority>
 80010e0:	4602      	mov	r2, r0
 80010e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010e6:	4611      	mov	r1, r2
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff ff5d 	bl	8000fa8 <__NVIC_SetPriority>
}
 80010ee:	bf00      	nop
 80010f0:	3718      	adds	r7, #24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b082      	sub	sp, #8
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	4603      	mov	r3, r0
 80010fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff ff31 	bl	8000f6c <__NVIC_EnableIRQ>
}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b082      	sub	sp, #8
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff ffa2 	bl	8001064 <SysTick_Config>
 8001120:	4603      	mov	r3, r0
}
 8001122:	4618      	mov	r0, r3
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
	...

0800112c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800112c:	b480      	push	{r7}
 800112e:	b087      	sub	sp, #28
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001136:	2300      	movs	r3, #0
 8001138:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800113a:	e17f      	b.n	800143c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	2101      	movs	r1, #1
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	fa01 f303 	lsl.w	r3, r1, r3
 8001148:	4013      	ands	r3, r2
 800114a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	2b00      	cmp	r3, #0
 8001150:	f000 8171 	beq.w	8001436 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f003 0303 	and.w	r3, r3, #3
 800115c:	2b01      	cmp	r3, #1
 800115e:	d005      	beq.n	800116c <HAL_GPIO_Init+0x40>
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f003 0303 	and.w	r3, r3, #3
 8001168:	2b02      	cmp	r3, #2
 800116a:	d130      	bne.n	80011ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	2203      	movs	r2, #3
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	43db      	mvns	r3, r3
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	4013      	ands	r3, r2
 8001182:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	68da      	ldr	r2, [r3, #12]
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	693a      	ldr	r2, [r7, #16]
 8001192:	4313      	orrs	r3, r2
 8001194:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011a2:	2201      	movs	r2, #1
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	43db      	mvns	r3, r3
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	4013      	ands	r3, r2
 80011b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	091b      	lsrs	r3, r3, #4
 80011b8:	f003 0201 	and.w	r2, r3, #1
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f003 0303 	and.w	r3, r3, #3
 80011d6:	2b03      	cmp	r3, #3
 80011d8:	d118      	bne.n	800120c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80011e0:	2201      	movs	r2, #1
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	43db      	mvns	r3, r3
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	4013      	ands	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	08db      	lsrs	r3, r3, #3
 80011f6:	f003 0201 	and.w	r2, r3, #1
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	4313      	orrs	r3, r2
 8001204:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	693a      	ldr	r2, [r7, #16]
 800120a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f003 0303 	and.w	r3, r3, #3
 8001214:	2b03      	cmp	r3, #3
 8001216:	d017      	beq.n	8001248 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	2203      	movs	r2, #3
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	43db      	mvns	r3, r3
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	4013      	ands	r3, r2
 800122e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	689a      	ldr	r2, [r3, #8]
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	4313      	orrs	r3, r2
 8001240:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	693a      	ldr	r2, [r7, #16]
 8001246:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f003 0303 	and.w	r3, r3, #3
 8001250:	2b02      	cmp	r3, #2
 8001252:	d123      	bne.n	800129c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	08da      	lsrs	r2, r3, #3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	3208      	adds	r2, #8
 800125c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001260:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	f003 0307 	and.w	r3, r3, #7
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	220f      	movs	r2, #15
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	43db      	mvns	r3, r3
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	4013      	ands	r3, r2
 8001276:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	691a      	ldr	r2, [r3, #16]
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	f003 0307 	and.w	r3, r3, #7
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	4313      	orrs	r3, r2
 800128c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	08da      	lsrs	r2, r3, #3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	3208      	adds	r2, #8
 8001296:	6939      	ldr	r1, [r7, #16]
 8001298:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	2203      	movs	r2, #3
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	43db      	mvns	r3, r3
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	4013      	ands	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f003 0203 	and.w	r2, r3, #3
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	693a      	ldr	r2, [r7, #16]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	693a      	ldr	r2, [r7, #16]
 80012ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	f000 80ac 	beq.w	8001436 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012de:	4b5f      	ldr	r3, [pc, #380]	@ (800145c <HAL_GPIO_Init+0x330>)
 80012e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012e2:	4a5e      	ldr	r2, [pc, #376]	@ (800145c <HAL_GPIO_Init+0x330>)
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	6613      	str	r3, [r2, #96]	@ 0x60
 80012ea:	4b5c      	ldr	r3, [pc, #368]	@ (800145c <HAL_GPIO_Init+0x330>)
 80012ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	60bb      	str	r3, [r7, #8]
 80012f4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012f6:	4a5a      	ldr	r2, [pc, #360]	@ (8001460 <HAL_GPIO_Init+0x334>)
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	089b      	lsrs	r3, r3, #2
 80012fc:	3302      	adds	r3, #2
 80012fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001302:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	f003 0303 	and.w	r3, r3, #3
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	220f      	movs	r2, #15
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	43db      	mvns	r3, r3
 8001314:	693a      	ldr	r2, [r7, #16]
 8001316:	4013      	ands	r3, r2
 8001318:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001320:	d025      	beq.n	800136e <HAL_GPIO_Init+0x242>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a4f      	ldr	r2, [pc, #316]	@ (8001464 <HAL_GPIO_Init+0x338>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d01f      	beq.n	800136a <HAL_GPIO_Init+0x23e>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a4e      	ldr	r2, [pc, #312]	@ (8001468 <HAL_GPIO_Init+0x33c>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d019      	beq.n	8001366 <HAL_GPIO_Init+0x23a>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a4d      	ldr	r2, [pc, #308]	@ (800146c <HAL_GPIO_Init+0x340>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d013      	beq.n	8001362 <HAL_GPIO_Init+0x236>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a4c      	ldr	r2, [pc, #304]	@ (8001470 <HAL_GPIO_Init+0x344>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d00d      	beq.n	800135e <HAL_GPIO_Init+0x232>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a4b      	ldr	r2, [pc, #300]	@ (8001474 <HAL_GPIO_Init+0x348>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d007      	beq.n	800135a <HAL_GPIO_Init+0x22e>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a4a      	ldr	r2, [pc, #296]	@ (8001478 <HAL_GPIO_Init+0x34c>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d101      	bne.n	8001356 <HAL_GPIO_Init+0x22a>
 8001352:	2306      	movs	r3, #6
 8001354:	e00c      	b.n	8001370 <HAL_GPIO_Init+0x244>
 8001356:	2307      	movs	r3, #7
 8001358:	e00a      	b.n	8001370 <HAL_GPIO_Init+0x244>
 800135a:	2305      	movs	r3, #5
 800135c:	e008      	b.n	8001370 <HAL_GPIO_Init+0x244>
 800135e:	2304      	movs	r3, #4
 8001360:	e006      	b.n	8001370 <HAL_GPIO_Init+0x244>
 8001362:	2303      	movs	r3, #3
 8001364:	e004      	b.n	8001370 <HAL_GPIO_Init+0x244>
 8001366:	2302      	movs	r3, #2
 8001368:	e002      	b.n	8001370 <HAL_GPIO_Init+0x244>
 800136a:	2301      	movs	r3, #1
 800136c:	e000      	b.n	8001370 <HAL_GPIO_Init+0x244>
 800136e:	2300      	movs	r3, #0
 8001370:	697a      	ldr	r2, [r7, #20]
 8001372:	f002 0203 	and.w	r2, r2, #3
 8001376:	0092      	lsls	r2, r2, #2
 8001378:	4093      	lsls	r3, r2
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	4313      	orrs	r3, r2
 800137e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001380:	4937      	ldr	r1, [pc, #220]	@ (8001460 <HAL_GPIO_Init+0x334>)
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	089b      	lsrs	r3, r3, #2
 8001386:	3302      	adds	r3, #2
 8001388:	693a      	ldr	r2, [r7, #16]
 800138a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800138e:	4b3b      	ldr	r3, [pc, #236]	@ (800147c <HAL_GPIO_Init+0x350>)
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	43db      	mvns	r3, r3
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	4013      	ands	r3, r2
 800139c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d003      	beq.n	80013b2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013b2:	4a32      	ldr	r2, [pc, #200]	@ (800147c <HAL_GPIO_Init+0x350>)
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80013b8:	4b30      	ldr	r3, [pc, #192]	@ (800147c <HAL_GPIO_Init+0x350>)
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	43db      	mvns	r3, r3
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	4013      	ands	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d003      	beq.n	80013dc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	4313      	orrs	r3, r2
 80013da:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013dc:	4a27      	ldr	r2, [pc, #156]	@ (800147c <HAL_GPIO_Init+0x350>)
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80013e2:	4b26      	ldr	r3, [pc, #152]	@ (800147c <HAL_GPIO_Init+0x350>)
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	43db      	mvns	r3, r3
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	4013      	ands	r3, r2
 80013f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d003      	beq.n	8001406 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	4313      	orrs	r3, r2
 8001404:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001406:	4a1d      	ldr	r2, [pc, #116]	@ (800147c <HAL_GPIO_Init+0x350>)
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800140c:	4b1b      	ldr	r3, [pc, #108]	@ (800147c <HAL_GPIO_Init+0x350>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	43db      	mvns	r3, r3
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	4013      	ands	r3, r2
 800141a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001424:	2b00      	cmp	r3, #0
 8001426:	d003      	beq.n	8001430 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001428:	693a      	ldr	r2, [r7, #16]
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	4313      	orrs	r3, r2
 800142e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001430:	4a12      	ldr	r2, [pc, #72]	@ (800147c <HAL_GPIO_Init+0x350>)
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	3301      	adds	r3, #1
 800143a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	fa22 f303 	lsr.w	r3, r2, r3
 8001446:	2b00      	cmp	r3, #0
 8001448:	f47f ae78 	bne.w	800113c <HAL_GPIO_Init+0x10>
  }
}
 800144c:	bf00      	nop
 800144e:	bf00      	nop
 8001450:	371c      	adds	r7, #28
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	40021000 	.word	0x40021000
 8001460:	40010000 	.word	0x40010000
 8001464:	48000400 	.word	0x48000400
 8001468:	48000800 	.word	0x48000800
 800146c:	48000c00 	.word	0x48000c00
 8001470:	48001000 	.word	0x48001000
 8001474:	48001400 	.word	0x48001400
 8001478:	48001800 	.word	0x48001800
 800147c:	40010400 	.word	0x40010400

08001480 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001480:	b480      	push	{r7}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	460b      	mov	r3, r1
 800148a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	691a      	ldr	r2, [r3, #16]
 8001490:	887b      	ldrh	r3, [r7, #2]
 8001492:	4013      	ands	r3, r2
 8001494:	2b00      	cmp	r3, #0
 8001496:	d002      	beq.n	800149e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001498:	2301      	movs	r3, #1
 800149a:	73fb      	strb	r3, [r7, #15]
 800149c:	e001      	b.n	80014a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800149e:	2300      	movs	r3, #0
 80014a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80014a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3714      	adds	r7, #20
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	460b      	mov	r3, r1
 80014ba:	807b      	strh	r3, [r7, #2]
 80014bc:	4613      	mov	r3, r2
 80014be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014c0:	787b      	ldrb	r3, [r7, #1]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d003      	beq.n	80014ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014c6:	887a      	ldrh	r2, [r7, #2]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014cc:	e002      	b.n	80014d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014ce:	887a      	ldrh	r2, [r7, #2]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80014ea:	4b08      	ldr	r3, [pc, #32]	@ (800150c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014ec:	695a      	ldr	r2, [r3, #20]
 80014ee:	88fb      	ldrh	r3, [r7, #6]
 80014f0:	4013      	ands	r3, r2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d006      	beq.n	8001504 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014f6:	4a05      	ldr	r2, [pc, #20]	@ (800150c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014f8:	88fb      	ldrh	r3, [r7, #6]
 80014fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014fc:	88fb      	ldrh	r3, [r7, #6]
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff fa66 	bl	80009d0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001504:	bf00      	nop
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	40010400 	.word	0x40010400

08001510 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d101      	bne.n	8001522 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e08d      	b.n	800163e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001528:	b2db      	uxtb	r3, r3
 800152a:	2b00      	cmp	r3, #0
 800152c:	d106      	bne.n	800153c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2200      	movs	r2, #0
 8001532:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f7ff fb34 	bl	8000ba4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2224      	movs	r2, #36	@ 0x24
 8001540:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f022 0201 	bic.w	r2, r2, #1
 8001552:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	685a      	ldr	r2, [r3, #4]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001560:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	689a      	ldr	r2, [r3, #8]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001570:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	68db      	ldr	r3, [r3, #12]
 8001576:	2b01      	cmp	r3, #1
 8001578:	d107      	bne.n	800158a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	689a      	ldr	r2, [r3, #8]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	e006      	b.n	8001598 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	689a      	ldr	r2, [r3, #8]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001596:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	2b02      	cmp	r3, #2
 800159e:	d108      	bne.n	80015b2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	685a      	ldr	r2, [r3, #4]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80015ae:	605a      	str	r2, [r3, #4]
 80015b0:	e007      	b.n	80015c2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	685a      	ldr	r2, [r3, #4]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80015c0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	6812      	ldr	r2, [r2, #0]
 80015cc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80015d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80015d4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	68da      	ldr	r2, [r3, #12]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80015e4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	691a      	ldr	r2, [r3, #16]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	695b      	ldr	r3, [r3, #20]
 80015ee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	699b      	ldr	r3, [r3, #24]
 80015f6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	430a      	orrs	r2, r1
 80015fe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	69d9      	ldr	r1, [r3, #28]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6a1a      	ldr	r2, [r3, #32]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	430a      	orrs	r2, r1
 800160e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f042 0201 	orr.w	r2, r2, #1
 800161e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2200      	movs	r2, #0
 8001624:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2220      	movs	r2, #32
 800162a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2200      	movs	r2, #0
 8001638:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800163c:	2300      	movs	r3, #0
}
 800163e:	4618      	mov	r0, r3
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
	...

08001648 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b088      	sub	sp, #32
 800164c:	af02      	add	r7, sp, #8
 800164e:	60f8      	str	r0, [r7, #12]
 8001650:	607a      	str	r2, [r7, #4]
 8001652:	461a      	mov	r2, r3
 8001654:	460b      	mov	r3, r1
 8001656:	817b      	strh	r3, [r7, #10]
 8001658:	4613      	mov	r3, r2
 800165a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001662:	b2db      	uxtb	r3, r3
 8001664:	2b20      	cmp	r3, #32
 8001666:	f040 80fd 	bne.w	8001864 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001670:	2b01      	cmp	r3, #1
 8001672:	d101      	bne.n	8001678 <HAL_I2C_Master_Transmit+0x30>
 8001674:	2302      	movs	r3, #2
 8001676:	e0f6      	b.n	8001866 <HAL_I2C_Master_Transmit+0x21e>
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2201      	movs	r2, #1
 800167c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001680:	f7ff fc12 	bl	8000ea8 <HAL_GetTick>
 8001684:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	9300      	str	r3, [sp, #0]
 800168a:	2319      	movs	r3, #25
 800168c:	2201      	movs	r2, #1
 800168e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001692:	68f8      	ldr	r0, [r7, #12]
 8001694:	f000 f914 	bl	80018c0 <I2C_WaitOnFlagUntilTimeout>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e0e1      	b.n	8001866 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	2221      	movs	r2, #33	@ 0x21
 80016a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	2210      	movs	r2, #16
 80016ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	2200      	movs	r2, #0
 80016b6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	893a      	ldrh	r2, [r7, #8]
 80016c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	2200      	movs	r2, #0
 80016c8:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	2bff      	cmp	r3, #255	@ 0xff
 80016d2:	d906      	bls.n	80016e2 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	22ff      	movs	r2, #255	@ 0xff
 80016d8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80016da:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80016de:	617b      	str	r3, [r7, #20]
 80016e0:	e007      	b.n	80016f2 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016e6:	b29a      	uxth	r2, r3
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80016ec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80016f0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d024      	beq.n	8001744 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016fe:	781a      	ldrb	r2, [r3, #0]
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800170a:	1c5a      	adds	r2, r3, #1
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001714:	b29b      	uxth	r3, r3
 8001716:	3b01      	subs	r3, #1
 8001718:	b29a      	uxth	r2, r3
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001722:	3b01      	subs	r3, #1
 8001724:	b29a      	uxth	r2, r3
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800172e:	b2db      	uxtb	r3, r3
 8001730:	3301      	adds	r3, #1
 8001732:	b2da      	uxtb	r2, r3
 8001734:	8979      	ldrh	r1, [r7, #10]
 8001736:	4b4e      	ldr	r3, [pc, #312]	@ (8001870 <HAL_I2C_Master_Transmit+0x228>)
 8001738:	9300      	str	r3, [sp, #0]
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	68f8      	ldr	r0, [r7, #12]
 800173e:	f000 fa83 	bl	8001c48 <I2C_TransferConfig>
 8001742:	e066      	b.n	8001812 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001748:	b2da      	uxtb	r2, r3
 800174a:	8979      	ldrh	r1, [r7, #10]
 800174c:	4b48      	ldr	r3, [pc, #288]	@ (8001870 <HAL_I2C_Master_Transmit+0x228>)
 800174e:	9300      	str	r3, [sp, #0]
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	68f8      	ldr	r0, [r7, #12]
 8001754:	f000 fa78 	bl	8001c48 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001758:	e05b      	b.n	8001812 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	6a39      	ldr	r1, [r7, #32]
 800175e:	68f8      	ldr	r0, [r7, #12]
 8001760:	f000 f907 	bl	8001972 <I2C_WaitOnTXISFlagUntilTimeout>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e07b      	b.n	8001866 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001772:	781a      	ldrb	r2, [r3, #0]
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800177e:	1c5a      	adds	r2, r3, #1
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001788:	b29b      	uxth	r3, r3
 800178a:	3b01      	subs	r3, #1
 800178c:	b29a      	uxth	r2, r3
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001796:	3b01      	subs	r3, #1
 8001798:	b29a      	uxth	r2, r3
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d034      	beq.n	8001812 <HAL_I2C_Master_Transmit+0x1ca>
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d130      	bne.n	8001812 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	9300      	str	r3, [sp, #0]
 80017b4:	6a3b      	ldr	r3, [r7, #32]
 80017b6:	2200      	movs	r2, #0
 80017b8:	2180      	movs	r1, #128	@ 0x80
 80017ba:	68f8      	ldr	r0, [r7, #12]
 80017bc:	f000 f880 	bl	80018c0 <I2C_WaitOnFlagUntilTimeout>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e04d      	b.n	8001866 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	2bff      	cmp	r3, #255	@ 0xff
 80017d2:	d90e      	bls.n	80017f2 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	22ff      	movs	r2, #255	@ 0xff
 80017d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017de:	b2da      	uxtb	r2, r3
 80017e0:	8979      	ldrh	r1, [r7, #10]
 80017e2:	2300      	movs	r3, #0
 80017e4:	9300      	str	r3, [sp, #0]
 80017e6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80017ea:	68f8      	ldr	r0, [r7, #12]
 80017ec:	f000 fa2c 	bl	8001c48 <I2C_TransferConfig>
 80017f0:	e00f      	b.n	8001812 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017f6:	b29a      	uxth	r2, r3
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001800:	b2da      	uxtb	r2, r3
 8001802:	8979      	ldrh	r1, [r7, #10]
 8001804:	2300      	movs	r3, #0
 8001806:	9300      	str	r3, [sp, #0]
 8001808:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800180c:	68f8      	ldr	r0, [r7, #12]
 800180e:	f000 fa1b 	bl	8001c48 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001816:	b29b      	uxth	r3, r3
 8001818:	2b00      	cmp	r3, #0
 800181a:	d19e      	bne.n	800175a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800181c:	693a      	ldr	r2, [r7, #16]
 800181e:	6a39      	ldr	r1, [r7, #32]
 8001820:	68f8      	ldr	r0, [r7, #12]
 8001822:	f000 f8ed 	bl	8001a00 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e01a      	b.n	8001866 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2220      	movs	r2, #32
 8001836:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	6859      	ldr	r1, [r3, #4]
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	4b0c      	ldr	r3, [pc, #48]	@ (8001874 <HAL_I2C_Master_Transmit+0x22c>)
 8001844:	400b      	ands	r3, r1
 8001846:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	2220      	movs	r2, #32
 800184c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	2200      	movs	r2, #0
 8001854:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2200      	movs	r2, #0
 800185c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001860:	2300      	movs	r3, #0
 8001862:	e000      	b.n	8001866 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8001864:	2302      	movs	r3, #2
  }
}
 8001866:	4618      	mov	r0, r3
 8001868:	3718      	adds	r7, #24
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	80002000 	.word	0x80002000
 8001874:	fe00e800 	.word	0xfe00e800

08001878 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	699b      	ldr	r3, [r3, #24]
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	2b02      	cmp	r3, #2
 800188c:	d103      	bne.n	8001896 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2200      	movs	r2, #0
 8001894:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	f003 0301 	and.w	r3, r3, #1
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d007      	beq.n	80018b4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	699a      	ldr	r2, [r3, #24]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f042 0201 	orr.w	r2, r2, #1
 80018b2:	619a      	str	r2, [r3, #24]
  }
}
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	603b      	str	r3, [r7, #0]
 80018cc:	4613      	mov	r3, r2
 80018ce:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80018d0:	e03b      	b.n	800194a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80018d2:	69ba      	ldr	r2, [r7, #24]
 80018d4:	6839      	ldr	r1, [r7, #0]
 80018d6:	68f8      	ldr	r0, [r7, #12]
 80018d8:	f000 f8d6 	bl	8001a88 <I2C_IsErrorOccurred>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e041      	b.n	800196a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018ec:	d02d      	beq.n	800194a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018ee:	f7ff fadb 	bl	8000ea8 <HAL_GetTick>
 80018f2:	4602      	mov	r2, r0
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	683a      	ldr	r2, [r7, #0]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d302      	bcc.n	8001904 <I2C_WaitOnFlagUntilTimeout+0x44>
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d122      	bne.n	800194a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	699a      	ldr	r2, [r3, #24]
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	4013      	ands	r3, r2
 800190e:	68ba      	ldr	r2, [r7, #8]
 8001910:	429a      	cmp	r2, r3
 8001912:	bf0c      	ite	eq
 8001914:	2301      	moveq	r3, #1
 8001916:	2300      	movne	r3, #0
 8001918:	b2db      	uxtb	r3, r3
 800191a:	461a      	mov	r2, r3
 800191c:	79fb      	ldrb	r3, [r7, #7]
 800191e:	429a      	cmp	r2, r3
 8001920:	d113      	bne.n	800194a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001926:	f043 0220 	orr.w	r2, r3, #32
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2220      	movs	r2, #32
 8001932:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	2200      	movs	r2, #0
 800193a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	2200      	movs	r2, #0
 8001942:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e00f      	b.n	800196a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	699a      	ldr	r2, [r3, #24]
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	4013      	ands	r3, r2
 8001954:	68ba      	ldr	r2, [r7, #8]
 8001956:	429a      	cmp	r2, r3
 8001958:	bf0c      	ite	eq
 800195a:	2301      	moveq	r3, #1
 800195c:	2300      	movne	r3, #0
 800195e:	b2db      	uxtb	r3, r3
 8001960:	461a      	mov	r2, r3
 8001962:	79fb      	ldrb	r3, [r7, #7]
 8001964:	429a      	cmp	r2, r3
 8001966:	d0b4      	beq.n	80018d2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3710      	adds	r7, #16
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b084      	sub	sp, #16
 8001976:	af00      	add	r7, sp, #0
 8001978:	60f8      	str	r0, [r7, #12]
 800197a:	60b9      	str	r1, [r7, #8]
 800197c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800197e:	e033      	b.n	80019e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	68b9      	ldr	r1, [r7, #8]
 8001984:	68f8      	ldr	r0, [r7, #12]
 8001986:	f000 f87f 	bl	8001a88 <I2C_IsErrorOccurred>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e031      	b.n	80019f8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800199a:	d025      	beq.n	80019e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800199c:	f7ff fa84 	bl	8000ea8 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	68ba      	ldr	r2, [r7, #8]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d302      	bcc.n	80019b2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d11a      	bne.n	80019e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	f003 0302 	and.w	r3, r3, #2
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d013      	beq.n	80019e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019c4:	f043 0220 	orr.w	r2, r3, #32
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2220      	movs	r2, #32
 80019d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2200      	movs	r2, #0
 80019d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2200      	movs	r2, #0
 80019e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e007      	b.n	80019f8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	699b      	ldr	r3, [r3, #24]
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d1c4      	bne.n	8001980 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80019f6:	2300      	movs	r3, #0
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3710      	adds	r7, #16
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	60b9      	str	r1, [r7, #8]
 8001a0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a0c:	e02f      	b.n	8001a6e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	68b9      	ldr	r1, [r7, #8]
 8001a12:	68f8      	ldr	r0, [r7, #12]
 8001a14:	f000 f838 	bl	8001a88 <I2C_IsErrorOccurred>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e02d      	b.n	8001a7e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a22:	f7ff fa41 	bl	8000ea8 <HAL_GetTick>
 8001a26:	4602      	mov	r2, r0
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	68ba      	ldr	r2, [r7, #8]
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d302      	bcc.n	8001a38 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d11a      	bne.n	8001a6e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	699b      	ldr	r3, [r3, #24]
 8001a3e:	f003 0320 	and.w	r3, r3, #32
 8001a42:	2b20      	cmp	r3, #32
 8001a44:	d013      	beq.n	8001a6e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a4a:	f043 0220 	orr.w	r2, r3, #32
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2220      	movs	r2, #32
 8001a56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	2200      	movs	r2, #0
 8001a66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e007      	b.n	8001a7e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	f003 0320 	and.w	r3, r3, #32
 8001a78:	2b20      	cmp	r3, #32
 8001a7a:	d1c8      	bne.n	8001a0e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3710      	adds	r7, #16
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
	...

08001a88 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b08a      	sub	sp, #40	@ 0x28
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a94:	2300      	movs	r3, #0
 8001a96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	f003 0310 	and.w	r3, r3, #16
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d068      	beq.n	8001b86 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2210      	movs	r2, #16
 8001aba:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001abc:	e049      	b.n	8001b52 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ac4:	d045      	beq.n	8001b52 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001ac6:	f7ff f9ef 	bl	8000ea8 <HAL_GetTick>
 8001aca:	4602      	mov	r2, r0
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	68ba      	ldr	r2, [r7, #8]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d302      	bcc.n	8001adc <I2C_IsErrorOccurred+0x54>
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d13a      	bne.n	8001b52 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ae6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001aee:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	699b      	ldr	r3, [r3, #24]
 8001af6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001afa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001afe:	d121      	bne.n	8001b44 <I2C_IsErrorOccurred+0xbc>
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001b06:	d01d      	beq.n	8001b44 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001b08:	7cfb      	ldrb	r3, [r7, #19]
 8001b0a:	2b20      	cmp	r3, #32
 8001b0c:	d01a      	beq.n	8001b44 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	685a      	ldr	r2, [r3, #4]
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001b1c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001b1e:	f7ff f9c3 	bl	8000ea8 <HAL_GetTick>
 8001b22:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b24:	e00e      	b.n	8001b44 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001b26:	f7ff f9bf 	bl	8000ea8 <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	2b19      	cmp	r3, #25
 8001b32:	d907      	bls.n	8001b44 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001b34:	6a3b      	ldr	r3, [r7, #32]
 8001b36:	f043 0320 	orr.w	r3, r3, #32
 8001b3a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8001b42:	e006      	b.n	8001b52 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	699b      	ldr	r3, [r3, #24]
 8001b4a:	f003 0320 	and.w	r3, r3, #32
 8001b4e:	2b20      	cmp	r3, #32
 8001b50:	d1e9      	bne.n	8001b26 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	699b      	ldr	r3, [r3, #24]
 8001b58:	f003 0320 	and.w	r3, r3, #32
 8001b5c:	2b20      	cmp	r3, #32
 8001b5e:	d003      	beq.n	8001b68 <I2C_IsErrorOccurred+0xe0>
 8001b60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d0aa      	beq.n	8001abe <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001b68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d103      	bne.n	8001b78 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2220      	movs	r2, #32
 8001b76:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001b78:	6a3b      	ldr	r3, [r7, #32]
 8001b7a:	f043 0304 	orr.w	r3, r3, #4
 8001b7e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d00b      	beq.n	8001bb0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001b98:	6a3b      	ldr	r3, [r7, #32]
 8001b9a:	f043 0301 	orr.w	r3, r3, #1
 8001b9e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ba8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d00b      	beq.n	8001bd2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001bba:	6a3b      	ldr	r3, [r7, #32]
 8001bbc:	f043 0308 	orr.w	r3, r3, #8
 8001bc0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001bca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d00b      	beq.n	8001bf4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001bdc:	6a3b      	ldr	r3, [r7, #32]
 8001bde:	f043 0302 	orr.w	r3, r3, #2
 8001be2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001bec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8001bf4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d01c      	beq.n	8001c36 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001bfc:	68f8      	ldr	r0, [r7, #12]
 8001bfe:	f7ff fe3b 	bl	8001878 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	6859      	ldr	r1, [r3, #4]
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	4b0d      	ldr	r3, [pc, #52]	@ (8001c44 <I2C_IsErrorOccurred+0x1bc>)
 8001c0e:	400b      	ands	r3, r1
 8001c10:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001c16:	6a3b      	ldr	r3, [r7, #32]
 8001c18:	431a      	orrs	r2, r3
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2220      	movs	r2, #32
 8001c22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8001c36:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3728      	adds	r7, #40	@ 0x28
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	fe00e800 	.word	0xfe00e800

08001c48 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b087      	sub	sp, #28
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	607b      	str	r3, [r7, #4]
 8001c52:	460b      	mov	r3, r1
 8001c54:	817b      	strh	r3, [r7, #10]
 8001c56:	4613      	mov	r3, r2
 8001c58:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001c5a:	897b      	ldrh	r3, [r7, #10]
 8001c5c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001c60:	7a7b      	ldrb	r3, [r7, #9]
 8001c62:	041b      	lsls	r3, r3, #16
 8001c64:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001c68:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001c6e:	6a3b      	ldr	r3, [r7, #32]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001c76:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	685a      	ldr	r2, [r3, #4]
 8001c7e:	6a3b      	ldr	r3, [r7, #32]
 8001c80:	0d5b      	lsrs	r3, r3, #21
 8001c82:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8001c86:	4b08      	ldr	r3, [pc, #32]	@ (8001ca8 <I2C_TransferConfig+0x60>)
 8001c88:	430b      	orrs	r3, r1
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	ea02 0103 	and.w	r1, r2, r3
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	697a      	ldr	r2, [r7, #20]
 8001c96:	430a      	orrs	r2, r1
 8001c98:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001c9a:	bf00      	nop
 8001c9c:	371c      	adds	r7, #28
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	03ff63ff 	.word	0x03ff63ff

08001cac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	2b20      	cmp	r3, #32
 8001cc0:	d138      	bne.n	8001d34 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d101      	bne.n	8001cd0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001ccc:	2302      	movs	r3, #2
 8001cce:	e032      	b.n	8001d36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2224      	movs	r2, #36	@ 0x24
 8001cdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f022 0201 	bic.w	r2, r2, #1
 8001cee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001cfe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	6819      	ldr	r1, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	683a      	ldr	r2, [r7, #0]
 8001d0c:	430a      	orrs	r2, r1
 8001d0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f042 0201 	orr.w	r2, r2, #1
 8001d1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2220      	movs	r2, #32
 8001d24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001d30:	2300      	movs	r3, #0
 8001d32:	e000      	b.n	8001d36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001d34:	2302      	movs	r3, #2
  }
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr

08001d42 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001d42:	b480      	push	{r7}
 8001d44:	b085      	sub	sp, #20
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
 8001d4a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	2b20      	cmp	r3, #32
 8001d56:	d139      	bne.n	8001dcc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d101      	bne.n	8001d66 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001d62:	2302      	movs	r3, #2
 8001d64:	e033      	b.n	8001dce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2201      	movs	r2, #1
 8001d6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2224      	movs	r2, #36	@ 0x24
 8001d72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f022 0201 	bic.w	r2, r2, #1
 8001d84:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001d94:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	021b      	lsls	r3, r3, #8
 8001d9a:	68fa      	ldr	r2, [r7, #12]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	68fa      	ldr	r2, [r7, #12]
 8001da6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f042 0201 	orr.w	r2, r2, #1
 8001db6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2220      	movs	r2, #32
 8001dbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	e000      	b.n	8001dce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001dcc:	2302      	movs	r3, #2
  }
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3714      	adds	r7, #20
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
	...

08001ddc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001de0:	4b04      	ldr	r3, [pc, #16]	@ (8001df4 <HAL_PWREx_GetVoltageRange+0x18>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	40007000 	.word	0x40007000

08001df8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b085      	sub	sp, #20
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e06:	d130      	bne.n	8001e6a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e08:	4b23      	ldr	r3, [pc, #140]	@ (8001e98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001e10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e14:	d038      	beq.n	8001e88 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e16:	4b20      	ldr	r3, [pc, #128]	@ (8001e98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001e1e:	4a1e      	ldr	r2, [pc, #120]	@ (8001e98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e20:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e24:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e26:	4b1d      	ldr	r3, [pc, #116]	@ (8001e9c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2232      	movs	r2, #50	@ 0x32
 8001e2c:	fb02 f303 	mul.w	r3, r2, r3
 8001e30:	4a1b      	ldr	r2, [pc, #108]	@ (8001ea0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001e32:	fba2 2303 	umull	r2, r3, r2, r3
 8001e36:	0c9b      	lsrs	r3, r3, #18
 8001e38:	3301      	adds	r3, #1
 8001e3a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e3c:	e002      	b.n	8001e44 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	3b01      	subs	r3, #1
 8001e42:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e44:	4b14      	ldr	r3, [pc, #80]	@ (8001e98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e46:	695b      	ldr	r3, [r3, #20]
 8001e48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e50:	d102      	bne.n	8001e58 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d1f2      	bne.n	8001e3e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e58:	4b0f      	ldr	r3, [pc, #60]	@ (8001e98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e5a:	695b      	ldr	r3, [r3, #20]
 8001e5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e64:	d110      	bne.n	8001e88 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e00f      	b.n	8001e8a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e6a:	4b0b      	ldr	r3, [pc, #44]	@ (8001e98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001e72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e76:	d007      	beq.n	8001e88 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e78:	4b07      	ldr	r3, [pc, #28]	@ (8001e98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001e80:	4a05      	ldr	r2, [pc, #20]	@ (8001e98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e82:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e86:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3714      	adds	r7, #20
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	40007000 	.word	0x40007000
 8001e9c:	20000004 	.word	0x20000004
 8001ea0:	431bde83 	.word	0x431bde83

08001ea4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b088      	sub	sp, #32
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d101      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e3ca      	b.n	800264c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001eb6:	4b97      	ldr	r3, [pc, #604]	@ (8002114 <HAL_RCC_OscConfig+0x270>)
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	f003 030c 	and.w	r3, r3, #12
 8001ebe:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ec0:	4b94      	ldr	r3, [pc, #592]	@ (8002114 <HAL_RCC_OscConfig+0x270>)
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	f003 0303 	and.w	r3, r3, #3
 8001ec8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0310 	and.w	r3, r3, #16
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	f000 80e4 	beq.w	80020a0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d007      	beq.n	8001eee <HAL_RCC_OscConfig+0x4a>
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	2b0c      	cmp	r3, #12
 8001ee2:	f040 808b 	bne.w	8001ffc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	f040 8087 	bne.w	8001ffc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001eee:	4b89      	ldr	r3, [pc, #548]	@ (8002114 <HAL_RCC_OscConfig+0x270>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d005      	beq.n	8001f06 <HAL_RCC_OscConfig+0x62>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	699b      	ldr	r3, [r3, #24]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d101      	bne.n	8001f06 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e3a2      	b.n	800264c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6a1a      	ldr	r2, [r3, #32]
 8001f0a:	4b82      	ldr	r3, [pc, #520]	@ (8002114 <HAL_RCC_OscConfig+0x270>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0308 	and.w	r3, r3, #8
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d004      	beq.n	8001f20 <HAL_RCC_OscConfig+0x7c>
 8001f16:	4b7f      	ldr	r3, [pc, #508]	@ (8002114 <HAL_RCC_OscConfig+0x270>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f1e:	e005      	b.n	8001f2c <HAL_RCC_OscConfig+0x88>
 8001f20:	4b7c      	ldr	r3, [pc, #496]	@ (8002114 <HAL_RCC_OscConfig+0x270>)
 8001f22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f26:	091b      	lsrs	r3, r3, #4
 8001f28:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d223      	bcs.n	8001f78 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a1b      	ldr	r3, [r3, #32]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f000 fd1d 	bl	8002974 <RCC_SetFlashLatencyFromMSIRange>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e383      	b.n	800264c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f44:	4b73      	ldr	r3, [pc, #460]	@ (8002114 <HAL_RCC_OscConfig+0x270>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a72      	ldr	r2, [pc, #456]	@ (8002114 <HAL_RCC_OscConfig+0x270>)
 8001f4a:	f043 0308 	orr.w	r3, r3, #8
 8001f4e:	6013      	str	r3, [r2, #0]
 8001f50:	4b70      	ldr	r3, [pc, #448]	@ (8002114 <HAL_RCC_OscConfig+0x270>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6a1b      	ldr	r3, [r3, #32]
 8001f5c:	496d      	ldr	r1, [pc, #436]	@ (8002114 <HAL_RCC_OscConfig+0x270>)
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f62:	4b6c      	ldr	r3, [pc, #432]	@ (8002114 <HAL_RCC_OscConfig+0x270>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	69db      	ldr	r3, [r3, #28]
 8001f6e:	021b      	lsls	r3, r3, #8
 8001f70:	4968      	ldr	r1, [pc, #416]	@ (8002114 <HAL_RCC_OscConfig+0x270>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	604b      	str	r3, [r1, #4]
 8001f76:	e025      	b.n	8001fc4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f78:	4b66      	ldr	r3, [pc, #408]	@ (8002114 <HAL_RCC_OscConfig+0x270>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a65      	ldr	r2, [pc, #404]	@ (8002114 <HAL_RCC_OscConfig+0x270>)
 8001f7e:	f043 0308 	orr.w	r3, r3, #8
 8001f82:	6013      	str	r3, [r2, #0]
 8001f84:	4b63      	ldr	r3, [pc, #396]	@ (8002114 <HAL_RCC_OscConfig+0x270>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a1b      	ldr	r3, [r3, #32]
 8001f90:	4960      	ldr	r1, [pc, #384]	@ (8002114 <HAL_RCC_OscConfig+0x270>)
 8001f92:	4313      	orrs	r3, r2
 8001f94:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f96:	4b5f      	ldr	r3, [pc, #380]	@ (8002114 <HAL_RCC_OscConfig+0x270>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	69db      	ldr	r3, [r3, #28]
 8001fa2:	021b      	lsls	r3, r3, #8
 8001fa4:	495b      	ldr	r1, [pc, #364]	@ (8002114 <HAL_RCC_OscConfig+0x270>)
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d109      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a1b      	ldr	r3, [r3, #32]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f000 fcdd 	bl	8002974 <RCC_SetFlashLatencyFromMSIRange>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e343      	b.n	800264c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001fc4:	f000 fc4a 	bl	800285c <HAL_RCC_GetSysClockFreq>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	4b52      	ldr	r3, [pc, #328]	@ (8002114 <HAL_RCC_OscConfig+0x270>)
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	091b      	lsrs	r3, r3, #4
 8001fd0:	f003 030f 	and.w	r3, r3, #15
 8001fd4:	4950      	ldr	r1, [pc, #320]	@ (8002118 <HAL_RCC_OscConfig+0x274>)
 8001fd6:	5ccb      	ldrb	r3, [r1, r3]
 8001fd8:	f003 031f 	and.w	r3, r3, #31
 8001fdc:	fa22 f303 	lsr.w	r3, r2, r3
 8001fe0:	4a4e      	ldr	r2, [pc, #312]	@ (800211c <HAL_RCC_OscConfig+0x278>)
 8001fe2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001fe4:	4b4e      	ldr	r3, [pc, #312]	@ (8002120 <HAL_RCC_OscConfig+0x27c>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7fe ff0d 	bl	8000e08 <HAL_InitTick>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001ff2:	7bfb      	ldrb	r3, [r7, #15]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d052      	beq.n	800209e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001ff8:	7bfb      	ldrb	r3, [r7, #15]
 8001ffa:	e327      	b.n	800264c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	699b      	ldr	r3, [r3, #24]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d032      	beq.n	800206a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002004:	4b43      	ldr	r3, [pc, #268]	@ (8002114 <HAL_RCC_OscConfig+0x270>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a42      	ldr	r2, [pc, #264]	@ (8002114 <HAL_RCC_OscConfig+0x270>)
 800200a:	f043 0301 	orr.w	r3, r3, #1
 800200e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002010:	f7fe ff4a 	bl	8000ea8 <HAL_GetTick>
 8002014:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002016:	e008      	b.n	800202a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002018:	f7fe ff46 	bl	8000ea8 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	2b02      	cmp	r3, #2
 8002024:	d901      	bls.n	800202a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e310      	b.n	800264c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800202a:	4b3a      	ldr	r3, [pc, #232]	@ (8002114 <HAL_RCC_OscConfig+0x270>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0302 	and.w	r3, r3, #2
 8002032:	2b00      	cmp	r3, #0
 8002034:	d0f0      	beq.n	8002018 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002036:	4b37      	ldr	r3, [pc, #220]	@ (8002114 <HAL_RCC_OscConfig+0x270>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a36      	ldr	r2, [pc, #216]	@ (8002114 <HAL_RCC_OscConfig+0x270>)
 800203c:	f043 0308 	orr.w	r3, r3, #8
 8002040:	6013      	str	r3, [r2, #0]
 8002042:	4b34      	ldr	r3, [pc, #208]	@ (8002114 <HAL_RCC_OscConfig+0x270>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a1b      	ldr	r3, [r3, #32]
 800204e:	4931      	ldr	r1, [pc, #196]	@ (8002114 <HAL_RCC_OscConfig+0x270>)
 8002050:	4313      	orrs	r3, r2
 8002052:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002054:	4b2f      	ldr	r3, [pc, #188]	@ (8002114 <HAL_RCC_OscConfig+0x270>)
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	69db      	ldr	r3, [r3, #28]
 8002060:	021b      	lsls	r3, r3, #8
 8002062:	492c      	ldr	r1, [pc, #176]	@ (8002114 <HAL_RCC_OscConfig+0x270>)
 8002064:	4313      	orrs	r3, r2
 8002066:	604b      	str	r3, [r1, #4]
 8002068:	e01a      	b.n	80020a0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800206a:	4b2a      	ldr	r3, [pc, #168]	@ (8002114 <HAL_RCC_OscConfig+0x270>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a29      	ldr	r2, [pc, #164]	@ (8002114 <HAL_RCC_OscConfig+0x270>)
 8002070:	f023 0301 	bic.w	r3, r3, #1
 8002074:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002076:	f7fe ff17 	bl	8000ea8 <HAL_GetTick>
 800207a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800207c:	e008      	b.n	8002090 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800207e:	f7fe ff13 	bl	8000ea8 <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	2b02      	cmp	r3, #2
 800208a:	d901      	bls.n	8002090 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e2dd      	b.n	800264c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002090:	4b20      	ldr	r3, [pc, #128]	@ (8002114 <HAL_RCC_OscConfig+0x270>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0302 	and.w	r3, r3, #2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d1f0      	bne.n	800207e <HAL_RCC_OscConfig+0x1da>
 800209c:	e000      	b.n	80020a0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800209e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0301 	and.w	r3, r3, #1
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d074      	beq.n	8002196 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	2b08      	cmp	r3, #8
 80020b0:	d005      	beq.n	80020be <HAL_RCC_OscConfig+0x21a>
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	2b0c      	cmp	r3, #12
 80020b6:	d10e      	bne.n	80020d6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	2b03      	cmp	r3, #3
 80020bc:	d10b      	bne.n	80020d6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020be:	4b15      	ldr	r3, [pc, #84]	@ (8002114 <HAL_RCC_OscConfig+0x270>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d064      	beq.n	8002194 <HAL_RCC_OscConfig+0x2f0>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d160      	bne.n	8002194 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e2ba      	b.n	800264c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020de:	d106      	bne.n	80020ee <HAL_RCC_OscConfig+0x24a>
 80020e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002114 <HAL_RCC_OscConfig+0x270>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a0b      	ldr	r2, [pc, #44]	@ (8002114 <HAL_RCC_OscConfig+0x270>)
 80020e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020ea:	6013      	str	r3, [r2, #0]
 80020ec:	e026      	b.n	800213c <HAL_RCC_OscConfig+0x298>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80020f6:	d115      	bne.n	8002124 <HAL_RCC_OscConfig+0x280>
 80020f8:	4b06      	ldr	r3, [pc, #24]	@ (8002114 <HAL_RCC_OscConfig+0x270>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a05      	ldr	r2, [pc, #20]	@ (8002114 <HAL_RCC_OscConfig+0x270>)
 80020fe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002102:	6013      	str	r3, [r2, #0]
 8002104:	4b03      	ldr	r3, [pc, #12]	@ (8002114 <HAL_RCC_OscConfig+0x270>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a02      	ldr	r2, [pc, #8]	@ (8002114 <HAL_RCC_OscConfig+0x270>)
 800210a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800210e:	6013      	str	r3, [r2, #0]
 8002110:	e014      	b.n	800213c <HAL_RCC_OscConfig+0x298>
 8002112:	bf00      	nop
 8002114:	40021000 	.word	0x40021000
 8002118:	08003ba8 	.word	0x08003ba8
 800211c:	20000004 	.word	0x20000004
 8002120:	20000008 	.word	0x20000008
 8002124:	4ba0      	ldr	r3, [pc, #640]	@ (80023a8 <HAL_RCC_OscConfig+0x504>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a9f      	ldr	r2, [pc, #636]	@ (80023a8 <HAL_RCC_OscConfig+0x504>)
 800212a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800212e:	6013      	str	r3, [r2, #0]
 8002130:	4b9d      	ldr	r3, [pc, #628]	@ (80023a8 <HAL_RCC_OscConfig+0x504>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a9c      	ldr	r2, [pc, #624]	@ (80023a8 <HAL_RCC_OscConfig+0x504>)
 8002136:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800213a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d013      	beq.n	800216c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002144:	f7fe feb0 	bl	8000ea8 <HAL_GetTick>
 8002148:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800214a:	e008      	b.n	800215e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800214c:	f7fe feac 	bl	8000ea8 <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b64      	cmp	r3, #100	@ 0x64
 8002158:	d901      	bls.n	800215e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e276      	b.n	800264c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800215e:	4b92      	ldr	r3, [pc, #584]	@ (80023a8 <HAL_RCC_OscConfig+0x504>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d0f0      	beq.n	800214c <HAL_RCC_OscConfig+0x2a8>
 800216a:	e014      	b.n	8002196 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800216c:	f7fe fe9c 	bl	8000ea8 <HAL_GetTick>
 8002170:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002172:	e008      	b.n	8002186 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002174:	f7fe fe98 	bl	8000ea8 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b64      	cmp	r3, #100	@ 0x64
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e262      	b.n	800264c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002186:	4b88      	ldr	r3, [pc, #544]	@ (80023a8 <HAL_RCC_OscConfig+0x504>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d1f0      	bne.n	8002174 <HAL_RCC_OscConfig+0x2d0>
 8002192:	e000      	b.n	8002196 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002194:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d060      	beq.n	8002264 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	2b04      	cmp	r3, #4
 80021a6:	d005      	beq.n	80021b4 <HAL_RCC_OscConfig+0x310>
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	2b0c      	cmp	r3, #12
 80021ac:	d119      	bne.n	80021e2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d116      	bne.n	80021e2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021b4:	4b7c      	ldr	r3, [pc, #496]	@ (80023a8 <HAL_RCC_OscConfig+0x504>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d005      	beq.n	80021cc <HAL_RCC_OscConfig+0x328>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d101      	bne.n	80021cc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e23f      	b.n	800264c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021cc:	4b76      	ldr	r3, [pc, #472]	@ (80023a8 <HAL_RCC_OscConfig+0x504>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	691b      	ldr	r3, [r3, #16]
 80021d8:	061b      	lsls	r3, r3, #24
 80021da:	4973      	ldr	r1, [pc, #460]	@ (80023a8 <HAL_RCC_OscConfig+0x504>)
 80021dc:	4313      	orrs	r3, r2
 80021de:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021e0:	e040      	b.n	8002264 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d023      	beq.n	8002232 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021ea:	4b6f      	ldr	r3, [pc, #444]	@ (80023a8 <HAL_RCC_OscConfig+0x504>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a6e      	ldr	r2, [pc, #440]	@ (80023a8 <HAL_RCC_OscConfig+0x504>)
 80021f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f6:	f7fe fe57 	bl	8000ea8 <HAL_GetTick>
 80021fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021fc:	e008      	b.n	8002210 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021fe:	f7fe fe53 	bl	8000ea8 <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	2b02      	cmp	r3, #2
 800220a:	d901      	bls.n	8002210 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e21d      	b.n	800264c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002210:	4b65      	ldr	r3, [pc, #404]	@ (80023a8 <HAL_RCC_OscConfig+0x504>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002218:	2b00      	cmp	r3, #0
 800221a:	d0f0      	beq.n	80021fe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800221c:	4b62      	ldr	r3, [pc, #392]	@ (80023a8 <HAL_RCC_OscConfig+0x504>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	061b      	lsls	r3, r3, #24
 800222a:	495f      	ldr	r1, [pc, #380]	@ (80023a8 <HAL_RCC_OscConfig+0x504>)
 800222c:	4313      	orrs	r3, r2
 800222e:	604b      	str	r3, [r1, #4]
 8002230:	e018      	b.n	8002264 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002232:	4b5d      	ldr	r3, [pc, #372]	@ (80023a8 <HAL_RCC_OscConfig+0x504>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a5c      	ldr	r2, [pc, #368]	@ (80023a8 <HAL_RCC_OscConfig+0x504>)
 8002238:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800223c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800223e:	f7fe fe33 	bl	8000ea8 <HAL_GetTick>
 8002242:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002244:	e008      	b.n	8002258 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002246:	f7fe fe2f 	bl	8000ea8 <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	2b02      	cmp	r3, #2
 8002252:	d901      	bls.n	8002258 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e1f9      	b.n	800264c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002258:	4b53      	ldr	r3, [pc, #332]	@ (80023a8 <HAL_RCC_OscConfig+0x504>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002260:	2b00      	cmp	r3, #0
 8002262:	d1f0      	bne.n	8002246 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0308 	and.w	r3, r3, #8
 800226c:	2b00      	cmp	r3, #0
 800226e:	d03c      	beq.n	80022ea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	695b      	ldr	r3, [r3, #20]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d01c      	beq.n	80022b2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002278:	4b4b      	ldr	r3, [pc, #300]	@ (80023a8 <HAL_RCC_OscConfig+0x504>)
 800227a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800227e:	4a4a      	ldr	r2, [pc, #296]	@ (80023a8 <HAL_RCC_OscConfig+0x504>)
 8002280:	f043 0301 	orr.w	r3, r3, #1
 8002284:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002288:	f7fe fe0e 	bl	8000ea8 <HAL_GetTick>
 800228c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800228e:	e008      	b.n	80022a2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002290:	f7fe fe0a 	bl	8000ea8 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e1d4      	b.n	800264c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022a2:	4b41      	ldr	r3, [pc, #260]	@ (80023a8 <HAL_RCC_OscConfig+0x504>)
 80022a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022a8:	f003 0302 	and.w	r3, r3, #2
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d0ef      	beq.n	8002290 <HAL_RCC_OscConfig+0x3ec>
 80022b0:	e01b      	b.n	80022ea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022b2:	4b3d      	ldr	r3, [pc, #244]	@ (80023a8 <HAL_RCC_OscConfig+0x504>)
 80022b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022b8:	4a3b      	ldr	r2, [pc, #236]	@ (80023a8 <HAL_RCC_OscConfig+0x504>)
 80022ba:	f023 0301 	bic.w	r3, r3, #1
 80022be:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022c2:	f7fe fdf1 	bl	8000ea8 <HAL_GetTick>
 80022c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022c8:	e008      	b.n	80022dc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022ca:	f7fe fded 	bl	8000ea8 <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d901      	bls.n	80022dc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e1b7      	b.n	800264c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022dc:	4b32      	ldr	r3, [pc, #200]	@ (80023a8 <HAL_RCC_OscConfig+0x504>)
 80022de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1ef      	bne.n	80022ca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0304 	and.w	r3, r3, #4
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	f000 80a6 	beq.w	8002444 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022f8:	2300      	movs	r3, #0
 80022fa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80022fc:	4b2a      	ldr	r3, [pc, #168]	@ (80023a8 <HAL_RCC_OscConfig+0x504>)
 80022fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002300:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d10d      	bne.n	8002324 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002308:	4b27      	ldr	r3, [pc, #156]	@ (80023a8 <HAL_RCC_OscConfig+0x504>)
 800230a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800230c:	4a26      	ldr	r2, [pc, #152]	@ (80023a8 <HAL_RCC_OscConfig+0x504>)
 800230e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002312:	6593      	str	r3, [r2, #88]	@ 0x58
 8002314:	4b24      	ldr	r3, [pc, #144]	@ (80023a8 <HAL_RCC_OscConfig+0x504>)
 8002316:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002318:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800231c:	60bb      	str	r3, [r7, #8]
 800231e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002320:	2301      	movs	r3, #1
 8002322:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002324:	4b21      	ldr	r3, [pc, #132]	@ (80023ac <HAL_RCC_OscConfig+0x508>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800232c:	2b00      	cmp	r3, #0
 800232e:	d118      	bne.n	8002362 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002330:	4b1e      	ldr	r3, [pc, #120]	@ (80023ac <HAL_RCC_OscConfig+0x508>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a1d      	ldr	r2, [pc, #116]	@ (80023ac <HAL_RCC_OscConfig+0x508>)
 8002336:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800233a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800233c:	f7fe fdb4 	bl	8000ea8 <HAL_GetTick>
 8002340:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002342:	e008      	b.n	8002356 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002344:	f7fe fdb0 	bl	8000ea8 <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	2b02      	cmp	r3, #2
 8002350:	d901      	bls.n	8002356 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e17a      	b.n	800264c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002356:	4b15      	ldr	r3, [pc, #84]	@ (80023ac <HAL_RCC_OscConfig+0x508>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800235e:	2b00      	cmp	r3, #0
 8002360:	d0f0      	beq.n	8002344 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d108      	bne.n	800237c <HAL_RCC_OscConfig+0x4d8>
 800236a:	4b0f      	ldr	r3, [pc, #60]	@ (80023a8 <HAL_RCC_OscConfig+0x504>)
 800236c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002370:	4a0d      	ldr	r2, [pc, #52]	@ (80023a8 <HAL_RCC_OscConfig+0x504>)
 8002372:	f043 0301 	orr.w	r3, r3, #1
 8002376:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800237a:	e029      	b.n	80023d0 <HAL_RCC_OscConfig+0x52c>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	2b05      	cmp	r3, #5
 8002382:	d115      	bne.n	80023b0 <HAL_RCC_OscConfig+0x50c>
 8002384:	4b08      	ldr	r3, [pc, #32]	@ (80023a8 <HAL_RCC_OscConfig+0x504>)
 8002386:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800238a:	4a07      	ldr	r2, [pc, #28]	@ (80023a8 <HAL_RCC_OscConfig+0x504>)
 800238c:	f043 0304 	orr.w	r3, r3, #4
 8002390:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002394:	4b04      	ldr	r3, [pc, #16]	@ (80023a8 <HAL_RCC_OscConfig+0x504>)
 8002396:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800239a:	4a03      	ldr	r2, [pc, #12]	@ (80023a8 <HAL_RCC_OscConfig+0x504>)
 800239c:	f043 0301 	orr.w	r3, r3, #1
 80023a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80023a4:	e014      	b.n	80023d0 <HAL_RCC_OscConfig+0x52c>
 80023a6:	bf00      	nop
 80023a8:	40021000 	.word	0x40021000
 80023ac:	40007000 	.word	0x40007000
 80023b0:	4b9c      	ldr	r3, [pc, #624]	@ (8002624 <HAL_RCC_OscConfig+0x780>)
 80023b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023b6:	4a9b      	ldr	r2, [pc, #620]	@ (8002624 <HAL_RCC_OscConfig+0x780>)
 80023b8:	f023 0301 	bic.w	r3, r3, #1
 80023bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80023c0:	4b98      	ldr	r3, [pc, #608]	@ (8002624 <HAL_RCC_OscConfig+0x780>)
 80023c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023c6:	4a97      	ldr	r2, [pc, #604]	@ (8002624 <HAL_RCC_OscConfig+0x780>)
 80023c8:	f023 0304 	bic.w	r3, r3, #4
 80023cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d016      	beq.n	8002406 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023d8:	f7fe fd66 	bl	8000ea8 <HAL_GetTick>
 80023dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023de:	e00a      	b.n	80023f6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023e0:	f7fe fd62 	bl	8000ea8 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e12a      	b.n	800264c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023f6:	4b8b      	ldr	r3, [pc, #556]	@ (8002624 <HAL_RCC_OscConfig+0x780>)
 80023f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023fc:	f003 0302 	and.w	r3, r3, #2
 8002400:	2b00      	cmp	r3, #0
 8002402:	d0ed      	beq.n	80023e0 <HAL_RCC_OscConfig+0x53c>
 8002404:	e015      	b.n	8002432 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002406:	f7fe fd4f 	bl	8000ea8 <HAL_GetTick>
 800240a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800240c:	e00a      	b.n	8002424 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800240e:	f7fe fd4b 	bl	8000ea8 <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	f241 3288 	movw	r2, #5000	@ 0x1388
 800241c:	4293      	cmp	r3, r2
 800241e:	d901      	bls.n	8002424 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e113      	b.n	800264c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002424:	4b7f      	ldr	r3, [pc, #508]	@ (8002624 <HAL_RCC_OscConfig+0x780>)
 8002426:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	2b00      	cmp	r3, #0
 8002430:	d1ed      	bne.n	800240e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002432:	7ffb      	ldrb	r3, [r7, #31]
 8002434:	2b01      	cmp	r3, #1
 8002436:	d105      	bne.n	8002444 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002438:	4b7a      	ldr	r3, [pc, #488]	@ (8002624 <HAL_RCC_OscConfig+0x780>)
 800243a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800243c:	4a79      	ldr	r2, [pc, #484]	@ (8002624 <HAL_RCC_OscConfig+0x780>)
 800243e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002442:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002448:	2b00      	cmp	r3, #0
 800244a:	f000 80fe 	beq.w	800264a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002452:	2b02      	cmp	r3, #2
 8002454:	f040 80d0 	bne.w	80025f8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002458:	4b72      	ldr	r3, [pc, #456]	@ (8002624 <HAL_RCC_OscConfig+0x780>)
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	f003 0203 	and.w	r2, r3, #3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002468:	429a      	cmp	r2, r3
 800246a:	d130      	bne.n	80024ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002476:	3b01      	subs	r3, #1
 8002478:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800247a:	429a      	cmp	r2, r3
 800247c:	d127      	bne.n	80024ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002488:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800248a:	429a      	cmp	r2, r3
 800248c:	d11f      	bne.n	80024ce <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002498:	2a07      	cmp	r2, #7
 800249a:	bf14      	ite	ne
 800249c:	2201      	movne	r2, #1
 800249e:	2200      	moveq	r2, #0
 80024a0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d113      	bne.n	80024ce <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024b0:	085b      	lsrs	r3, r3, #1
 80024b2:	3b01      	subs	r3, #1
 80024b4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d109      	bne.n	80024ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c4:	085b      	lsrs	r3, r3, #1
 80024c6:	3b01      	subs	r3, #1
 80024c8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d06e      	beq.n	80025ac <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	2b0c      	cmp	r3, #12
 80024d2:	d069      	beq.n	80025a8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80024d4:	4b53      	ldr	r3, [pc, #332]	@ (8002624 <HAL_RCC_OscConfig+0x780>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d105      	bne.n	80024ec <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80024e0:	4b50      	ldr	r3, [pc, #320]	@ (8002624 <HAL_RCC_OscConfig+0x780>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e0ad      	b.n	800264c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80024f0:	4b4c      	ldr	r3, [pc, #304]	@ (8002624 <HAL_RCC_OscConfig+0x780>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a4b      	ldr	r2, [pc, #300]	@ (8002624 <HAL_RCC_OscConfig+0x780>)
 80024f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80024fa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80024fc:	f7fe fcd4 	bl	8000ea8 <HAL_GetTick>
 8002500:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002502:	e008      	b.n	8002516 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002504:	f7fe fcd0 	bl	8000ea8 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b02      	cmp	r3, #2
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e09a      	b.n	800264c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002516:	4b43      	ldr	r3, [pc, #268]	@ (8002624 <HAL_RCC_OscConfig+0x780>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d1f0      	bne.n	8002504 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002522:	4b40      	ldr	r3, [pc, #256]	@ (8002624 <HAL_RCC_OscConfig+0x780>)
 8002524:	68da      	ldr	r2, [r3, #12]
 8002526:	4b40      	ldr	r3, [pc, #256]	@ (8002628 <HAL_RCC_OscConfig+0x784>)
 8002528:	4013      	ands	r3, r2
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002532:	3a01      	subs	r2, #1
 8002534:	0112      	lsls	r2, r2, #4
 8002536:	4311      	orrs	r1, r2
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800253c:	0212      	lsls	r2, r2, #8
 800253e:	4311      	orrs	r1, r2
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002544:	0852      	lsrs	r2, r2, #1
 8002546:	3a01      	subs	r2, #1
 8002548:	0552      	lsls	r2, r2, #21
 800254a:	4311      	orrs	r1, r2
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002550:	0852      	lsrs	r2, r2, #1
 8002552:	3a01      	subs	r2, #1
 8002554:	0652      	lsls	r2, r2, #25
 8002556:	4311      	orrs	r1, r2
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800255c:	0912      	lsrs	r2, r2, #4
 800255e:	0452      	lsls	r2, r2, #17
 8002560:	430a      	orrs	r2, r1
 8002562:	4930      	ldr	r1, [pc, #192]	@ (8002624 <HAL_RCC_OscConfig+0x780>)
 8002564:	4313      	orrs	r3, r2
 8002566:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002568:	4b2e      	ldr	r3, [pc, #184]	@ (8002624 <HAL_RCC_OscConfig+0x780>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a2d      	ldr	r2, [pc, #180]	@ (8002624 <HAL_RCC_OscConfig+0x780>)
 800256e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002572:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002574:	4b2b      	ldr	r3, [pc, #172]	@ (8002624 <HAL_RCC_OscConfig+0x780>)
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	4a2a      	ldr	r2, [pc, #168]	@ (8002624 <HAL_RCC_OscConfig+0x780>)
 800257a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800257e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002580:	f7fe fc92 	bl	8000ea8 <HAL_GetTick>
 8002584:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002586:	e008      	b.n	800259a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002588:	f7fe fc8e 	bl	8000ea8 <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	2b02      	cmp	r3, #2
 8002594:	d901      	bls.n	800259a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e058      	b.n	800264c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800259a:	4b22      	ldr	r3, [pc, #136]	@ (8002624 <HAL_RCC_OscConfig+0x780>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d0f0      	beq.n	8002588 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025a6:	e050      	b.n	800264a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e04f      	b.n	800264c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025ac:	4b1d      	ldr	r3, [pc, #116]	@ (8002624 <HAL_RCC_OscConfig+0x780>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d148      	bne.n	800264a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80025b8:	4b1a      	ldr	r3, [pc, #104]	@ (8002624 <HAL_RCC_OscConfig+0x780>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a19      	ldr	r2, [pc, #100]	@ (8002624 <HAL_RCC_OscConfig+0x780>)
 80025be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025c2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80025c4:	4b17      	ldr	r3, [pc, #92]	@ (8002624 <HAL_RCC_OscConfig+0x780>)
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	4a16      	ldr	r2, [pc, #88]	@ (8002624 <HAL_RCC_OscConfig+0x780>)
 80025ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025ce:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80025d0:	f7fe fc6a 	bl	8000ea8 <HAL_GetTick>
 80025d4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025d6:	e008      	b.n	80025ea <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025d8:	f7fe fc66 	bl	8000ea8 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e030      	b.n	800264c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025ea:	4b0e      	ldr	r3, [pc, #56]	@ (8002624 <HAL_RCC_OscConfig+0x780>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d0f0      	beq.n	80025d8 <HAL_RCC_OscConfig+0x734>
 80025f6:	e028      	b.n	800264a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	2b0c      	cmp	r3, #12
 80025fc:	d023      	beq.n	8002646 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025fe:	4b09      	ldr	r3, [pc, #36]	@ (8002624 <HAL_RCC_OscConfig+0x780>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a08      	ldr	r2, [pc, #32]	@ (8002624 <HAL_RCC_OscConfig+0x780>)
 8002604:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002608:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800260a:	f7fe fc4d 	bl	8000ea8 <HAL_GetTick>
 800260e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002610:	e00c      	b.n	800262c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002612:	f7fe fc49 	bl	8000ea8 <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	2b02      	cmp	r3, #2
 800261e:	d905      	bls.n	800262c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002620:	2303      	movs	r3, #3
 8002622:	e013      	b.n	800264c <HAL_RCC_OscConfig+0x7a8>
 8002624:	40021000 	.word	0x40021000
 8002628:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800262c:	4b09      	ldr	r3, [pc, #36]	@ (8002654 <HAL_RCC_OscConfig+0x7b0>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1ec      	bne.n	8002612 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002638:	4b06      	ldr	r3, [pc, #24]	@ (8002654 <HAL_RCC_OscConfig+0x7b0>)
 800263a:	68da      	ldr	r2, [r3, #12]
 800263c:	4905      	ldr	r1, [pc, #20]	@ (8002654 <HAL_RCC_OscConfig+0x7b0>)
 800263e:	4b06      	ldr	r3, [pc, #24]	@ (8002658 <HAL_RCC_OscConfig+0x7b4>)
 8002640:	4013      	ands	r3, r2
 8002642:	60cb      	str	r3, [r1, #12]
 8002644:	e001      	b.n	800264a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e000      	b.n	800264c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800264a:	2300      	movs	r3, #0
}
 800264c:	4618      	mov	r0, r3
 800264e:	3720      	adds	r7, #32
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	40021000 	.word	0x40021000
 8002658:	feeefffc 	.word	0xfeeefffc

0800265c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d101      	bne.n	8002670 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e0e7      	b.n	8002840 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002670:	4b75      	ldr	r3, [pc, #468]	@ (8002848 <HAL_RCC_ClockConfig+0x1ec>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0307 	and.w	r3, r3, #7
 8002678:	683a      	ldr	r2, [r7, #0]
 800267a:	429a      	cmp	r2, r3
 800267c:	d910      	bls.n	80026a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800267e:	4b72      	ldr	r3, [pc, #456]	@ (8002848 <HAL_RCC_ClockConfig+0x1ec>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f023 0207 	bic.w	r2, r3, #7
 8002686:	4970      	ldr	r1, [pc, #448]	@ (8002848 <HAL_RCC_ClockConfig+0x1ec>)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	4313      	orrs	r3, r2
 800268c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800268e:	4b6e      	ldr	r3, [pc, #440]	@ (8002848 <HAL_RCC_ClockConfig+0x1ec>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0307 	and.w	r3, r3, #7
 8002696:	683a      	ldr	r2, [r7, #0]
 8002698:	429a      	cmp	r2, r3
 800269a:	d001      	beq.n	80026a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e0cf      	b.n	8002840 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0302 	and.w	r3, r3, #2
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d010      	beq.n	80026ce <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689a      	ldr	r2, [r3, #8]
 80026b0:	4b66      	ldr	r3, [pc, #408]	@ (800284c <HAL_RCC_ClockConfig+0x1f0>)
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d908      	bls.n	80026ce <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026bc:	4b63      	ldr	r3, [pc, #396]	@ (800284c <HAL_RCC_ClockConfig+0x1f0>)
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	4960      	ldr	r1, [pc, #384]	@ (800284c <HAL_RCC_ClockConfig+0x1f0>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d04c      	beq.n	8002774 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	2b03      	cmp	r3, #3
 80026e0:	d107      	bne.n	80026f2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026e2:	4b5a      	ldr	r3, [pc, #360]	@ (800284c <HAL_RCC_ClockConfig+0x1f0>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d121      	bne.n	8002732 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e0a6      	b.n	8002840 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d107      	bne.n	800270a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026fa:	4b54      	ldr	r3, [pc, #336]	@ (800284c <HAL_RCC_ClockConfig+0x1f0>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d115      	bne.n	8002732 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e09a      	b.n	8002840 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d107      	bne.n	8002722 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002712:	4b4e      	ldr	r3, [pc, #312]	@ (800284c <HAL_RCC_ClockConfig+0x1f0>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d109      	bne.n	8002732 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e08e      	b.n	8002840 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002722:	4b4a      	ldr	r3, [pc, #296]	@ (800284c <HAL_RCC_ClockConfig+0x1f0>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800272a:	2b00      	cmp	r3, #0
 800272c:	d101      	bne.n	8002732 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e086      	b.n	8002840 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002732:	4b46      	ldr	r3, [pc, #280]	@ (800284c <HAL_RCC_ClockConfig+0x1f0>)
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f023 0203 	bic.w	r2, r3, #3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	4943      	ldr	r1, [pc, #268]	@ (800284c <HAL_RCC_ClockConfig+0x1f0>)
 8002740:	4313      	orrs	r3, r2
 8002742:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002744:	f7fe fbb0 	bl	8000ea8 <HAL_GetTick>
 8002748:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800274a:	e00a      	b.n	8002762 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800274c:	f7fe fbac 	bl	8000ea8 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	f241 3288 	movw	r2, #5000	@ 0x1388
 800275a:	4293      	cmp	r3, r2
 800275c:	d901      	bls.n	8002762 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e06e      	b.n	8002840 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002762:	4b3a      	ldr	r3, [pc, #232]	@ (800284c <HAL_RCC_ClockConfig+0x1f0>)
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f003 020c 	and.w	r2, r3, #12
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	429a      	cmp	r2, r3
 8002772:	d1eb      	bne.n	800274c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0302 	and.w	r3, r3, #2
 800277c:	2b00      	cmp	r3, #0
 800277e:	d010      	beq.n	80027a2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	689a      	ldr	r2, [r3, #8]
 8002784:	4b31      	ldr	r3, [pc, #196]	@ (800284c <HAL_RCC_ClockConfig+0x1f0>)
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800278c:	429a      	cmp	r2, r3
 800278e:	d208      	bcs.n	80027a2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002790:	4b2e      	ldr	r3, [pc, #184]	@ (800284c <HAL_RCC_ClockConfig+0x1f0>)
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	492b      	ldr	r1, [pc, #172]	@ (800284c <HAL_RCC_ClockConfig+0x1f0>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027a2:	4b29      	ldr	r3, [pc, #164]	@ (8002848 <HAL_RCC_ClockConfig+0x1ec>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0307 	and.w	r3, r3, #7
 80027aa:	683a      	ldr	r2, [r7, #0]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d210      	bcs.n	80027d2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027b0:	4b25      	ldr	r3, [pc, #148]	@ (8002848 <HAL_RCC_ClockConfig+0x1ec>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f023 0207 	bic.w	r2, r3, #7
 80027b8:	4923      	ldr	r1, [pc, #140]	@ (8002848 <HAL_RCC_ClockConfig+0x1ec>)
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	4313      	orrs	r3, r2
 80027be:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027c0:	4b21      	ldr	r3, [pc, #132]	@ (8002848 <HAL_RCC_ClockConfig+0x1ec>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0307 	and.w	r3, r3, #7
 80027c8:	683a      	ldr	r2, [r7, #0]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d001      	beq.n	80027d2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e036      	b.n	8002840 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0304 	and.w	r3, r3, #4
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d008      	beq.n	80027f0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027de:	4b1b      	ldr	r3, [pc, #108]	@ (800284c <HAL_RCC_ClockConfig+0x1f0>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	4918      	ldr	r1, [pc, #96]	@ (800284c <HAL_RCC_ClockConfig+0x1f0>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0308 	and.w	r3, r3, #8
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d009      	beq.n	8002810 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027fc:	4b13      	ldr	r3, [pc, #76]	@ (800284c <HAL_RCC_ClockConfig+0x1f0>)
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	691b      	ldr	r3, [r3, #16]
 8002808:	00db      	lsls	r3, r3, #3
 800280a:	4910      	ldr	r1, [pc, #64]	@ (800284c <HAL_RCC_ClockConfig+0x1f0>)
 800280c:	4313      	orrs	r3, r2
 800280e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002810:	f000 f824 	bl	800285c <HAL_RCC_GetSysClockFreq>
 8002814:	4602      	mov	r2, r0
 8002816:	4b0d      	ldr	r3, [pc, #52]	@ (800284c <HAL_RCC_ClockConfig+0x1f0>)
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	091b      	lsrs	r3, r3, #4
 800281c:	f003 030f 	and.w	r3, r3, #15
 8002820:	490b      	ldr	r1, [pc, #44]	@ (8002850 <HAL_RCC_ClockConfig+0x1f4>)
 8002822:	5ccb      	ldrb	r3, [r1, r3]
 8002824:	f003 031f 	and.w	r3, r3, #31
 8002828:	fa22 f303 	lsr.w	r3, r2, r3
 800282c:	4a09      	ldr	r2, [pc, #36]	@ (8002854 <HAL_RCC_ClockConfig+0x1f8>)
 800282e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002830:	4b09      	ldr	r3, [pc, #36]	@ (8002858 <HAL_RCC_ClockConfig+0x1fc>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4618      	mov	r0, r3
 8002836:	f7fe fae7 	bl	8000e08 <HAL_InitTick>
 800283a:	4603      	mov	r3, r0
 800283c:	72fb      	strb	r3, [r7, #11]

  return status;
 800283e:	7afb      	ldrb	r3, [r7, #11]
}
 8002840:	4618      	mov	r0, r3
 8002842:	3710      	adds	r7, #16
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	40022000 	.word	0x40022000
 800284c:	40021000 	.word	0x40021000
 8002850:	08003ba8 	.word	0x08003ba8
 8002854:	20000004 	.word	0x20000004
 8002858:	20000008 	.word	0x20000008

0800285c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800285c:	b480      	push	{r7}
 800285e:	b089      	sub	sp, #36	@ 0x24
 8002860:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002862:	2300      	movs	r3, #0
 8002864:	61fb      	str	r3, [r7, #28]
 8002866:	2300      	movs	r3, #0
 8002868:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800286a:	4b3e      	ldr	r3, [pc, #248]	@ (8002964 <HAL_RCC_GetSysClockFreq+0x108>)
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f003 030c 	and.w	r3, r3, #12
 8002872:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002874:	4b3b      	ldr	r3, [pc, #236]	@ (8002964 <HAL_RCC_GetSysClockFreq+0x108>)
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	f003 0303 	and.w	r3, r3, #3
 800287c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d005      	beq.n	8002890 <HAL_RCC_GetSysClockFreq+0x34>
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	2b0c      	cmp	r3, #12
 8002888:	d121      	bne.n	80028ce <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2b01      	cmp	r3, #1
 800288e:	d11e      	bne.n	80028ce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002890:	4b34      	ldr	r3, [pc, #208]	@ (8002964 <HAL_RCC_GetSysClockFreq+0x108>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0308 	and.w	r3, r3, #8
 8002898:	2b00      	cmp	r3, #0
 800289a:	d107      	bne.n	80028ac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800289c:	4b31      	ldr	r3, [pc, #196]	@ (8002964 <HAL_RCC_GetSysClockFreq+0x108>)
 800289e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028a2:	0a1b      	lsrs	r3, r3, #8
 80028a4:	f003 030f 	and.w	r3, r3, #15
 80028a8:	61fb      	str	r3, [r7, #28]
 80028aa:	e005      	b.n	80028b8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80028ac:	4b2d      	ldr	r3, [pc, #180]	@ (8002964 <HAL_RCC_GetSysClockFreq+0x108>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	091b      	lsrs	r3, r3, #4
 80028b2:	f003 030f 	and.w	r3, r3, #15
 80028b6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80028b8:	4a2b      	ldr	r2, [pc, #172]	@ (8002968 <HAL_RCC_GetSysClockFreq+0x10c>)
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028c0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d10d      	bne.n	80028e4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028cc:	e00a      	b.n	80028e4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	2b04      	cmp	r3, #4
 80028d2:	d102      	bne.n	80028da <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80028d4:	4b25      	ldr	r3, [pc, #148]	@ (800296c <HAL_RCC_GetSysClockFreq+0x110>)
 80028d6:	61bb      	str	r3, [r7, #24]
 80028d8:	e004      	b.n	80028e4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	2b08      	cmp	r3, #8
 80028de:	d101      	bne.n	80028e4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80028e0:	4b23      	ldr	r3, [pc, #140]	@ (8002970 <HAL_RCC_GetSysClockFreq+0x114>)
 80028e2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	2b0c      	cmp	r3, #12
 80028e8:	d134      	bne.n	8002954 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80028ea:	4b1e      	ldr	r3, [pc, #120]	@ (8002964 <HAL_RCC_GetSysClockFreq+0x108>)
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	f003 0303 	and.w	r3, r3, #3
 80028f2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d003      	beq.n	8002902 <HAL_RCC_GetSysClockFreq+0xa6>
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	2b03      	cmp	r3, #3
 80028fe:	d003      	beq.n	8002908 <HAL_RCC_GetSysClockFreq+0xac>
 8002900:	e005      	b.n	800290e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002902:	4b1a      	ldr	r3, [pc, #104]	@ (800296c <HAL_RCC_GetSysClockFreq+0x110>)
 8002904:	617b      	str	r3, [r7, #20]
      break;
 8002906:	e005      	b.n	8002914 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002908:	4b19      	ldr	r3, [pc, #100]	@ (8002970 <HAL_RCC_GetSysClockFreq+0x114>)
 800290a:	617b      	str	r3, [r7, #20]
      break;
 800290c:	e002      	b.n	8002914 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	617b      	str	r3, [r7, #20]
      break;
 8002912:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002914:	4b13      	ldr	r3, [pc, #76]	@ (8002964 <HAL_RCC_GetSysClockFreq+0x108>)
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	091b      	lsrs	r3, r3, #4
 800291a:	f003 0307 	and.w	r3, r3, #7
 800291e:	3301      	adds	r3, #1
 8002920:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002922:	4b10      	ldr	r3, [pc, #64]	@ (8002964 <HAL_RCC_GetSysClockFreq+0x108>)
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	0a1b      	lsrs	r3, r3, #8
 8002928:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800292c:	697a      	ldr	r2, [r7, #20]
 800292e:	fb03 f202 	mul.w	r2, r3, r2
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	fbb2 f3f3 	udiv	r3, r2, r3
 8002938:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800293a:	4b0a      	ldr	r3, [pc, #40]	@ (8002964 <HAL_RCC_GetSysClockFreq+0x108>)
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	0e5b      	lsrs	r3, r3, #25
 8002940:	f003 0303 	and.w	r3, r3, #3
 8002944:	3301      	adds	r3, #1
 8002946:	005b      	lsls	r3, r3, #1
 8002948:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800294a:	697a      	ldr	r2, [r7, #20]
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002952:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002954:	69bb      	ldr	r3, [r7, #24]
}
 8002956:	4618      	mov	r0, r3
 8002958:	3724      	adds	r7, #36	@ 0x24
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	40021000 	.word	0x40021000
 8002968:	08003bb8 	.word	0x08003bb8
 800296c:	00f42400 	.word	0x00f42400
 8002970:	007a1200 	.word	0x007a1200

08002974 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b086      	sub	sp, #24
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800297c:	2300      	movs	r3, #0
 800297e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002980:	4b2a      	ldr	r3, [pc, #168]	@ (8002a2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002982:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002984:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d003      	beq.n	8002994 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800298c:	f7ff fa26 	bl	8001ddc <HAL_PWREx_GetVoltageRange>
 8002990:	6178      	str	r0, [r7, #20]
 8002992:	e014      	b.n	80029be <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002994:	4b25      	ldr	r3, [pc, #148]	@ (8002a2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002996:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002998:	4a24      	ldr	r2, [pc, #144]	@ (8002a2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800299a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800299e:	6593      	str	r3, [r2, #88]	@ 0x58
 80029a0:	4b22      	ldr	r3, [pc, #136]	@ (8002a2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029a8:	60fb      	str	r3, [r7, #12]
 80029aa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80029ac:	f7ff fa16 	bl	8001ddc <HAL_PWREx_GetVoltageRange>
 80029b0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80029b2:	4b1e      	ldr	r3, [pc, #120]	@ (8002a2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029b6:	4a1d      	ldr	r2, [pc, #116]	@ (8002a2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029bc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80029c4:	d10b      	bne.n	80029de <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2b80      	cmp	r3, #128	@ 0x80
 80029ca:	d919      	bls.n	8002a00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2ba0      	cmp	r3, #160	@ 0xa0
 80029d0:	d902      	bls.n	80029d8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80029d2:	2302      	movs	r3, #2
 80029d4:	613b      	str	r3, [r7, #16]
 80029d6:	e013      	b.n	8002a00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80029d8:	2301      	movs	r3, #1
 80029da:	613b      	str	r3, [r7, #16]
 80029dc:	e010      	b.n	8002a00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2b80      	cmp	r3, #128	@ 0x80
 80029e2:	d902      	bls.n	80029ea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80029e4:	2303      	movs	r3, #3
 80029e6:	613b      	str	r3, [r7, #16]
 80029e8:	e00a      	b.n	8002a00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2b80      	cmp	r3, #128	@ 0x80
 80029ee:	d102      	bne.n	80029f6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80029f0:	2302      	movs	r3, #2
 80029f2:	613b      	str	r3, [r7, #16]
 80029f4:	e004      	b.n	8002a00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2b70      	cmp	r3, #112	@ 0x70
 80029fa:	d101      	bne.n	8002a00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80029fc:	2301      	movs	r3, #1
 80029fe:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002a00:	4b0b      	ldr	r3, [pc, #44]	@ (8002a30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f023 0207 	bic.w	r2, r3, #7
 8002a08:	4909      	ldr	r1, [pc, #36]	@ (8002a30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002a10:	4b07      	ldr	r3, [pc, #28]	@ (8002a30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0307 	and.w	r3, r3, #7
 8002a18:	693a      	ldr	r2, [r7, #16]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d001      	beq.n	8002a22 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e000      	b.n	8002a24 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002a22:	2300      	movs	r3, #0
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3718      	adds	r7, #24
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	40021000 	.word	0x40021000
 8002a30:	40022000 	.word	0x40022000

08002a34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b086      	sub	sp, #24
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a40:	2300      	movs	r3, #0
 8002a42:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d041      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a54:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002a58:	d02a      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002a5a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002a5e:	d824      	bhi.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002a60:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002a64:	d008      	beq.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002a66:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002a6a:	d81e      	bhi.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d00a      	beq.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002a70:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a74:	d010      	beq.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002a76:	e018      	b.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002a78:	4b86      	ldr	r3, [pc, #536]	@ (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	4a85      	ldr	r2, [pc, #532]	@ (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a82:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a84:	e015      	b.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	3304      	adds	r3, #4
 8002a8a:	2100      	movs	r1, #0
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f000 fabb 	bl	8003008 <RCCEx_PLLSAI1_Config>
 8002a92:	4603      	mov	r3, r0
 8002a94:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a96:	e00c      	b.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	3320      	adds	r3, #32
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f000 fba6 	bl	80031f0 <RCCEx_PLLSAI2_Config>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002aa8:	e003      	b.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	74fb      	strb	r3, [r7, #19]
      break;
 8002aae:	e000      	b.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002ab0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ab2:	7cfb      	ldrb	r3, [r7, #19]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d10b      	bne.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ab8:	4b76      	ldr	r3, [pc, #472]	@ (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002abe:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002ac6:	4973      	ldr	r1, [pc, #460]	@ (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002ace:	e001      	b.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ad0:	7cfb      	ldrb	r3, [r7, #19]
 8002ad2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d041      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ae4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002ae8:	d02a      	beq.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002aea:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002aee:	d824      	bhi.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002af0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002af4:	d008      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002af6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002afa:	d81e      	bhi.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d00a      	beq.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002b00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b04:	d010      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002b06:	e018      	b.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002b08:	4b62      	ldr	r3, [pc, #392]	@ (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	4a61      	ldr	r2, [pc, #388]	@ (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b12:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002b14:	e015      	b.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	3304      	adds	r3, #4
 8002b1a:	2100      	movs	r1, #0
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f000 fa73 	bl	8003008 <RCCEx_PLLSAI1_Config>
 8002b22:	4603      	mov	r3, r0
 8002b24:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002b26:	e00c      	b.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	3320      	adds	r3, #32
 8002b2c:	2100      	movs	r1, #0
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f000 fb5e 	bl	80031f0 <RCCEx_PLLSAI2_Config>
 8002b34:	4603      	mov	r3, r0
 8002b36:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002b38:	e003      	b.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	74fb      	strb	r3, [r7, #19]
      break;
 8002b3e:	e000      	b.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002b40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b42:	7cfb      	ldrb	r3, [r7, #19]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d10b      	bne.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b48:	4b52      	ldr	r3, [pc, #328]	@ (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b4e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b56:	494f      	ldr	r1, [pc, #316]	@ (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002b5e:	e001      	b.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b60:	7cfb      	ldrb	r3, [r7, #19]
 8002b62:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	f000 80a0 	beq.w	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b72:	2300      	movs	r3, #0
 8002b74:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002b76:	4b47      	ldr	r3, [pc, #284]	@ (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d101      	bne.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002b82:	2301      	movs	r3, #1
 8002b84:	e000      	b.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002b86:	2300      	movs	r3, #0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d00d      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b8c:	4b41      	ldr	r3, [pc, #260]	@ (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b90:	4a40      	ldr	r2, [pc, #256]	@ (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b96:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b98:	4b3e      	ldr	r3, [pc, #248]	@ (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ba0:	60bb      	str	r3, [r7, #8]
 8002ba2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ba8:	4b3b      	ldr	r3, [pc, #236]	@ (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a3a      	ldr	r2, [pc, #232]	@ (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002bae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bb2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002bb4:	f7fe f978 	bl	8000ea8 <HAL_GetTick>
 8002bb8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002bba:	e009      	b.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bbc:	f7fe f974 	bl	8000ea8 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d902      	bls.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	74fb      	strb	r3, [r7, #19]
        break;
 8002bce:	e005      	b.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002bd0:	4b31      	ldr	r3, [pc, #196]	@ (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d0ef      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002bdc:	7cfb      	ldrb	r3, [r7, #19]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d15c      	bne.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002be2:	4b2c      	ldr	r3, [pc, #176]	@ (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002be8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002bec:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d01f      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002bfa:	697a      	ldr	r2, [r7, #20]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d019      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c00:	4b24      	ldr	r3, [pc, #144]	@ (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c0a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c0c:	4b21      	ldr	r3, [pc, #132]	@ (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c12:	4a20      	ldr	r2, [pc, #128]	@ (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c1c:	4b1d      	ldr	r3, [pc, #116]	@ (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c22:	4a1c      	ldr	r2, [pc, #112]	@ (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002c2c:	4a19      	ldr	r2, [pc, #100]	@ (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d016      	beq.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c3e:	f7fe f933 	bl	8000ea8 <HAL_GetTick>
 8002c42:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c44:	e00b      	b.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c46:	f7fe f92f 	bl	8000ea8 <HAL_GetTick>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d902      	bls.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	74fb      	strb	r3, [r7, #19]
            break;
 8002c5c:	e006      	b.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c5e:	4b0d      	ldr	r3, [pc, #52]	@ (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c64:	f003 0302 	and.w	r3, r3, #2
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d0ec      	beq.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002c6c:	7cfb      	ldrb	r3, [r7, #19]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d10c      	bne.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c72:	4b08      	ldr	r3, [pc, #32]	@ (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c78:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c82:	4904      	ldr	r1, [pc, #16]	@ (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002c8a:	e009      	b.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c8c:	7cfb      	ldrb	r3, [r7, #19]
 8002c8e:	74bb      	strb	r3, [r7, #18]
 8002c90:	e006      	b.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002c92:	bf00      	nop
 8002c94:	40021000 	.word	0x40021000
 8002c98:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c9c:	7cfb      	ldrb	r3, [r7, #19]
 8002c9e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ca0:	7c7b      	ldrb	r3, [r7, #17]
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d105      	bne.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ca6:	4b9e      	ldr	r3, [pc, #632]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ca8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002caa:	4a9d      	ldr	r2, [pc, #628]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002cb0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d00a      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002cbe:	4b98      	ldr	r3, [pc, #608]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cc4:	f023 0203 	bic.w	r2, r3, #3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ccc:	4994      	ldr	r1, [pc, #592]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0302 	and.w	r3, r3, #2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d00a      	beq.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ce0:	4b8f      	ldr	r3, [pc, #572]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ce6:	f023 020c 	bic.w	r2, r3, #12
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cee:	498c      	ldr	r1, [pc, #560]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0304 	and.w	r3, r3, #4
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d00a      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d02:	4b87      	ldr	r3, [pc, #540]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d08:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d10:	4983      	ldr	r1, [pc, #524]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0308 	and.w	r3, r3, #8
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d00a      	beq.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d24:	4b7e      	ldr	r3, [pc, #504]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d2a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d32:	497b      	ldr	r1, [pc, #492]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d34:	4313      	orrs	r3, r2
 8002d36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0310 	and.w	r3, r3, #16
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d00a      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002d46:	4b76      	ldr	r3, [pc, #472]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d4c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d54:	4972      	ldr	r1, [pc, #456]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0320 	and.w	r3, r3, #32
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d00a      	beq.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d68:	4b6d      	ldr	r3, [pc, #436]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d6e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d76:	496a      	ldr	r1, [pc, #424]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d00a      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d8a:	4b65      	ldr	r3, [pc, #404]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d90:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d98:	4961      	ldr	r1, [pc, #388]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d00a      	beq.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002dac:	4b5c      	ldr	r3, [pc, #368]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002db2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dba:	4959      	ldr	r1, [pc, #356]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d00a      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002dce:	4b54      	ldr	r3, [pc, #336]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dd4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ddc:	4950      	ldr	r1, [pc, #320]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d00a      	beq.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002df0:	4b4b      	ldr	r3, [pc, #300]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002df6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dfe:	4948      	ldr	r1, [pc, #288]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00a      	beq.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e12:	4b43      	ldr	r3, [pc, #268]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e18:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e20:	493f      	ldr	r1, [pc, #252]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d028      	beq.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e34:	4b3a      	ldr	r3, [pc, #232]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e3a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e42:	4937      	ldr	r1, [pc, #220]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e4e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002e52:	d106      	bne.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e54:	4b32      	ldr	r3, [pc, #200]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	4a31      	ldr	r2, [pc, #196]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e5e:	60d3      	str	r3, [r2, #12]
 8002e60:	e011      	b.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e66:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002e6a:	d10c      	bne.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	3304      	adds	r3, #4
 8002e70:	2101      	movs	r1, #1
 8002e72:	4618      	mov	r0, r3
 8002e74:	f000 f8c8 	bl	8003008 <RCCEx_PLLSAI1_Config>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002e7c:	7cfb      	ldrb	r3, [r7, #19]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d001      	beq.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002e82:	7cfb      	ldrb	r3, [r7, #19]
 8002e84:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d028      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002e92:	4b23      	ldr	r3, [pc, #140]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e98:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ea0:	491f      	ldr	r1, [pc, #124]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002eb0:	d106      	bne.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002eb2:	4b1b      	ldr	r3, [pc, #108]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	4a1a      	ldr	r2, [pc, #104]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eb8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ebc:	60d3      	str	r3, [r2, #12]
 8002ebe:	e011      	b.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ec4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002ec8:	d10c      	bne.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	3304      	adds	r3, #4
 8002ece:	2101      	movs	r1, #1
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f000 f899 	bl	8003008 <RCCEx_PLLSAI1_Config>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002eda:	7cfb      	ldrb	r3, [r7, #19]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d001      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002ee0:	7cfb      	ldrb	r3, [r7, #19]
 8002ee2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d02b      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ef6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002efe:	4908      	ldr	r1, [pc, #32]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f00:	4313      	orrs	r3, r2
 8002f02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f0a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f0e:	d109      	bne.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f10:	4b03      	ldr	r3, [pc, #12]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	4a02      	ldr	r2, [pc, #8]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f1a:	60d3      	str	r3, [r2, #12]
 8002f1c:	e014      	b.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002f1e:	bf00      	nop
 8002f20:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f28:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002f2c:	d10c      	bne.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	3304      	adds	r3, #4
 8002f32:	2101      	movs	r1, #1
 8002f34:	4618      	mov	r0, r3
 8002f36:	f000 f867 	bl	8003008 <RCCEx_PLLSAI1_Config>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f3e:	7cfb      	ldrb	r3, [r7, #19]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d001      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002f44:	7cfb      	ldrb	r3, [r7, #19]
 8002f46:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d02f      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f54:	4b2b      	ldr	r3, [pc, #172]	@ (8003004 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f5a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002f62:	4928      	ldr	r1, [pc, #160]	@ (8003004 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002f6e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002f72:	d10d      	bne.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	3304      	adds	r3, #4
 8002f78:	2102      	movs	r1, #2
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f000 f844 	bl	8003008 <RCCEx_PLLSAI1_Config>
 8002f80:	4603      	mov	r3, r0
 8002f82:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f84:	7cfb      	ldrb	r3, [r7, #19]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d014      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002f8a:	7cfb      	ldrb	r3, [r7, #19]
 8002f8c:	74bb      	strb	r3, [r7, #18]
 8002f8e:	e011      	b.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002f94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f98:	d10c      	bne.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	3320      	adds	r3, #32
 8002f9e:	2102      	movs	r1, #2
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f000 f925 	bl	80031f0 <RCCEx_PLLSAI2_Config>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002faa:	7cfb      	ldrb	r3, [r7, #19]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d001      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002fb0:	7cfb      	ldrb	r3, [r7, #19]
 8002fb2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d00a      	beq.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002fc0:	4b10      	ldr	r3, [pc, #64]	@ (8003004 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fc6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002fce:	490d      	ldr	r1, [pc, #52]	@ (8003004 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d00b      	beq.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002fe2:	4b08      	ldr	r3, [pc, #32]	@ (8003004 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fe8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ff2:	4904      	ldr	r1, [pc, #16]	@ (8003004 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002ffa:	7cbb      	ldrb	r3, [r7, #18]
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3718      	adds	r7, #24
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	40021000 	.word	0x40021000

08003008 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003012:	2300      	movs	r3, #0
 8003014:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003016:	4b75      	ldr	r3, [pc, #468]	@ (80031ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	f003 0303 	and.w	r3, r3, #3
 800301e:	2b00      	cmp	r3, #0
 8003020:	d018      	beq.n	8003054 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003022:	4b72      	ldr	r3, [pc, #456]	@ (80031ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	f003 0203 	and.w	r2, r3, #3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	429a      	cmp	r2, r3
 8003030:	d10d      	bne.n	800304e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
       ||
 8003036:	2b00      	cmp	r3, #0
 8003038:	d009      	beq.n	800304e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800303a:	4b6c      	ldr	r3, [pc, #432]	@ (80031ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	091b      	lsrs	r3, r3, #4
 8003040:	f003 0307 	and.w	r3, r3, #7
 8003044:	1c5a      	adds	r2, r3, #1
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
       ||
 800304a:	429a      	cmp	r2, r3
 800304c:	d047      	beq.n	80030de <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	73fb      	strb	r3, [r7, #15]
 8003052:	e044      	b.n	80030de <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2b03      	cmp	r3, #3
 800305a:	d018      	beq.n	800308e <RCCEx_PLLSAI1_Config+0x86>
 800305c:	2b03      	cmp	r3, #3
 800305e:	d825      	bhi.n	80030ac <RCCEx_PLLSAI1_Config+0xa4>
 8003060:	2b01      	cmp	r3, #1
 8003062:	d002      	beq.n	800306a <RCCEx_PLLSAI1_Config+0x62>
 8003064:	2b02      	cmp	r3, #2
 8003066:	d009      	beq.n	800307c <RCCEx_PLLSAI1_Config+0x74>
 8003068:	e020      	b.n	80030ac <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800306a:	4b60      	ldr	r3, [pc, #384]	@ (80031ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	2b00      	cmp	r3, #0
 8003074:	d11d      	bne.n	80030b2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800307a:	e01a      	b.n	80030b2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800307c:	4b5b      	ldr	r3, [pc, #364]	@ (80031ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003084:	2b00      	cmp	r3, #0
 8003086:	d116      	bne.n	80030b6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800308c:	e013      	b.n	80030b6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800308e:	4b57      	ldr	r3, [pc, #348]	@ (80031ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d10f      	bne.n	80030ba <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800309a:	4b54      	ldr	r3, [pc, #336]	@ (80031ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d109      	bne.n	80030ba <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80030aa:	e006      	b.n	80030ba <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	73fb      	strb	r3, [r7, #15]
      break;
 80030b0:	e004      	b.n	80030bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80030b2:	bf00      	nop
 80030b4:	e002      	b.n	80030bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80030b6:	bf00      	nop
 80030b8:	e000      	b.n	80030bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80030ba:	bf00      	nop
    }

    if(status == HAL_OK)
 80030bc:	7bfb      	ldrb	r3, [r7, #15]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d10d      	bne.n	80030de <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80030c2:	4b4a      	ldr	r3, [pc, #296]	@ (80031ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6819      	ldr	r1, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	3b01      	subs	r3, #1
 80030d4:	011b      	lsls	r3, r3, #4
 80030d6:	430b      	orrs	r3, r1
 80030d8:	4944      	ldr	r1, [pc, #272]	@ (80031ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80030de:	7bfb      	ldrb	r3, [r7, #15]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d17d      	bne.n	80031e0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80030e4:	4b41      	ldr	r3, [pc, #260]	@ (80031ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a40      	ldr	r2, [pc, #256]	@ (80031ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80030ea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80030ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030f0:	f7fd feda 	bl	8000ea8 <HAL_GetTick>
 80030f4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80030f6:	e009      	b.n	800310c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80030f8:	f7fd fed6 	bl	8000ea8 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b02      	cmp	r3, #2
 8003104:	d902      	bls.n	800310c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	73fb      	strb	r3, [r7, #15]
        break;
 800310a:	e005      	b.n	8003118 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800310c:	4b37      	ldr	r3, [pc, #220]	@ (80031ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d1ef      	bne.n	80030f8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003118:	7bfb      	ldrb	r3, [r7, #15]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d160      	bne.n	80031e0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d111      	bne.n	8003148 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003124:	4b31      	ldr	r3, [pc, #196]	@ (80031ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003126:	691b      	ldr	r3, [r3, #16]
 8003128:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800312c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	6892      	ldr	r2, [r2, #8]
 8003134:	0211      	lsls	r1, r2, #8
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	68d2      	ldr	r2, [r2, #12]
 800313a:	0912      	lsrs	r2, r2, #4
 800313c:	0452      	lsls	r2, r2, #17
 800313e:	430a      	orrs	r2, r1
 8003140:	492a      	ldr	r1, [pc, #168]	@ (80031ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003142:	4313      	orrs	r3, r2
 8003144:	610b      	str	r3, [r1, #16]
 8003146:	e027      	b.n	8003198 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	2b01      	cmp	r3, #1
 800314c:	d112      	bne.n	8003174 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800314e:	4b27      	ldr	r3, [pc, #156]	@ (80031ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003156:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	6892      	ldr	r2, [r2, #8]
 800315e:	0211      	lsls	r1, r2, #8
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	6912      	ldr	r2, [r2, #16]
 8003164:	0852      	lsrs	r2, r2, #1
 8003166:	3a01      	subs	r2, #1
 8003168:	0552      	lsls	r2, r2, #21
 800316a:	430a      	orrs	r2, r1
 800316c:	491f      	ldr	r1, [pc, #124]	@ (80031ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800316e:	4313      	orrs	r3, r2
 8003170:	610b      	str	r3, [r1, #16]
 8003172:	e011      	b.n	8003198 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003174:	4b1d      	ldr	r3, [pc, #116]	@ (80031ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003176:	691b      	ldr	r3, [r3, #16]
 8003178:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800317c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	6892      	ldr	r2, [r2, #8]
 8003184:	0211      	lsls	r1, r2, #8
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	6952      	ldr	r2, [r2, #20]
 800318a:	0852      	lsrs	r2, r2, #1
 800318c:	3a01      	subs	r2, #1
 800318e:	0652      	lsls	r2, r2, #25
 8003190:	430a      	orrs	r2, r1
 8003192:	4916      	ldr	r1, [pc, #88]	@ (80031ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003194:	4313      	orrs	r3, r2
 8003196:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003198:	4b14      	ldr	r3, [pc, #80]	@ (80031ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a13      	ldr	r2, [pc, #76]	@ (80031ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800319e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80031a2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031a4:	f7fd fe80 	bl	8000ea8 <HAL_GetTick>
 80031a8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80031aa:	e009      	b.n	80031c0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031ac:	f7fd fe7c 	bl	8000ea8 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d902      	bls.n	80031c0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	73fb      	strb	r3, [r7, #15]
          break;
 80031be:	e005      	b.n	80031cc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80031c0:	4b0a      	ldr	r3, [pc, #40]	@ (80031ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d0ef      	beq.n	80031ac <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80031cc:	7bfb      	ldrb	r3, [r7, #15]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d106      	bne.n	80031e0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80031d2:	4b06      	ldr	r3, [pc, #24]	@ (80031ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80031d4:	691a      	ldr	r2, [r3, #16]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	699b      	ldr	r3, [r3, #24]
 80031da:	4904      	ldr	r1, [pc, #16]	@ (80031ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80031e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3710      	adds	r7, #16
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	40021000 	.word	0x40021000

080031f0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80031fa:	2300      	movs	r3, #0
 80031fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80031fe:	4b6a      	ldr	r3, [pc, #424]	@ (80033a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	f003 0303 	and.w	r3, r3, #3
 8003206:	2b00      	cmp	r3, #0
 8003208:	d018      	beq.n	800323c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800320a:	4b67      	ldr	r3, [pc, #412]	@ (80033a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	f003 0203 	and.w	r2, r3, #3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	429a      	cmp	r2, r3
 8003218:	d10d      	bne.n	8003236 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
       ||
 800321e:	2b00      	cmp	r3, #0
 8003220:	d009      	beq.n	8003236 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003222:	4b61      	ldr	r3, [pc, #388]	@ (80033a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	091b      	lsrs	r3, r3, #4
 8003228:	f003 0307 	and.w	r3, r3, #7
 800322c:	1c5a      	adds	r2, r3, #1
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
       ||
 8003232:	429a      	cmp	r2, r3
 8003234:	d047      	beq.n	80032c6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	73fb      	strb	r3, [r7, #15]
 800323a:	e044      	b.n	80032c6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2b03      	cmp	r3, #3
 8003242:	d018      	beq.n	8003276 <RCCEx_PLLSAI2_Config+0x86>
 8003244:	2b03      	cmp	r3, #3
 8003246:	d825      	bhi.n	8003294 <RCCEx_PLLSAI2_Config+0xa4>
 8003248:	2b01      	cmp	r3, #1
 800324a:	d002      	beq.n	8003252 <RCCEx_PLLSAI2_Config+0x62>
 800324c:	2b02      	cmp	r3, #2
 800324e:	d009      	beq.n	8003264 <RCCEx_PLLSAI2_Config+0x74>
 8003250:	e020      	b.n	8003294 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003252:	4b55      	ldr	r3, [pc, #340]	@ (80033a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d11d      	bne.n	800329a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003262:	e01a      	b.n	800329a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003264:	4b50      	ldr	r3, [pc, #320]	@ (80033a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800326c:	2b00      	cmp	r3, #0
 800326e:	d116      	bne.n	800329e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003274:	e013      	b.n	800329e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003276:	4b4c      	ldr	r3, [pc, #304]	@ (80033a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d10f      	bne.n	80032a2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003282:	4b49      	ldr	r3, [pc, #292]	@ (80033a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d109      	bne.n	80032a2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003292:	e006      	b.n	80032a2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	73fb      	strb	r3, [r7, #15]
      break;
 8003298:	e004      	b.n	80032a4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800329a:	bf00      	nop
 800329c:	e002      	b.n	80032a4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800329e:	bf00      	nop
 80032a0:	e000      	b.n	80032a4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80032a2:	bf00      	nop
    }

    if(status == HAL_OK)
 80032a4:	7bfb      	ldrb	r3, [r7, #15]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d10d      	bne.n	80032c6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80032aa:	4b3f      	ldr	r3, [pc, #252]	@ (80033a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6819      	ldr	r1, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	3b01      	subs	r3, #1
 80032bc:	011b      	lsls	r3, r3, #4
 80032be:	430b      	orrs	r3, r1
 80032c0:	4939      	ldr	r1, [pc, #228]	@ (80033a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80032c6:	7bfb      	ldrb	r3, [r7, #15]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d167      	bne.n	800339c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80032cc:	4b36      	ldr	r3, [pc, #216]	@ (80033a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a35      	ldr	r2, [pc, #212]	@ (80033a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032d8:	f7fd fde6 	bl	8000ea8 <HAL_GetTick>
 80032dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80032de:	e009      	b.n	80032f4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80032e0:	f7fd fde2 	bl	8000ea8 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d902      	bls.n	80032f4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	73fb      	strb	r3, [r7, #15]
        break;
 80032f2:	e005      	b.n	8003300 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80032f4:	4b2c      	ldr	r3, [pc, #176]	@ (80033a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d1ef      	bne.n	80032e0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003300:	7bfb      	ldrb	r3, [r7, #15]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d14a      	bne.n	800339c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d111      	bne.n	8003330 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800330c:	4b26      	ldr	r3, [pc, #152]	@ (80033a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800330e:	695b      	ldr	r3, [r3, #20]
 8003310:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003314:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	6892      	ldr	r2, [r2, #8]
 800331c:	0211      	lsls	r1, r2, #8
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	68d2      	ldr	r2, [r2, #12]
 8003322:	0912      	lsrs	r2, r2, #4
 8003324:	0452      	lsls	r2, r2, #17
 8003326:	430a      	orrs	r2, r1
 8003328:	491f      	ldr	r1, [pc, #124]	@ (80033a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800332a:	4313      	orrs	r3, r2
 800332c:	614b      	str	r3, [r1, #20]
 800332e:	e011      	b.n	8003354 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003330:	4b1d      	ldr	r3, [pc, #116]	@ (80033a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003332:	695b      	ldr	r3, [r3, #20]
 8003334:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003338:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	6892      	ldr	r2, [r2, #8]
 8003340:	0211      	lsls	r1, r2, #8
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	6912      	ldr	r2, [r2, #16]
 8003346:	0852      	lsrs	r2, r2, #1
 8003348:	3a01      	subs	r2, #1
 800334a:	0652      	lsls	r2, r2, #25
 800334c:	430a      	orrs	r2, r1
 800334e:	4916      	ldr	r1, [pc, #88]	@ (80033a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003350:	4313      	orrs	r3, r2
 8003352:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003354:	4b14      	ldr	r3, [pc, #80]	@ (80033a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a13      	ldr	r2, [pc, #76]	@ (80033a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800335a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800335e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003360:	f7fd fda2 	bl	8000ea8 <HAL_GetTick>
 8003364:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003366:	e009      	b.n	800337c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003368:	f7fd fd9e 	bl	8000ea8 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b02      	cmp	r3, #2
 8003374:	d902      	bls.n	800337c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	73fb      	strb	r3, [r7, #15]
          break;
 800337a:	e005      	b.n	8003388 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800337c:	4b0a      	ldr	r3, [pc, #40]	@ (80033a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d0ef      	beq.n	8003368 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003388:	7bfb      	ldrb	r3, [r7, #15]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d106      	bne.n	800339c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800338e:	4b06      	ldr	r3, [pc, #24]	@ (80033a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003390:	695a      	ldr	r2, [r3, #20]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	695b      	ldr	r3, [r3, #20]
 8003396:	4904      	ldr	r1, [pc, #16]	@ (80033a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003398:	4313      	orrs	r3, r2
 800339a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800339c:	7bfb      	ldrb	r3, [r7, #15]
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3710      	adds	r7, #16
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	40021000 	.word	0x40021000

080033ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d101      	bne.n	80033be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e095      	b.n	80034ea <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d108      	bne.n	80033d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80033ce:	d009      	beq.n	80033e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	61da      	str	r2, [r3, #28]
 80033d6:	e005      	b.n	80033e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d106      	bne.n	8003404 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f7fd fc2e 	bl	8000c60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2202      	movs	r2, #2
 8003408:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800341a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003424:	d902      	bls.n	800342c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003426:	2300      	movs	r3, #0
 8003428:	60fb      	str	r3, [r7, #12]
 800342a:	e002      	b.n	8003432 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800342c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003430:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800343a:	d007      	beq.n	800344c <HAL_SPI_Init+0xa0>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003444:	d002      	beq.n	800344c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800345c:	431a      	orrs	r2, r3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	691b      	ldr	r3, [r3, #16]
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	431a      	orrs	r2, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	695b      	ldr	r3, [r3, #20]
 800346c:	f003 0301 	and.w	r3, r3, #1
 8003470:	431a      	orrs	r2, r3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	699b      	ldr	r3, [r3, #24]
 8003476:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800347a:	431a      	orrs	r2, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	69db      	ldr	r3, [r3, #28]
 8003480:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003484:	431a      	orrs	r2, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a1b      	ldr	r3, [r3, #32]
 800348a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800348e:	ea42 0103 	orr.w	r1, r2, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003496:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	430a      	orrs	r2, r1
 80034a0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	699b      	ldr	r3, [r3, #24]
 80034a6:	0c1b      	lsrs	r3, r3, #16
 80034a8:	f003 0204 	and.w	r2, r3, #4
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b0:	f003 0310 	and.w	r3, r3, #16
 80034b4:	431a      	orrs	r2, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034ba:	f003 0308 	and.w	r3, r3, #8
 80034be:	431a      	orrs	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80034c8:	ea42 0103 	orr.w	r1, r2, r3
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	430a      	orrs	r2, r1
 80034d8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3710      	adds	r7, #16
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b088      	sub	sp, #32
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	60f8      	str	r0, [r7, #12]
 80034fa:	60b9      	str	r1, [r7, #8]
 80034fc:	603b      	str	r3, [r7, #0]
 80034fe:	4613      	mov	r3, r2
 8003500:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003502:	f7fd fcd1 	bl	8000ea8 <HAL_GetTick>
 8003506:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003508:	88fb      	ldrh	r3, [r7, #6]
 800350a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003512:	b2db      	uxtb	r3, r3
 8003514:	2b01      	cmp	r3, #1
 8003516:	d001      	beq.n	800351c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003518:	2302      	movs	r3, #2
 800351a:	e15c      	b.n	80037d6 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d002      	beq.n	8003528 <HAL_SPI_Transmit+0x36>
 8003522:	88fb      	ldrh	r3, [r7, #6]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d101      	bne.n	800352c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e154      	b.n	80037d6 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003532:	2b01      	cmp	r3, #1
 8003534:	d101      	bne.n	800353a <HAL_SPI_Transmit+0x48>
 8003536:	2302      	movs	r3, #2
 8003538:	e14d      	b.n	80037d6 <HAL_SPI_Transmit+0x2e4>
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2201      	movs	r2, #1
 800353e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2203      	movs	r2, #3
 8003546:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2200      	movs	r2, #0
 800354e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	68ba      	ldr	r2, [r7, #8]
 8003554:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	88fa      	ldrh	r2, [r7, #6]
 800355a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	88fa      	ldrh	r2, [r7, #6]
 8003560:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2200      	movs	r2, #0
 8003582:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800358c:	d10f      	bne.n	80035ae <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800359c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80035ac:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035b8:	2b40      	cmp	r3, #64	@ 0x40
 80035ba:	d007      	beq.n	80035cc <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80035ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80035d4:	d952      	bls.n	800367c <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d002      	beq.n	80035e4 <HAL_SPI_Transmit+0xf2>
 80035de:	8b7b      	ldrh	r3, [r7, #26]
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d145      	bne.n	8003670 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035e8:	881a      	ldrh	r2, [r3, #0]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035f4:	1c9a      	adds	r2, r3, #2
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035fe:	b29b      	uxth	r3, r3
 8003600:	3b01      	subs	r3, #1
 8003602:	b29a      	uxth	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003608:	e032      	b.n	8003670 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f003 0302 	and.w	r3, r3, #2
 8003614:	2b02      	cmp	r3, #2
 8003616:	d112      	bne.n	800363e <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800361c:	881a      	ldrh	r2, [r3, #0]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003628:	1c9a      	adds	r2, r3, #2
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003632:	b29b      	uxth	r3, r3
 8003634:	3b01      	subs	r3, #1
 8003636:	b29a      	uxth	r2, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800363c:	e018      	b.n	8003670 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800363e:	f7fd fc33 	bl	8000ea8 <HAL_GetTick>
 8003642:	4602      	mov	r2, r0
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	683a      	ldr	r2, [r7, #0]
 800364a:	429a      	cmp	r2, r3
 800364c:	d803      	bhi.n	8003656 <HAL_SPI_Transmit+0x164>
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003654:	d102      	bne.n	800365c <HAL_SPI_Transmit+0x16a>
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d109      	bne.n	8003670 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2200      	movs	r2, #0
 8003668:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e0b2      	b.n	80037d6 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003674:	b29b      	uxth	r3, r3
 8003676:	2b00      	cmp	r3, #0
 8003678:	d1c7      	bne.n	800360a <HAL_SPI_Transmit+0x118>
 800367a:	e083      	b.n	8003784 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d002      	beq.n	800368a <HAL_SPI_Transmit+0x198>
 8003684:	8b7b      	ldrh	r3, [r7, #26]
 8003686:	2b01      	cmp	r3, #1
 8003688:	d177      	bne.n	800377a <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800368e:	b29b      	uxth	r3, r3
 8003690:	2b01      	cmp	r3, #1
 8003692:	d912      	bls.n	80036ba <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003698:	881a      	ldrh	r2, [r3, #0]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036a4:	1c9a      	adds	r2, r3, #2
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	3b02      	subs	r3, #2
 80036b2:	b29a      	uxth	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80036b8:	e05f      	b.n	800377a <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	330c      	adds	r3, #12
 80036c4:	7812      	ldrb	r2, [r2, #0]
 80036c6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036cc:	1c5a      	adds	r2, r3, #1
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	3b01      	subs	r3, #1
 80036da:	b29a      	uxth	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80036e0:	e04b      	b.n	800377a <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	f003 0302 	and.w	r3, r3, #2
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d12b      	bne.n	8003748 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d912      	bls.n	8003720 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036fe:	881a      	ldrh	r2, [r3, #0]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800370a:	1c9a      	adds	r2, r3, #2
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003714:	b29b      	uxth	r3, r3
 8003716:	3b02      	subs	r3, #2
 8003718:	b29a      	uxth	r2, r3
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800371e:	e02c      	b.n	800377a <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	330c      	adds	r3, #12
 800372a:	7812      	ldrb	r2, [r2, #0]
 800372c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003732:	1c5a      	adds	r2, r3, #1
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800373c:	b29b      	uxth	r3, r3
 800373e:	3b01      	subs	r3, #1
 8003740:	b29a      	uxth	r2, r3
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003746:	e018      	b.n	800377a <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003748:	f7fd fbae 	bl	8000ea8 <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	683a      	ldr	r2, [r7, #0]
 8003754:	429a      	cmp	r2, r3
 8003756:	d803      	bhi.n	8003760 <HAL_SPI_Transmit+0x26e>
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800375e:	d102      	bne.n	8003766 <HAL_SPI_Transmit+0x274>
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d109      	bne.n	800377a <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2201      	movs	r2, #1
 800376a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e02d      	b.n	80037d6 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800377e:	b29b      	uxth	r3, r3
 8003780:	2b00      	cmp	r3, #0
 8003782:	d1ae      	bne.n	80036e2 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003784:	69fa      	ldr	r2, [r7, #28]
 8003786:	6839      	ldr	r1, [r7, #0]
 8003788:	68f8      	ldr	r0, [r7, #12]
 800378a:	f000 f947 	bl	8003a1c <SPI_EndRxTxTransaction>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d002      	beq.n	800379a <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2220      	movs	r2, #32
 8003798:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d10a      	bne.n	80037b8 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80037a2:	2300      	movs	r3, #0
 80037a4:	617b      	str	r3, [r7, #20]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	617b      	str	r3, [r7, #20]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	617b      	str	r3, [r7, #20]
 80037b6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d001      	beq.n	80037d4 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e000      	b.n	80037d6 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 80037d4:	2300      	movs	r3, #0
  }
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3720      	adds	r7, #32
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
	...

080037e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b088      	sub	sp, #32
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	60b9      	str	r1, [r7, #8]
 80037ea:	603b      	str	r3, [r7, #0]
 80037ec:	4613      	mov	r3, r2
 80037ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80037f0:	f7fd fb5a 	bl	8000ea8 <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037f8:	1a9b      	subs	r3, r3, r2
 80037fa:	683a      	ldr	r2, [r7, #0]
 80037fc:	4413      	add	r3, r2
 80037fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003800:	f7fd fb52 	bl	8000ea8 <HAL_GetTick>
 8003804:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003806:	4b39      	ldr	r3, [pc, #228]	@ (80038ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	015b      	lsls	r3, r3, #5
 800380c:	0d1b      	lsrs	r3, r3, #20
 800380e:	69fa      	ldr	r2, [r7, #28]
 8003810:	fb02 f303 	mul.w	r3, r2, r3
 8003814:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003816:	e054      	b.n	80038c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800381e:	d050      	beq.n	80038c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003820:	f7fd fb42 	bl	8000ea8 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	69bb      	ldr	r3, [r7, #24]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	69fa      	ldr	r2, [r7, #28]
 800382c:	429a      	cmp	r2, r3
 800382e:	d902      	bls.n	8003836 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d13d      	bne.n	80038b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	685a      	ldr	r2, [r3, #4]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003844:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800384e:	d111      	bne.n	8003874 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003858:	d004      	beq.n	8003864 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003862:	d107      	bne.n	8003874 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003872:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003878:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800387c:	d10f      	bne.n	800389e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800388c:	601a      	str	r2, [r3, #0]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800389c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2201      	movs	r2, #1
 80038a2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e017      	b.n	80038e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d101      	bne.n	80038bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80038b8:	2300      	movs	r3, #0
 80038ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	3b01      	subs	r3, #1
 80038c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	689a      	ldr	r2, [r3, #8]
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	4013      	ands	r3, r2
 80038cc:	68ba      	ldr	r2, [r7, #8]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	bf0c      	ite	eq
 80038d2:	2301      	moveq	r3, #1
 80038d4:	2300      	movne	r3, #0
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	461a      	mov	r2, r3
 80038da:	79fb      	ldrb	r3, [r7, #7]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d19b      	bne.n	8003818 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3720      	adds	r7, #32
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	20000004 	.word	0x20000004

080038f0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b08a      	sub	sp, #40	@ 0x28
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	607a      	str	r2, [r7, #4]
 80038fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80038fe:	2300      	movs	r3, #0
 8003900:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003902:	f7fd fad1 	bl	8000ea8 <HAL_GetTick>
 8003906:	4602      	mov	r2, r0
 8003908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800390a:	1a9b      	subs	r3, r3, r2
 800390c:	683a      	ldr	r2, [r7, #0]
 800390e:	4413      	add	r3, r2
 8003910:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003912:	f7fd fac9 	bl	8000ea8 <HAL_GetTick>
 8003916:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	330c      	adds	r3, #12
 800391e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003920:	4b3d      	ldr	r3, [pc, #244]	@ (8003a18 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	4613      	mov	r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	4413      	add	r3, r2
 800392a:	00da      	lsls	r2, r3, #3
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	0d1b      	lsrs	r3, r3, #20
 8003930:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003932:	fb02 f303 	mul.w	r3, r2, r3
 8003936:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003938:	e060      	b.n	80039fc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003940:	d107      	bne.n	8003952 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d104      	bne.n	8003952 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	b2db      	uxtb	r3, r3
 800394e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003950:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003958:	d050      	beq.n	80039fc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800395a:	f7fd faa5 	bl	8000ea8 <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	6a3b      	ldr	r3, [r7, #32]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003966:	429a      	cmp	r2, r3
 8003968:	d902      	bls.n	8003970 <SPI_WaitFifoStateUntilTimeout+0x80>
 800396a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800396c:	2b00      	cmp	r3, #0
 800396e:	d13d      	bne.n	80039ec <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	685a      	ldr	r2, [r3, #4]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800397e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003988:	d111      	bne.n	80039ae <SPI_WaitFifoStateUntilTimeout+0xbe>
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003992:	d004      	beq.n	800399e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800399c:	d107      	bne.n	80039ae <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80039ac:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039b6:	d10f      	bne.n	80039d8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80039c6:	601a      	str	r2, [r3, #0]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80039d6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	e010      	b.n	8003a0e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d101      	bne.n	80039f6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80039f2:	2300      	movs	r3, #0
 80039f4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	3b01      	subs	r3, #1
 80039fa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	689a      	ldr	r2, [r3, #8]
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	4013      	ands	r3, r2
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d196      	bne.n	800393a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3728      	adds	r7, #40	@ 0x28
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	20000004 	.word	0x20000004

08003a1c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b086      	sub	sp, #24
 8003a20:	af02      	add	r7, sp, #8
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	9300      	str	r3, [sp, #0]
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003a34:	68f8      	ldr	r0, [r7, #12]
 8003a36:	f7ff ff5b 	bl	80038f0 <SPI_WaitFifoStateUntilTimeout>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d007      	beq.n	8003a50 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a44:	f043 0220 	orr.w	r2, r3, #32
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	e027      	b.n	8003aa0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	9300      	str	r3, [sp, #0]
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	2200      	movs	r2, #0
 8003a58:	2180      	movs	r1, #128	@ 0x80
 8003a5a:	68f8      	ldr	r0, [r7, #12]
 8003a5c:	f7ff fec0 	bl	80037e0 <SPI_WaitFlagStateUntilTimeout>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d007      	beq.n	8003a76 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a6a:	f043 0220 	orr.w	r2, r3, #32
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e014      	b.n	8003aa0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	9300      	str	r3, [sp, #0]
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003a82:	68f8      	ldr	r0, [r7, #12]
 8003a84:	f7ff ff34 	bl	80038f0 <SPI_WaitFifoStateUntilTimeout>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d007      	beq.n	8003a9e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a92:	f043 0220 	orr.w	r2, r3, #32
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e000      	b.n	8003aa0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003a9e:	2300      	movs	r3, #0
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3710      	adds	r7, #16
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <memset>:
 8003aa8:	4402      	add	r2, r0
 8003aaa:	4603      	mov	r3, r0
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d100      	bne.n	8003ab2 <memset+0xa>
 8003ab0:	4770      	bx	lr
 8003ab2:	f803 1b01 	strb.w	r1, [r3], #1
 8003ab6:	e7f9      	b.n	8003aac <memset+0x4>

08003ab8 <__libc_init_array>:
 8003ab8:	b570      	push	{r4, r5, r6, lr}
 8003aba:	4d0d      	ldr	r5, [pc, #52]	@ (8003af0 <__libc_init_array+0x38>)
 8003abc:	4c0d      	ldr	r4, [pc, #52]	@ (8003af4 <__libc_init_array+0x3c>)
 8003abe:	1b64      	subs	r4, r4, r5
 8003ac0:	10a4      	asrs	r4, r4, #2
 8003ac2:	2600      	movs	r6, #0
 8003ac4:	42a6      	cmp	r6, r4
 8003ac6:	d109      	bne.n	8003adc <__libc_init_array+0x24>
 8003ac8:	4d0b      	ldr	r5, [pc, #44]	@ (8003af8 <__libc_init_array+0x40>)
 8003aca:	4c0c      	ldr	r4, [pc, #48]	@ (8003afc <__libc_init_array+0x44>)
 8003acc:	f000 f818 	bl	8003b00 <_init>
 8003ad0:	1b64      	subs	r4, r4, r5
 8003ad2:	10a4      	asrs	r4, r4, #2
 8003ad4:	2600      	movs	r6, #0
 8003ad6:	42a6      	cmp	r6, r4
 8003ad8:	d105      	bne.n	8003ae6 <__libc_init_array+0x2e>
 8003ada:	bd70      	pop	{r4, r5, r6, pc}
 8003adc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ae0:	4798      	blx	r3
 8003ae2:	3601      	adds	r6, #1
 8003ae4:	e7ee      	b.n	8003ac4 <__libc_init_array+0xc>
 8003ae6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003aea:	4798      	blx	r3
 8003aec:	3601      	adds	r6, #1
 8003aee:	e7f2      	b.n	8003ad6 <__libc_init_array+0x1e>
 8003af0:	08003be8 	.word	0x08003be8
 8003af4:	08003be8 	.word	0x08003be8
 8003af8:	08003be8 	.word	0x08003be8
 8003afc:	08003bec 	.word	0x08003bec

08003b00 <_init>:
 8003b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b02:	bf00      	nop
 8003b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b06:	bc08      	pop	{r3}
 8003b08:	469e      	mov	lr, r3
 8003b0a:	4770      	bx	lr

08003b0c <_fini>:
 8003b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b0e:	bf00      	nop
 8003b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b12:	bc08      	pop	{r3}
 8003b14:	469e      	mov	lr, r3
 8003b16:	4770      	bx	lr
