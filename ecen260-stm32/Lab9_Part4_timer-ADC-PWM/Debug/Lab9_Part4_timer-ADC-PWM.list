
Lab9_Part4_timer-ADC-PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005108  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08005290  08005290  00006290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052d0  080052d0  0000700c  2**0
                  CONTENTS
  4 .ARM          00000000  080052d0  080052d0  0000700c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080052d0  080052d0  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052d0  080052d0  000062d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080052d4  080052d4  000062d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080052d8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e8  2000000c  080052e4  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001f4  080052e4  000071f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f6eb  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002109  00000000  00000000  00016727  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff8  00000000  00000000  00018830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c63  00000000  00000000  00019828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002724a  00000000  00000000  0001a48b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010e71  00000000  00000000  000416d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fcaf3  00000000  00000000  00052546  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014f039  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000440c  00000000  00000000  0014f07c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000094  00000000  00000000  00153488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005278 	.word	0x08005278

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005278 	.word	0x08005278

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fdae 	bl	8000d2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f824 	bl	800021c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80001d4:	f000 f873 	bl	80002be <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d8:	f000 fa90 	bl	80006fc <MX_GPIO_Init>
  MX_ADC1_Init();
 80001dc:	f000 f89a 	bl	8000314 <MX_ADC1_Init>
  MX_ADC2_Init();
 80001e0:	f000 f90e 	bl	8000400 <MX_ADC2_Init>
  MX_ADC3_Init();
 80001e4:	f000 f970 	bl	80004c8 <MX_ADC3_Init>
  MX_TIM3_Init();
 80001e8:	f000 f9d2 	bl	8000590 <MX_TIM3_Init>
  MX_TIM16_Init();
 80001ec:	f000 fa5e 	bl	80006ac <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim16); // Start Timer16
 80001f0:	4808      	ldr	r0, [pc, #32]	@ (8000214 <main+0x4c>)
 80001f2:	f003 fe4d 	bl	8003e90 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // start PWM on Timer3’s Channel 1
 80001f6:	2100      	movs	r1, #0
 80001f8:	4807      	ldr	r0, [pc, #28]	@ (8000218 <main+0x50>)
 80001fa:	f003 ff1b 	bl	8004034 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); // start PWM on Timer3’s Channel 2
 80001fe:	2104      	movs	r1, #4
 8000200:	4805      	ldr	r0, [pc, #20]	@ (8000218 <main+0x50>)
 8000202:	f003 ff17 	bl	8004034 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); // start PWM on Timer3’s Channel 3
 8000206:	2108      	movs	r1, #8
 8000208:	4803      	ldr	r0, [pc, #12]	@ (8000218 <main+0x50>)
 800020a:	f003 ff13 	bl	8004034 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800020e:	bf00      	nop
 8000210:	e7fd      	b.n	800020e <main+0x46>
 8000212:	bf00      	nop
 8000214:	200001a0 	.word	0x200001a0
 8000218:	20000154 	.word	0x20000154

0800021c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b096      	sub	sp, #88	@ 0x58
 8000220:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000222:	f107 0314 	add.w	r3, r7, #20
 8000226:	2244      	movs	r2, #68	@ 0x44
 8000228:	2100      	movs	r1, #0
 800022a:	4618      	mov	r0, r3
 800022c:	f004 fff8 	bl	8005220 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000230:	463b      	mov	r3, r7
 8000232:	2200      	movs	r2, #0
 8000234:	601a      	str	r2, [r3, #0]
 8000236:	605a      	str	r2, [r3, #4]
 8000238:	609a      	str	r2, [r3, #8]
 800023a:	60da      	str	r2, [r3, #12]
 800023c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800023e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000242:	f002 faf3 	bl	800282c <HAL_PWREx_ControlVoltageScaling>
 8000246:	4603      	mov	r3, r0
 8000248:	2b00      	cmp	r3, #0
 800024a:	d001      	beq.n	8000250 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800024c:	f000 fb8a 	bl	8000964 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000250:	2302      	movs	r3, #2
 8000252:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000254:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000258:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800025a:	2310      	movs	r3, #16
 800025c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800025e:	2302      	movs	r3, #2
 8000260:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000262:	2302      	movs	r3, #2
 8000264:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000266:	2301      	movs	r3, #1
 8000268:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800026a:	230a      	movs	r3, #10
 800026c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800026e:	2307      	movs	r3, #7
 8000270:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000272:	2302      	movs	r3, #2
 8000274:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000276:	2302      	movs	r3, #2
 8000278:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800027a:	f107 0314 	add.w	r3, r7, #20
 800027e:	4618      	mov	r0, r3
 8000280:	f002 fb2a 	bl	80028d8 <HAL_RCC_OscConfig>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	d001      	beq.n	800028e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800028a:	f000 fb6b 	bl	8000964 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800028e:	230f      	movs	r3, #15
 8000290:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000292:	2303      	movs	r3, #3
 8000294:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000296:	2300      	movs	r3, #0
 8000298:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800029a:	2300      	movs	r3, #0
 800029c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800029e:	2300      	movs	r3, #0
 80002a0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80002a2:	463b      	mov	r3, r7
 80002a4:	2104      	movs	r1, #4
 80002a6:	4618      	mov	r0, r3
 80002a8:	f002 fef2 	bl	8003090 <HAL_RCC_ClockConfig>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d001      	beq.n	80002b6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80002b2:	f000 fb57 	bl	8000964 <Error_Handler>
  }
}
 80002b6:	bf00      	nop
 80002b8:	3758      	adds	r7, #88	@ 0x58
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bd80      	pop	{r7, pc}

080002be <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80002be:	b580      	push	{r7, lr}
 80002c0:	b0a2      	sub	sp, #136	@ 0x88
 80002c2:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002c4:	463b      	mov	r3, r7
 80002c6:	2288      	movs	r2, #136	@ 0x88
 80002c8:	2100      	movs	r1, #0
 80002ca:	4618      	mov	r0, r3
 80002cc:	f004 ffa8 	bl	8005220 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80002d0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80002d4:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80002d6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80002da:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80002dc:	2302      	movs	r3, #2
 80002de:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80002e0:	2301      	movs	r3, #1
 80002e2:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80002e4:	2308      	movs	r3, #8
 80002e6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80002e8:	2307      	movs	r3, #7
 80002ea:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80002ec:	2302      	movs	r3, #2
 80002ee:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80002f0:	2302      	movs	r3, #2
 80002f2:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80002f4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80002f8:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002fa:	463b      	mov	r3, r7
 80002fc:	4618      	mov	r0, r3
 80002fe:	f003 f8b3 	bl	8003468 <HAL_RCCEx_PeriphCLKConfig>
 8000302:	4603      	mov	r3, r0
 8000304:	2b00      	cmp	r3, #0
 8000306:	d001      	beq.n	800030c <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 8000308:	f000 fb2c 	bl	8000964 <Error_Handler>
  }
}
 800030c:	bf00      	nop
 800030e:	3788      	adds	r7, #136	@ 0x88
 8000310:	46bd      	mov	sp, r7
 8000312:	bd80      	pop	{r7, pc}

08000314 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b08a      	sub	sp, #40	@ 0x28
 8000318:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800031a:	f107 031c 	add.w	r3, r7, #28
 800031e:	2200      	movs	r2, #0
 8000320:	601a      	str	r2, [r3, #0]
 8000322:	605a      	str	r2, [r3, #4]
 8000324:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000326:	1d3b      	adds	r3, r7, #4
 8000328:	2200      	movs	r2, #0
 800032a:	601a      	str	r2, [r3, #0]
 800032c:	605a      	str	r2, [r3, #4]
 800032e:	609a      	str	r2, [r3, #8]
 8000330:	60da      	str	r2, [r3, #12]
 8000332:	611a      	str	r2, [r3, #16]
 8000334:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000336:	4b2f      	ldr	r3, [pc, #188]	@ (80003f4 <MX_ADC1_Init+0xe0>)
 8000338:	4a2f      	ldr	r2, [pc, #188]	@ (80003f8 <MX_ADC1_Init+0xe4>)
 800033a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800033c:	4b2d      	ldr	r3, [pc, #180]	@ (80003f4 <MX_ADC1_Init+0xe0>)
 800033e:	2200      	movs	r2, #0
 8000340:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000342:	4b2c      	ldr	r3, [pc, #176]	@ (80003f4 <MX_ADC1_Init+0xe0>)
 8000344:	2200      	movs	r2, #0
 8000346:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000348:	4b2a      	ldr	r3, [pc, #168]	@ (80003f4 <MX_ADC1_Init+0xe0>)
 800034a:	2200      	movs	r2, #0
 800034c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800034e:	4b29      	ldr	r3, [pc, #164]	@ (80003f4 <MX_ADC1_Init+0xe0>)
 8000350:	2200      	movs	r2, #0
 8000352:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000354:	4b27      	ldr	r3, [pc, #156]	@ (80003f4 <MX_ADC1_Init+0xe0>)
 8000356:	2204      	movs	r2, #4
 8000358:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800035a:	4b26      	ldr	r3, [pc, #152]	@ (80003f4 <MX_ADC1_Init+0xe0>)
 800035c:	2200      	movs	r2, #0
 800035e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000360:	4b24      	ldr	r3, [pc, #144]	@ (80003f4 <MX_ADC1_Init+0xe0>)
 8000362:	2200      	movs	r2, #0
 8000364:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000366:	4b23      	ldr	r3, [pc, #140]	@ (80003f4 <MX_ADC1_Init+0xe0>)
 8000368:	2201      	movs	r2, #1
 800036a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800036c:	4b21      	ldr	r3, [pc, #132]	@ (80003f4 <MX_ADC1_Init+0xe0>)
 800036e:	2200      	movs	r2, #0
 8000370:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000374:	4b1f      	ldr	r3, [pc, #124]	@ (80003f4 <MX_ADC1_Init+0xe0>)
 8000376:	2200      	movs	r2, #0
 8000378:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800037a:	4b1e      	ldr	r3, [pc, #120]	@ (80003f4 <MX_ADC1_Init+0xe0>)
 800037c:	2200      	movs	r2, #0
 800037e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000380:	4b1c      	ldr	r3, [pc, #112]	@ (80003f4 <MX_ADC1_Init+0xe0>)
 8000382:	2200      	movs	r2, #0
 8000384:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000388:	4b1a      	ldr	r3, [pc, #104]	@ (80003f4 <MX_ADC1_Init+0xe0>)
 800038a:	2200      	movs	r2, #0
 800038c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800038e:	4b19      	ldr	r3, [pc, #100]	@ (80003f4 <MX_ADC1_Init+0xe0>)
 8000390:	2200      	movs	r2, #0
 8000392:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000396:	4817      	ldr	r0, [pc, #92]	@ (80003f4 <MX_ADC1_Init+0xe0>)
 8000398:	f000 ff28 	bl	80011ec <HAL_ADC_Init>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d001      	beq.n	80003a6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80003a2:	f000 fadf 	bl	8000964 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80003a6:	2300      	movs	r3, #0
 80003a8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80003aa:	f107 031c 	add.w	r3, r7, #28
 80003ae:	4619      	mov	r1, r3
 80003b0:	4810      	ldr	r0, [pc, #64]	@ (80003f4 <MX_ADC1_Init+0xe0>)
 80003b2:	f001 fea9 	bl	8002108 <HAL_ADCEx_MultiModeConfigChannel>
 80003b6:	4603      	mov	r3, r0
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d001      	beq.n	80003c0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80003bc:	f000 fad2 	bl	8000964 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80003c0:	4b0e      	ldr	r3, [pc, #56]	@ (80003fc <MX_ADC1_Init+0xe8>)
 80003c2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003c4:	2306      	movs	r3, #6
 80003c6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80003c8:	2300      	movs	r3, #0
 80003ca:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80003cc:	237f      	movs	r3, #127	@ 0x7f
 80003ce:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80003d0:	2304      	movs	r3, #4
 80003d2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80003d4:	2300      	movs	r3, #0
 80003d6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003d8:	1d3b      	adds	r3, r7, #4
 80003da:	4619      	mov	r1, r3
 80003dc:	4805      	ldr	r0, [pc, #20]	@ (80003f4 <MX_ADC1_Init+0xe0>)
 80003de:	f001 f9f5 	bl	80017cc <HAL_ADC_ConfigChannel>
 80003e2:	4603      	mov	r3, r0
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d001      	beq.n	80003ec <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80003e8:	f000 fabc 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003ec:	bf00      	nop
 80003ee:	3728      	adds	r7, #40	@ 0x28
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	20000028 	.word	0x20000028
 80003f8:	50040000 	.word	0x50040000
 80003fc:	14f00020 	.word	0x14f00020

08000400 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b086      	sub	sp, #24
 8000404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000406:	463b      	mov	r3, r7
 8000408:	2200      	movs	r2, #0
 800040a:	601a      	str	r2, [r3, #0]
 800040c:	605a      	str	r2, [r3, #4]
 800040e:	609a      	str	r2, [r3, #8]
 8000410:	60da      	str	r2, [r3, #12]
 8000412:	611a      	str	r2, [r3, #16]
 8000414:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000416:	4b29      	ldr	r3, [pc, #164]	@ (80004bc <MX_ADC2_Init+0xbc>)
 8000418:	4a29      	ldr	r2, [pc, #164]	@ (80004c0 <MX_ADC2_Init+0xc0>)
 800041a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800041c:	4b27      	ldr	r3, [pc, #156]	@ (80004bc <MX_ADC2_Init+0xbc>)
 800041e:	2200      	movs	r2, #0
 8000420:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000422:	4b26      	ldr	r3, [pc, #152]	@ (80004bc <MX_ADC2_Init+0xbc>)
 8000424:	2200      	movs	r2, #0
 8000426:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000428:	4b24      	ldr	r3, [pc, #144]	@ (80004bc <MX_ADC2_Init+0xbc>)
 800042a:	2200      	movs	r2, #0
 800042c:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800042e:	4b23      	ldr	r3, [pc, #140]	@ (80004bc <MX_ADC2_Init+0xbc>)
 8000430:	2200      	movs	r2, #0
 8000432:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000434:	4b21      	ldr	r3, [pc, #132]	@ (80004bc <MX_ADC2_Init+0xbc>)
 8000436:	2204      	movs	r2, #4
 8000438:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800043a:	4b20      	ldr	r3, [pc, #128]	@ (80004bc <MX_ADC2_Init+0xbc>)
 800043c:	2200      	movs	r2, #0
 800043e:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000440:	4b1e      	ldr	r3, [pc, #120]	@ (80004bc <MX_ADC2_Init+0xbc>)
 8000442:	2200      	movs	r2, #0
 8000444:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000446:	4b1d      	ldr	r3, [pc, #116]	@ (80004bc <MX_ADC2_Init+0xbc>)
 8000448:	2201      	movs	r2, #1
 800044a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800044c:	4b1b      	ldr	r3, [pc, #108]	@ (80004bc <MX_ADC2_Init+0xbc>)
 800044e:	2200      	movs	r2, #0
 8000450:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000454:	4b19      	ldr	r3, [pc, #100]	@ (80004bc <MX_ADC2_Init+0xbc>)
 8000456:	2200      	movs	r2, #0
 8000458:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800045a:	4b18      	ldr	r3, [pc, #96]	@ (80004bc <MX_ADC2_Init+0xbc>)
 800045c:	2200      	movs	r2, #0
 800045e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000460:	4b16      	ldr	r3, [pc, #88]	@ (80004bc <MX_ADC2_Init+0xbc>)
 8000462:	2200      	movs	r2, #0
 8000464:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000468:	4b14      	ldr	r3, [pc, #80]	@ (80004bc <MX_ADC2_Init+0xbc>)
 800046a:	2200      	movs	r2, #0
 800046c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 800046e:	4b13      	ldr	r3, [pc, #76]	@ (80004bc <MX_ADC2_Init+0xbc>)
 8000470:	2200      	movs	r2, #0
 8000472:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000476:	4811      	ldr	r0, [pc, #68]	@ (80004bc <MX_ADC2_Init+0xbc>)
 8000478:	f000 feb8 	bl	80011ec <HAL_ADC_Init>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d001      	beq.n	8000486 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8000482:	f000 fa6f 	bl	8000964 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000486:	4b0f      	ldr	r3, [pc, #60]	@ (80004c4 <MX_ADC2_Init+0xc4>)
 8000488:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800048a:	2306      	movs	r3, #6
 800048c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800048e:	2300      	movs	r3, #0
 8000490:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000492:	237f      	movs	r3, #127	@ 0x7f
 8000494:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000496:	2304      	movs	r3, #4
 8000498:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800049a:	2300      	movs	r3, #0
 800049c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800049e:	463b      	mov	r3, r7
 80004a0:	4619      	mov	r1, r3
 80004a2:	4806      	ldr	r0, [pc, #24]	@ (80004bc <MX_ADC2_Init+0xbc>)
 80004a4:	f001 f992 	bl	80017cc <HAL_ADC_ConfigChannel>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d001      	beq.n	80004b2 <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 80004ae:	f000 fa59 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80004b2:	bf00      	nop
 80004b4:	3718      	adds	r7, #24
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	2000008c 	.word	0x2000008c
 80004c0:	50040100 	.word	0x50040100
 80004c4:	19200040 	.word	0x19200040

080004c8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b086      	sub	sp, #24
 80004cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004ce:	463b      	mov	r3, r7
 80004d0:	2200      	movs	r2, #0
 80004d2:	601a      	str	r2, [r3, #0]
 80004d4:	605a      	str	r2, [r3, #4]
 80004d6:	609a      	str	r2, [r3, #8]
 80004d8:	60da      	str	r2, [r3, #12]
 80004da:	611a      	str	r2, [r3, #16]
 80004dc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80004de:	4b29      	ldr	r3, [pc, #164]	@ (8000584 <MX_ADC3_Init+0xbc>)
 80004e0:	4a29      	ldr	r2, [pc, #164]	@ (8000588 <MX_ADC3_Init+0xc0>)
 80004e2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80004e4:	4b27      	ldr	r3, [pc, #156]	@ (8000584 <MX_ADC3_Init+0xbc>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80004ea:	4b26      	ldr	r3, [pc, #152]	@ (8000584 <MX_ADC3_Init+0xbc>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004f0:	4b24      	ldr	r3, [pc, #144]	@ (8000584 <MX_ADC3_Init+0xbc>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004f6:	4b23      	ldr	r3, [pc, #140]	@ (8000584 <MX_ADC3_Init+0xbc>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004fc:	4b21      	ldr	r3, [pc, #132]	@ (8000584 <MX_ADC3_Init+0xbc>)
 80004fe:	2204      	movs	r2, #4
 8000500:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000502:	4b20      	ldr	r3, [pc, #128]	@ (8000584 <MX_ADC3_Init+0xbc>)
 8000504:	2200      	movs	r2, #0
 8000506:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000508:	4b1e      	ldr	r3, [pc, #120]	@ (8000584 <MX_ADC3_Init+0xbc>)
 800050a:	2200      	movs	r2, #0
 800050c:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 800050e:	4b1d      	ldr	r3, [pc, #116]	@ (8000584 <MX_ADC3_Init+0xbc>)
 8000510:	2201      	movs	r2, #1
 8000512:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000514:	4b1b      	ldr	r3, [pc, #108]	@ (8000584 <MX_ADC3_Init+0xbc>)
 8000516:	2200      	movs	r2, #0
 8000518:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800051c:	4b19      	ldr	r3, [pc, #100]	@ (8000584 <MX_ADC3_Init+0xbc>)
 800051e:	2200      	movs	r2, #0
 8000520:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000522:	4b18      	ldr	r3, [pc, #96]	@ (8000584 <MX_ADC3_Init+0xbc>)
 8000524:	2200      	movs	r2, #0
 8000526:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000528:	4b16      	ldr	r3, [pc, #88]	@ (8000584 <MX_ADC3_Init+0xbc>)
 800052a:	2200      	movs	r2, #0
 800052c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000530:	4b14      	ldr	r3, [pc, #80]	@ (8000584 <MX_ADC3_Init+0xbc>)
 8000532:	2200      	movs	r2, #0
 8000534:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000536:	4b13      	ldr	r3, [pc, #76]	@ (8000584 <MX_ADC3_Init+0xbc>)
 8000538:	2200      	movs	r2, #0
 800053a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800053e:	4811      	ldr	r0, [pc, #68]	@ (8000584 <MX_ADC3_Init+0xbc>)
 8000540:	f000 fe54 	bl	80011ec <HAL_ADC_Init>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d001      	beq.n	800054e <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 800054a:	f000 fa0b 	bl	8000964 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800054e:	4b0f      	ldr	r3, [pc, #60]	@ (800058c <MX_ADC3_Init+0xc4>)
 8000550:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000552:	2306      	movs	r3, #6
 8000554:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000556:	2300      	movs	r3, #0
 8000558:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800055a:	237f      	movs	r3, #127	@ 0x7f
 800055c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800055e:	2304      	movs	r3, #4
 8000560:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000562:	2300      	movs	r3, #0
 8000564:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000566:	463b      	mov	r3, r7
 8000568:	4619      	mov	r1, r3
 800056a:	4806      	ldr	r0, [pc, #24]	@ (8000584 <MX_ADC3_Init+0xbc>)
 800056c:	f001 f92e 	bl	80017cc <HAL_ADC_ConfigChannel>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 8000576:	f000 f9f5 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800057a:	bf00      	nop
 800057c:	3718      	adds	r7, #24
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	200000f0 	.word	0x200000f0
 8000588:	50040200 	.word	0x50040200
 800058c:	04300002 	.word	0x04300002

08000590 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b08e      	sub	sp, #56	@ 0x38
 8000594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000596:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
 800059e:	605a      	str	r2, [r3, #4]
 80005a0:	609a      	str	r2, [r3, #8]
 80005a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005a4:	f107 031c 	add.w	r3, r7, #28
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005b0:	463b      	mov	r3, r7
 80005b2:	2200      	movs	r2, #0
 80005b4:	601a      	str	r2, [r3, #0]
 80005b6:	605a      	str	r2, [r3, #4]
 80005b8:	609a      	str	r2, [r3, #8]
 80005ba:	60da      	str	r2, [r3, #12]
 80005bc:	611a      	str	r2, [r3, #16]
 80005be:	615a      	str	r2, [r3, #20]
 80005c0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80005c2:	4b38      	ldr	r3, [pc, #224]	@ (80006a4 <MX_TIM3_Init+0x114>)
 80005c4:	4a38      	ldr	r2, [pc, #224]	@ (80006a8 <MX_TIM3_Init+0x118>)
 80005c6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 80005c8:	4b36      	ldr	r3, [pc, #216]	@ (80006a4 <MX_TIM3_Init+0x114>)
 80005ca:	2201      	movs	r2, #1
 80005cc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005ce:	4b35      	ldr	r3, [pc, #212]	@ (80006a4 <MX_TIM3_Init+0x114>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 39999;
 80005d4:	4b33      	ldr	r3, [pc, #204]	@ (80006a4 <MX_TIM3_Init+0x114>)
 80005d6:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 80005da:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005dc:	4b31      	ldr	r3, [pc, #196]	@ (80006a4 <MX_TIM3_Init+0x114>)
 80005de:	2200      	movs	r2, #0
 80005e0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80005e2:	4b30      	ldr	r3, [pc, #192]	@ (80006a4 <MX_TIM3_Init+0x114>)
 80005e4:	2280      	movs	r2, #128	@ 0x80
 80005e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80005e8:	482e      	ldr	r0, [pc, #184]	@ (80006a4 <MX_TIM3_Init+0x114>)
 80005ea:	f003 fbf9 	bl	8003de0 <HAL_TIM_Base_Init>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80005f4:	f000 f9b6 	bl	8000964 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80005fe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000602:	4619      	mov	r1, r3
 8000604:	4827      	ldr	r0, [pc, #156]	@ (80006a4 <MX_TIM3_Init+0x114>)
 8000606:	f004 f837 	bl	8004678 <HAL_TIM_ConfigClockSource>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000610:	f000 f9a8 	bl	8000964 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000614:	4823      	ldr	r0, [pc, #140]	@ (80006a4 <MX_TIM3_Init+0x114>)
 8000616:	f003 fcab 	bl	8003f70 <HAL_TIM_PWM_Init>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000620:	f000 f9a0 	bl	8000964 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000624:	2300      	movs	r3, #0
 8000626:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000628:	2300      	movs	r3, #0
 800062a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800062c:	f107 031c 	add.w	r3, r7, #28
 8000630:	4619      	mov	r1, r3
 8000632:	481c      	ldr	r0, [pc, #112]	@ (80006a4 <MX_TIM3_Init+0x114>)
 8000634:	f004 fd4e 	bl	80050d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800063e:	f000 f991 	bl	8000964 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000642:	2360      	movs	r3, #96	@ 0x60
 8000644:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000646:	2300      	movs	r3, #0
 8000648:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800064a:	2300      	movs	r3, #0
 800064c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800064e:	2300      	movs	r3, #0
 8000650:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000652:	463b      	mov	r3, r7
 8000654:	2200      	movs	r2, #0
 8000656:	4619      	mov	r1, r3
 8000658:	4812      	ldr	r0, [pc, #72]	@ (80006a4 <MX_TIM3_Init+0x114>)
 800065a:	f003 fef9 	bl	8004450 <HAL_TIM_PWM_ConfigChannel>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000664:	f000 f97e 	bl	8000964 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000668:	463b      	mov	r3, r7
 800066a:	2204      	movs	r2, #4
 800066c:	4619      	mov	r1, r3
 800066e:	480d      	ldr	r0, [pc, #52]	@ (80006a4 <MX_TIM3_Init+0x114>)
 8000670:	f003 feee 	bl	8004450 <HAL_TIM_PWM_ConfigChannel>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 800067a:	f000 f973 	bl	8000964 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800067e:	463b      	mov	r3, r7
 8000680:	2208      	movs	r2, #8
 8000682:	4619      	mov	r1, r3
 8000684:	4807      	ldr	r0, [pc, #28]	@ (80006a4 <MX_TIM3_Init+0x114>)
 8000686:	f003 fee3 	bl	8004450 <HAL_TIM_PWM_ConfigChannel>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8000690:	f000 f968 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000694:	4803      	ldr	r0, [pc, #12]	@ (80006a4 <MX_TIM3_Init+0x114>)
 8000696:	f000 fa7f 	bl	8000b98 <HAL_TIM_MspPostInit>

}
 800069a:	bf00      	nop
 800069c:	3738      	adds	r7, #56	@ 0x38
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	20000154 	.word	0x20000154
 80006a8:	40000400 	.word	0x40000400

080006ac <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80006b0:	4b10      	ldr	r3, [pc, #64]	@ (80006f4 <MX_TIM16_Init+0x48>)
 80006b2:	4a11      	ldr	r2, [pc, #68]	@ (80006f8 <MX_TIM16_Init+0x4c>)
 80006b4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 7999;
 80006b6:	4b0f      	ldr	r3, [pc, #60]	@ (80006f4 <MX_TIM16_Init+0x48>)
 80006b8:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80006bc:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006be:	4b0d      	ldr	r3, [pc, #52]	@ (80006f4 <MX_TIM16_Init+0x48>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 999;
 80006c4:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <MX_TIM16_Init+0x48>)
 80006c6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80006ca:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006cc:	4b09      	ldr	r3, [pc, #36]	@ (80006f4 <MX_TIM16_Init+0x48>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80006d2:	4b08      	ldr	r3, [pc, #32]	@ (80006f4 <MX_TIM16_Init+0x48>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006d8:	4b06      	ldr	r3, [pc, #24]	@ (80006f4 <MX_TIM16_Init+0x48>)
 80006da:	2200      	movs	r2, #0
 80006dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80006de:	4805      	ldr	r0, [pc, #20]	@ (80006f4 <MX_TIM16_Init+0x48>)
 80006e0:	f003 fb7e 	bl	8003de0 <HAL_TIM_Base_Init>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80006ea:	f000 f93b 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	200001a0 	.word	0x200001a0
 80006f8:	40014400 	.word	0x40014400

080006fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b08a      	sub	sp, #40	@ 0x28
 8000700:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000702:	f107 0314 	add.w	r3, r7, #20
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	60da      	str	r2, [r3, #12]
 8000710:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000712:	4b2f      	ldr	r3, [pc, #188]	@ (80007d0 <MX_GPIO_Init+0xd4>)
 8000714:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000716:	4a2e      	ldr	r2, [pc, #184]	@ (80007d0 <MX_GPIO_Init+0xd4>)
 8000718:	f043 0304 	orr.w	r3, r3, #4
 800071c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800071e:	4b2c      	ldr	r3, [pc, #176]	@ (80007d0 <MX_GPIO_Init+0xd4>)
 8000720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000722:	f003 0304 	and.w	r3, r3, #4
 8000726:	613b      	str	r3, [r7, #16]
 8000728:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800072a:	4b29      	ldr	r3, [pc, #164]	@ (80007d0 <MX_GPIO_Init+0xd4>)
 800072c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800072e:	4a28      	ldr	r2, [pc, #160]	@ (80007d0 <MX_GPIO_Init+0xd4>)
 8000730:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000734:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000736:	4b26      	ldr	r3, [pc, #152]	@ (80007d0 <MX_GPIO_Init+0xd4>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800073a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000742:	4b23      	ldr	r3, [pc, #140]	@ (80007d0 <MX_GPIO_Init+0xd4>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000746:	4a22      	ldr	r2, [pc, #136]	@ (80007d0 <MX_GPIO_Init+0xd4>)
 8000748:	f043 0301 	orr.w	r3, r3, #1
 800074c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800074e:	4b20      	ldr	r3, [pc, #128]	@ (80007d0 <MX_GPIO_Init+0xd4>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000752:	f003 0301 	and.w	r3, r3, #1
 8000756:	60bb      	str	r3, [r7, #8]
 8000758:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800075a:	4b1d      	ldr	r3, [pc, #116]	@ (80007d0 <MX_GPIO_Init+0xd4>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800075e:	4a1c      	ldr	r2, [pc, #112]	@ (80007d0 <MX_GPIO_Init+0xd4>)
 8000760:	f043 0302 	orr.w	r3, r3, #2
 8000764:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000766:	4b1a      	ldr	r3, [pc, #104]	@ (80007d0 <MX_GPIO_Init+0xd4>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800076a:	f003 0302 	and.w	r3, r3, #2
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_10, GPIO_PIN_RESET);
 8000772:	2200      	movs	r2, #0
 8000774:	f44f 61a0 	mov.w	r1, #1280	@ 0x500
 8000778:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800077c:	f002 f830 	bl	80027e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000780:	2200      	movs	r2, #0
 8000782:	2120      	movs	r1, #32
 8000784:	4813      	ldr	r0, [pc, #76]	@ (80007d4 <MX_GPIO_Init+0xd8>)
 8000786:	f002 f82b 	bl	80027e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 800078a:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 800078e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000790:	2301      	movs	r3, #1
 8000792:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000798:	2300      	movs	r3, #0
 800079a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800079c:	f107 0314 	add.w	r3, r7, #20
 80007a0:	4619      	mov	r1, r3
 80007a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007a6:	f001 fe71 	bl	800248c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80007aa:	2320      	movs	r3, #32
 80007ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ae:	2301      	movs	r3, #1
 80007b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b6:	2300      	movs	r3, #0
 80007b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ba:	f107 0314 	add.w	r3, r7, #20
 80007be:	4619      	mov	r1, r3
 80007c0:	4804      	ldr	r0, [pc, #16]	@ (80007d4 <MX_GPIO_Init+0xd8>)
 80007c2:	f001 fe63 	bl	800248c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007c6:	bf00      	nop
 80007c8:	3728      	adds	r7, #40	@ 0x28
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40021000 	.word	0x40021000
 80007d4:	48000400 	.word	0x48000400

080007d8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Callback: this ISR is triggered whenever a timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b08a      	sub	sp, #40	@ 0x28
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
	 // Check which timer triggered this callback
	 if (htim == &htim16) // if the triggered timer was Timer 16
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	4a5a      	ldr	r2, [pc, #360]	@ (800094c <HAL_TIM_PeriodElapsedCallback+0x174>)
 80007e4:	4293      	cmp	r3, r2
 80007e6:	f040 80ac 	bne.w	8000942 <HAL_TIM_PeriodElapsedCallback+0x16a>
	 {
		 int PWM_PERIOD = 40000;
 80007ea:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80007ee:	627b      	str	r3, [r7, #36]	@ 0x24
		 int ADC_RANGE = 4096; // 2^12 (12-bit resolution)
 80007f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007f4:	623b      	str	r3, [r7, #32]

		 // Start ADC Conversions
		 HAL_ADC_Start(&hadc1);
 80007f6:	4856      	ldr	r0, [pc, #344]	@ (8000950 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80007f8:	f000 fe48 	bl	800148c <HAL_ADC_Start>
		 HAL_ADC_Start(&hadc2);
 80007fc:	4855      	ldr	r0, [pc, #340]	@ (8000954 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80007fe:	f000 fe45 	bl	800148c <HAL_ADC_Start>
		 HAL_ADC_Start(&hadc3);
 8000802:	4855      	ldr	r0, [pc, #340]	@ (8000958 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000804:	f000 fe42 	bl	800148c <HAL_ADC_Start>

		 // Wait for ADC conversions to complete
		 HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000808:	f04f 31ff 	mov.w	r1, #4294967295
 800080c:	4850      	ldr	r0, [pc, #320]	@ (8000950 <HAL_TIM_PeriodElapsedCallback+0x178>)
 800080e:	f000 fef7 	bl	8001600 <HAL_ADC_PollForConversion>
		 HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 8000812:	f04f 31ff 	mov.w	r1, #4294967295
 8000816:	484f      	ldr	r0, [pc, #316]	@ (8000954 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000818:	f000 fef2 	bl	8001600 <HAL_ADC_PollForConversion>
		 HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
 800081c:	f04f 31ff 	mov.w	r1, #4294967295
 8000820:	484d      	ldr	r0, [pc, #308]	@ (8000958 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000822:	f000 feed 	bl	8001600 <HAL_ADC_PollForConversion>

		 // Read ADC values
		 uint16_t knob_measurement = HAL_ADC_GetValue(&hadc1);
 8000826:	484a      	ldr	r0, [pc, #296]	@ (8000950 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8000828:	f000 ffc2 	bl	80017b0 <HAL_ADC_GetValue>
 800082c:	4603      	mov	r3, r0
 800082e:	83fb      	strh	r3, [r7, #30]
		 uint16_t xjoy_measurement = HAL_ADC_GetValue(&hadc2);
 8000830:	4848      	ldr	r0, [pc, #288]	@ (8000954 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000832:	f000 ffbd 	bl	80017b0 <HAL_ADC_GetValue>
 8000836:	4603      	mov	r3, r0
 8000838:	83bb      	strh	r3, [r7, #28]
		 uint16_t yjoy_measurement = HAL_ADC_GetValue(&hadc3);
 800083a:	4847      	ldr	r0, [pc, #284]	@ (8000958 <HAL_TIM_PeriodElapsedCallback+0x180>)
 800083c:	f000 ffb8 	bl	80017b0 <HAL_ADC_GetValue>
 8000840:	4603      	mov	r3, r0
 8000842:	837b      	strh	r3, [r7, #26]

		 // Convert ADC levels to a fraction of total (value of 0.0 to 1.0)
		 float knob_value = ((float) knob_measurement) / ADC_RANGE;
 8000844:	8bfb      	ldrh	r3, [r7, #30]
 8000846:	ee07 3a90 	vmov	s15, r3
 800084a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800084e:	6a3b      	ldr	r3, [r7, #32]
 8000850:	ee07 3a90 	vmov	s15, r3
 8000854:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000858:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800085c:	edc7 7a05 	vstr	s15, [r7, #20]
		 float xjoy_value = ((float) xjoy_measurement) / ADC_RANGE;
 8000860:	8bbb      	ldrh	r3, [r7, #28]
 8000862:	ee07 3a90 	vmov	s15, r3
 8000866:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800086a:	6a3b      	ldr	r3, [r7, #32]
 800086c:	ee07 3a90 	vmov	s15, r3
 8000870:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000874:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000878:	edc7 7a04 	vstr	s15, [r7, #16]
		 float yjoy_value = ((float) yjoy_measurement) / ADC_RANGE;
 800087c:	8b7b      	ldrh	r3, [r7, #26]
 800087e:	ee07 3a90 	vmov	s15, r3
 8000882:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000886:	6a3b      	ldr	r3, [r7, #32]
 8000888:	ee07 3a90 	vmov	s15, r3
 800088c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000890:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000894:	edc7 7a03 	vstr	s15, [r7, #12]

		 // Write the PWM duty cycle values for the tri-color RGB LED
		 TIM3->CCR1 = (int) (knob_value * PWM_PERIOD); // red
 8000898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800089a:	ee07 3a90 	vmov	s15, r3
 800089e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80008a2:	edd7 7a05 	vldr	s15, [r7, #20]
 80008a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008ae:	4b2b      	ldr	r3, [pc, #172]	@ (800095c <HAL_TIM_PeriodElapsedCallback+0x184>)
 80008b0:	ee17 2a90 	vmov	r2, s15
 80008b4:	635a      	str	r2, [r3, #52]	@ 0x34
		 TIM3->CCR2 = (int) (xjoy_value * PWM_PERIOD); // green
 80008b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008b8:	ee07 3a90 	vmov	s15, r3
 80008bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80008c0:	edd7 7a04 	vldr	s15, [r7, #16]
 80008c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008cc:	4b23      	ldr	r3, [pc, #140]	@ (800095c <HAL_TIM_PeriodElapsedCallback+0x184>)
 80008ce:	ee17 2a90 	vmov	r2, s15
 80008d2:	639a      	str	r2, [r3, #56]	@ 0x38
		 TIM3->CCR3 = (int) (yjoy_value * PWM_PERIOD); // blue
 80008d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008d6:	ee07 3a90 	vmov	s15, r3
 80008da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80008de:	edd7 7a03 	vldr	s15, [r7, #12]
 80008e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008ea:	4b1c      	ldr	r3, [pc, #112]	@ (800095c <HAL_TIM_PeriodElapsedCallback+0x184>)
 80008ec:	ee17 2a90 	vmov	r2, s15
 80008f0:	63da      	str	r2, [r3, #60]	@ 0x3c

		 // Use the three single-color LEDs as the three
		 // most-significant bits of the knob measurement

		 // get the three most significant bits
		 char msb = (knob_measurement & (1 << 11)) >> 11;
 80008f2:	8bfb      	ldrh	r3, [r7, #30]
 80008f4:	12db      	asrs	r3, r3, #11
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	f003 0301 	and.w	r3, r3, #1
 80008fc:	72fb      	strb	r3, [r7, #11]
		 char mid = (knob_measurement & (1 << 10)) >> 10;
 80008fe:	8bfb      	ldrh	r3, [r7, #30]
 8000900:	129b      	asrs	r3, r3, #10
 8000902:	b2db      	uxtb	r3, r3
 8000904:	f003 0301 	and.w	r3, r3, #1
 8000908:	72bb      	strb	r3, [r7, #10]
		 char lsb = (knob_measurement & (1 << 9)) >> 9;
 800090a:	8bfb      	ldrh	r3, [r7, #30]
 800090c:	125b      	asrs	r3, r3, #9
 800090e:	b2db      	uxtb	r3, r3
 8000910:	f003 0301 	and.w	r3, r3, #1
 8000914:	727b      	strb	r3, [r7, #9]

		 // write the value of the corresponding bit to the LEDs
		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, msb);
 8000916:	7afb      	ldrb	r3, [r7, #11]
 8000918:	461a      	mov	r2, r3
 800091a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800091e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000922:	f001 ff5d 	bl	80027e0 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, mid);
 8000926:	7abb      	ldrb	r3, [r7, #10]
 8000928:	461a      	mov	r2, r3
 800092a:	2120      	movs	r1, #32
 800092c:	480c      	ldr	r0, [pc, #48]	@ (8000960 <HAL_TIM_PeriodElapsedCallback+0x188>)
 800092e:	f001 ff57 	bl	80027e0 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, lsb);
 8000932:	7a7b      	ldrb	r3, [r7, #9]
 8000934:	461a      	mov	r2, r3
 8000936:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800093a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800093e:	f001 ff4f 	bl	80027e0 <HAL_GPIO_WritePin>
	 }
}
 8000942:	bf00      	nop
 8000944:	3728      	adds	r7, #40	@ 0x28
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	200001a0 	.word	0x200001a0
 8000950:	20000028 	.word	0x20000028
 8000954:	2000008c 	.word	0x2000008c
 8000958:	200000f0 	.word	0x200000f0
 800095c:	40000400 	.word	0x40000400
 8000960:	48000400 	.word	0x48000400

08000964 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000968:	b672      	cpsid	i
}
 800096a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800096c:	bf00      	nop
 800096e:	e7fd      	b.n	800096c <Error_Handler+0x8>

08000970 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000976:	4b0f      	ldr	r3, [pc, #60]	@ (80009b4 <HAL_MspInit+0x44>)
 8000978:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800097a:	4a0e      	ldr	r2, [pc, #56]	@ (80009b4 <HAL_MspInit+0x44>)
 800097c:	f043 0301 	orr.w	r3, r3, #1
 8000980:	6613      	str	r3, [r2, #96]	@ 0x60
 8000982:	4b0c      	ldr	r3, [pc, #48]	@ (80009b4 <HAL_MspInit+0x44>)
 8000984:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	607b      	str	r3, [r7, #4]
 800098c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800098e:	4b09      	ldr	r3, [pc, #36]	@ (80009b4 <HAL_MspInit+0x44>)
 8000990:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000992:	4a08      	ldr	r2, [pc, #32]	@ (80009b4 <HAL_MspInit+0x44>)
 8000994:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000998:	6593      	str	r3, [r2, #88]	@ 0x58
 800099a:	4b06      	ldr	r3, [pc, #24]	@ (80009b4 <HAL_MspInit+0x44>)
 800099c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800099e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009a2:	603b      	str	r3, [r7, #0]
 80009a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a6:	bf00      	nop
 80009a8:	370c      	adds	r7, #12
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	40021000 	.word	0x40021000

080009b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b08e      	sub	sp, #56	@ 0x38
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]
 80009ce:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a4d      	ldr	r2, [pc, #308]	@ (8000b0c <HAL_ADC_MspInit+0x154>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d12e      	bne.n	8000a38 <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 80009da:	4b4d      	ldr	r3, [pc, #308]	@ (8000b10 <HAL_ADC_MspInit+0x158>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	3301      	adds	r3, #1
 80009e0:	4a4b      	ldr	r2, [pc, #300]	@ (8000b10 <HAL_ADC_MspInit+0x158>)
 80009e2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80009e4:	4b4a      	ldr	r3, [pc, #296]	@ (8000b10 <HAL_ADC_MspInit+0x158>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d10b      	bne.n	8000a04 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 80009ec:	4b49      	ldr	r3, [pc, #292]	@ (8000b14 <HAL_ADC_MspInit+0x15c>)
 80009ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009f0:	4a48      	ldr	r2, [pc, #288]	@ (8000b14 <HAL_ADC_MspInit+0x15c>)
 80009f2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80009f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009f8:	4b46      	ldr	r3, [pc, #280]	@ (8000b14 <HAL_ADC_MspInit+0x15c>)
 80009fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a00:	623b      	str	r3, [r7, #32]
 8000a02:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a04:	4b43      	ldr	r3, [pc, #268]	@ (8000b14 <HAL_ADC_MspInit+0x15c>)
 8000a06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a08:	4a42      	ldr	r2, [pc, #264]	@ (8000b14 <HAL_ADC_MspInit+0x15c>)
 8000a0a:	f043 0301 	orr.w	r3, r3, #1
 8000a0e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a10:	4b40      	ldr	r3, [pc, #256]	@ (8000b14 <HAL_ADC_MspInit+0x15c>)
 8000a12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a14:	f003 0301 	and.w	r3, r3, #1
 8000a18:	61fb      	str	r3, [r7, #28]
 8000a1a:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000a20:	230b      	movs	r3, #11
 8000a22:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a32:	f001 fd2b 	bl	800248c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8000a36:	e065      	b.n	8000b04 <HAL_ADC_MspInit+0x14c>
  else if(hadc->Instance==ADC2)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a36      	ldr	r2, [pc, #216]	@ (8000b18 <HAL_ADC_MspInit+0x160>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d12e      	bne.n	8000aa0 <HAL_ADC_MspInit+0xe8>
    HAL_RCC_ADC_CLK_ENABLED++;
 8000a42:	4b33      	ldr	r3, [pc, #204]	@ (8000b10 <HAL_ADC_MspInit+0x158>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	3301      	adds	r3, #1
 8000a48:	4a31      	ldr	r2, [pc, #196]	@ (8000b10 <HAL_ADC_MspInit+0x158>)
 8000a4a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000a4c:	4b30      	ldr	r3, [pc, #192]	@ (8000b10 <HAL_ADC_MspInit+0x158>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	d10b      	bne.n	8000a6c <HAL_ADC_MspInit+0xb4>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000a54:	4b2f      	ldr	r3, [pc, #188]	@ (8000b14 <HAL_ADC_MspInit+0x15c>)
 8000a56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a58:	4a2e      	ldr	r2, [pc, #184]	@ (8000b14 <HAL_ADC_MspInit+0x15c>)
 8000a5a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000a5e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a60:	4b2c      	ldr	r3, [pc, #176]	@ (8000b14 <HAL_ADC_MspInit+0x15c>)
 8000a62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a64:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a68:	61bb      	str	r3, [r7, #24]
 8000a6a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6c:	4b29      	ldr	r3, [pc, #164]	@ (8000b14 <HAL_ADC_MspInit+0x15c>)
 8000a6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a70:	4a28      	ldr	r2, [pc, #160]	@ (8000b14 <HAL_ADC_MspInit+0x15c>)
 8000a72:	f043 0301 	orr.w	r3, r3, #1
 8000a76:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a78:	4b26      	ldr	r3, [pc, #152]	@ (8000b14 <HAL_ADC_MspInit+0x15c>)
 8000a7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a7c:	f003 0301 	and.w	r3, r3, #1
 8000a80:	617b      	str	r3, [r7, #20]
 8000a82:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a84:	2302      	movs	r3, #2
 8000a86:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000a88:	230b      	movs	r3, #11
 8000a8a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a94:	4619      	mov	r1, r3
 8000a96:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a9a:	f001 fcf7 	bl	800248c <HAL_GPIO_Init>
}
 8000a9e:	e031      	b.n	8000b04 <HAL_ADC_MspInit+0x14c>
  else if(hadc->Instance==ADC3)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a1d      	ldr	r2, [pc, #116]	@ (8000b1c <HAL_ADC_MspInit+0x164>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d12c      	bne.n	8000b04 <HAL_ADC_MspInit+0x14c>
    HAL_RCC_ADC_CLK_ENABLED++;
 8000aaa:	4b19      	ldr	r3, [pc, #100]	@ (8000b10 <HAL_ADC_MspInit+0x158>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	3301      	adds	r3, #1
 8000ab0:	4a17      	ldr	r2, [pc, #92]	@ (8000b10 <HAL_ADC_MspInit+0x158>)
 8000ab2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000ab4:	4b16      	ldr	r3, [pc, #88]	@ (8000b10 <HAL_ADC_MspInit+0x158>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	2b01      	cmp	r3, #1
 8000aba:	d10b      	bne.n	8000ad4 <HAL_ADC_MspInit+0x11c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000abc:	4b15      	ldr	r3, [pc, #84]	@ (8000b14 <HAL_ADC_MspInit+0x15c>)
 8000abe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ac0:	4a14      	ldr	r2, [pc, #80]	@ (8000b14 <HAL_ADC_MspInit+0x15c>)
 8000ac2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000ac6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ac8:	4b12      	ldr	r3, [pc, #72]	@ (8000b14 <HAL_ADC_MspInit+0x15c>)
 8000aca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000acc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ad0:	613b      	str	r3, [r7, #16]
 8000ad2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ad4:	4b0f      	ldr	r3, [pc, #60]	@ (8000b14 <HAL_ADC_MspInit+0x15c>)
 8000ad6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ad8:	4a0e      	ldr	r2, [pc, #56]	@ (8000b14 <HAL_ADC_MspInit+0x15c>)
 8000ada:	f043 0304 	orr.w	r3, r3, #4
 8000ade:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ae0:	4b0c      	ldr	r3, [pc, #48]	@ (8000b14 <HAL_ADC_MspInit+0x15c>)
 8000ae2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ae4:	f003 0304 	and.w	r3, r3, #4
 8000ae8:	60fb      	str	r3, [r7, #12]
 8000aea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000aec:	2301      	movs	r3, #1
 8000aee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000af0:	230b      	movs	r3, #11
 8000af2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000af8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000afc:	4619      	mov	r1, r3
 8000afe:	4808      	ldr	r0, [pc, #32]	@ (8000b20 <HAL_ADC_MspInit+0x168>)
 8000b00:	f001 fcc4 	bl	800248c <HAL_GPIO_Init>
}
 8000b04:	bf00      	nop
 8000b06:	3738      	adds	r7, #56	@ 0x38
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	50040000 	.word	0x50040000
 8000b10:	200001ec 	.word	0x200001ec
 8000b14:	40021000 	.word	0x40021000
 8000b18:	50040100 	.word	0x50040100
 8000b1c:	50040200 	.word	0x50040200
 8000b20:	48000800 	.word	0x48000800

08000b24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a16      	ldr	r2, [pc, #88]	@ (8000b8c <HAL_TIM_Base_MspInit+0x68>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d10c      	bne.n	8000b50 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b36:	4b16      	ldr	r3, [pc, #88]	@ (8000b90 <HAL_TIM_Base_MspInit+0x6c>)
 8000b38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b3a:	4a15      	ldr	r2, [pc, #84]	@ (8000b90 <HAL_TIM_Base_MspInit+0x6c>)
 8000b3c:	f043 0302 	orr.w	r3, r3, #2
 8000b40:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b42:	4b13      	ldr	r3, [pc, #76]	@ (8000b90 <HAL_TIM_Base_MspInit+0x6c>)
 8000b44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b46:	f003 0302 	and.w	r3, r3, #2
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000b4e:	e018      	b.n	8000b82 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM16)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a0f      	ldr	r2, [pc, #60]	@ (8000b94 <HAL_TIM_Base_MspInit+0x70>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d113      	bne.n	8000b82 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000b5a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b90 <HAL_TIM_Base_MspInit+0x6c>)
 8000b5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b5e:	4a0c      	ldr	r2, [pc, #48]	@ (8000b90 <HAL_TIM_Base_MspInit+0x6c>)
 8000b60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b64:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b66:	4b0a      	ldr	r3, [pc, #40]	@ (8000b90 <HAL_TIM_Base_MspInit+0x6c>)
 8000b68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b6e:	60bb      	str	r3, [r7, #8]
 8000b70:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000b72:	2200      	movs	r2, #0
 8000b74:	2100      	movs	r1, #0
 8000b76:	2019      	movs	r0, #25
 8000b78:	f001 fc51 	bl	800241e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000b7c:	2019      	movs	r0, #25
 8000b7e:	f001 fc6a 	bl	8002456 <HAL_NVIC_EnableIRQ>
}
 8000b82:	bf00      	nop
 8000b84:	3710      	adds	r7, #16
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40000400 	.word	0x40000400
 8000b90:	40021000 	.word	0x40021000
 8000b94:	40014400 	.word	0x40014400

08000b98 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b08a      	sub	sp, #40	@ 0x28
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]
 8000bae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a1f      	ldr	r2, [pc, #124]	@ (8000c34 <HAL_TIM_MspPostInit+0x9c>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d138      	bne.n	8000c2c <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bba:	4b1f      	ldr	r3, [pc, #124]	@ (8000c38 <HAL_TIM_MspPostInit+0xa0>)
 8000bbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bbe:	4a1e      	ldr	r2, [pc, #120]	@ (8000c38 <HAL_TIM_MspPostInit+0xa0>)
 8000bc0:	f043 0301 	orr.w	r3, r3, #1
 8000bc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bc6:	4b1c      	ldr	r3, [pc, #112]	@ (8000c38 <HAL_TIM_MspPostInit+0xa0>)
 8000bc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bca:	f003 0301 	and.w	r3, r3, #1
 8000bce:	613b      	str	r3, [r7, #16]
 8000bd0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd2:	4b19      	ldr	r3, [pc, #100]	@ (8000c38 <HAL_TIM_MspPostInit+0xa0>)
 8000bd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bd6:	4a18      	ldr	r2, [pc, #96]	@ (8000c38 <HAL_TIM_MspPostInit+0xa0>)
 8000bd8:	f043 0302 	orr.w	r3, r3, #2
 8000bdc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bde:	4b16      	ldr	r3, [pc, #88]	@ (8000c38 <HAL_TIM_MspPostInit+0xa0>)
 8000be0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000be2:	f003 0302 	and.w	r3, r3, #2
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bea:	23c0      	movs	r3, #192	@ 0xc0
 8000bec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfe:	f107 0314 	add.w	r3, r7, #20
 8000c02:	4619      	mov	r1, r3
 8000c04:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c08:	f001 fc40 	bl	800248c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c10:	2302      	movs	r3, #2
 8000c12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	2300      	movs	r3, #0
 8000c16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c20:	f107 0314 	add.w	r3, r7, #20
 8000c24:	4619      	mov	r1, r3
 8000c26:	4805      	ldr	r0, [pc, #20]	@ (8000c3c <HAL_TIM_MspPostInit+0xa4>)
 8000c28:	f001 fc30 	bl	800248c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000c2c:	bf00      	nop
 8000c2e:	3728      	adds	r7, #40	@ 0x28
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	40000400 	.word	0x40000400
 8000c38:	40021000 	.word	0x40021000
 8000c3c:	48000400 	.word	0x48000400

08000c40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c44:	bf00      	nop
 8000c46:	e7fd      	b.n	8000c44 <NMI_Handler+0x4>

08000c48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c4c:	bf00      	nop
 8000c4e:	e7fd      	b.n	8000c4c <HardFault_Handler+0x4>

08000c50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c54:	bf00      	nop
 8000c56:	e7fd      	b.n	8000c54 <MemManage_Handler+0x4>

08000c58 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c5c:	bf00      	nop
 8000c5e:	e7fd      	b.n	8000c5c <BusFault_Handler+0x4>

08000c60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c64:	bf00      	nop
 8000c66:	e7fd      	b.n	8000c64 <UsageFault_Handler+0x4>

08000c68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr

08000c76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c76:	b480      	push	{r7}
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr

08000c92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c96:	f000 f8a5 	bl	8000de4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
	...

08000ca0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000ca4:	4802      	ldr	r0, [pc, #8]	@ (8000cb0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000ca6:	f003 facb 	bl	8004240 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	200001a0 	.word	0x200001a0

08000cb4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000cb8:	4b06      	ldr	r3, [pc, #24]	@ (8000cd4 <SystemInit+0x20>)
 8000cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cbe:	4a05      	ldr	r2, [pc, #20]	@ (8000cd4 <SystemInit+0x20>)
 8000cc0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cc4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	e000ed00 	.word	0xe000ed00

08000cd8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000cd8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d10 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cdc:	f7ff ffea 	bl	8000cb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ce0:	480c      	ldr	r0, [pc, #48]	@ (8000d14 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ce2:	490d      	ldr	r1, [pc, #52]	@ (8000d18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ce4:	4a0d      	ldr	r2, [pc, #52]	@ (8000d1c <LoopForever+0xe>)
  movs r3, #0
 8000ce6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ce8:	e002      	b.n	8000cf0 <LoopCopyDataInit>

08000cea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cee:	3304      	adds	r3, #4

08000cf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cf4:	d3f9      	bcc.n	8000cea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cf6:	4a0a      	ldr	r2, [pc, #40]	@ (8000d20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cf8:	4c0a      	ldr	r4, [pc, #40]	@ (8000d24 <LoopForever+0x16>)
  movs r3, #0
 8000cfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cfc:	e001      	b.n	8000d02 <LoopFillZerobss>

08000cfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d00:	3204      	adds	r2, #4

08000d02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d04:	d3fb      	bcc.n	8000cfe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d06:	f004 fa93 	bl	8005230 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d0a:	f7ff fa5d 	bl	80001c8 <main>

08000d0e <LoopForever>:

LoopForever:
    b LoopForever
 8000d0e:	e7fe      	b.n	8000d0e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d10:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000d14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d18:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d1c:	080052d8 	.word	0x080052d8
  ldr r2, =_sbss
 8000d20:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d24:	200001f4 	.word	0x200001f4

08000d28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d28:	e7fe      	b.n	8000d28 <ADC1_2_IRQHandler>
	...

08000d2c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d32:	2300      	movs	r3, #0
 8000d34:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d36:	4b0c      	ldr	r3, [pc, #48]	@ (8000d68 <HAL_Init+0x3c>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a0b      	ldr	r2, [pc, #44]	@ (8000d68 <HAL_Init+0x3c>)
 8000d3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d40:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d42:	2003      	movs	r0, #3
 8000d44:	f001 fb60 	bl	8002408 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d48:	2000      	movs	r0, #0
 8000d4a:	f000 f80f 	bl	8000d6c <HAL_InitTick>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d002      	beq.n	8000d5a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000d54:	2301      	movs	r3, #1
 8000d56:	71fb      	strb	r3, [r7, #7]
 8000d58:	e001      	b.n	8000d5e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d5a:	f7ff fe09 	bl	8000970 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40022000 	.word	0x40022000

08000d6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d74:	2300      	movs	r3, #0
 8000d76:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d78:	4b17      	ldr	r3, [pc, #92]	@ (8000dd8 <HAL_InitTick+0x6c>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d023      	beq.n	8000dc8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d80:	4b16      	ldr	r3, [pc, #88]	@ (8000ddc <HAL_InitTick+0x70>)
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	4b14      	ldr	r3, [pc, #80]	@ (8000dd8 <HAL_InitTick+0x6c>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	4619      	mov	r1, r3
 8000d8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d96:	4618      	mov	r0, r3
 8000d98:	f001 fb6b 	bl	8002472 <HAL_SYSTICK_Config>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d10f      	bne.n	8000dc2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2b0f      	cmp	r3, #15
 8000da6:	d809      	bhi.n	8000dbc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000da8:	2200      	movs	r2, #0
 8000daa:	6879      	ldr	r1, [r7, #4]
 8000dac:	f04f 30ff 	mov.w	r0, #4294967295
 8000db0:	f001 fb35 	bl	800241e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000db4:	4a0a      	ldr	r2, [pc, #40]	@ (8000de0 <HAL_InitTick+0x74>)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6013      	str	r3, [r2, #0]
 8000dba:	e007      	b.n	8000dcc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	73fb      	strb	r3, [r7, #15]
 8000dc0:	e004      	b.n	8000dcc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	73fb      	strb	r3, [r7, #15]
 8000dc6:	e001      	b.n	8000dcc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3710      	adds	r7, #16
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20000008 	.word	0x20000008
 8000ddc:	20000000 	.word	0x20000000
 8000de0:	20000004 	.word	0x20000004

08000de4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000de8:	4b06      	ldr	r3, [pc, #24]	@ (8000e04 <HAL_IncTick+0x20>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	461a      	mov	r2, r3
 8000dee:	4b06      	ldr	r3, [pc, #24]	@ (8000e08 <HAL_IncTick+0x24>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4413      	add	r3, r2
 8000df4:	4a04      	ldr	r2, [pc, #16]	@ (8000e08 <HAL_IncTick+0x24>)
 8000df6:	6013      	str	r3, [r2, #0]
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	20000008 	.word	0x20000008
 8000e08:	200001f0 	.word	0x200001f0

08000e0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e10:	4b03      	ldr	r3, [pc, #12]	@ (8000e20 <HAL_GetTick+0x14>)
 8000e12:	681b      	ldr	r3, [r3, #0]
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	200001f0 	.word	0x200001f0

08000e24 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	689b      	ldr	r3, [r3, #8]
 8000e32:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	431a      	orrs	r2, r3
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	609a      	str	r2, [r3, #8]
}
 8000e3e:	bf00      	nop
 8000e40:	370c      	adds	r7, #12
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr

08000e4a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	b083      	sub	sp, #12
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
 8000e52:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	689b      	ldr	r3, [r3, #8]
 8000e58:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	431a      	orrs	r2, r3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	609a      	str	r2, [r3, #8]
}
 8000e64:	bf00      	nop
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	689b      	ldr	r3, [r3, #8]
 8000e7c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b087      	sub	sp, #28
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	60f8      	str	r0, [r7, #12]
 8000e94:	60b9      	str	r1, [r7, #8]
 8000e96:	607a      	str	r2, [r7, #4]
 8000e98:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	3360      	adds	r3, #96	@ 0x60
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	4413      	add	r3, r2
 8000ea6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	4b08      	ldr	r3, [pc, #32]	@ (8000ed0 <LL_ADC_SetOffset+0x44>)
 8000eae:	4013      	ands	r3, r2
 8000eb0:	687a      	ldr	r2, [r7, #4]
 8000eb2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8000eb6:	683a      	ldr	r2, [r7, #0]
 8000eb8:	430a      	orrs	r2, r1
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000ec4:	bf00      	nop
 8000ec6:	371c      	adds	r7, #28
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr
 8000ed0:	03fff000 	.word	0x03fff000

08000ed4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	3360      	adds	r3, #96	@ 0x60
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	4413      	add	r3, r2
 8000eea:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3714      	adds	r7, #20
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b087      	sub	sp, #28
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	3360      	adds	r3, #96	@ 0x60
 8000f10:	461a      	mov	r2, r3
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	4413      	add	r3, r2
 8000f18:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	431a      	orrs	r2, r3
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000f2a:	bf00      	nop
 8000f2c:	371c      	adds	r7, #28
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr

08000f36 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000f36:	b480      	push	{r7}
 8000f38:	b083      	sub	sp, #12
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	68db      	ldr	r3, [r3, #12]
 8000f42:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d101      	bne.n	8000f4e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e000      	b.n	8000f50 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000f4e:	2300      	movs	r3, #0
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr

08000f5c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b087      	sub	sp, #28
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	60f8      	str	r0, [r7, #12]
 8000f64:	60b9      	str	r1, [r7, #8]
 8000f66:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	3330      	adds	r3, #48	@ 0x30
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	0a1b      	lsrs	r3, r3, #8
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	f003 030c 	and.w	r3, r3, #12
 8000f78:	4413      	add	r3, r2
 8000f7a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	f003 031f 	and.w	r3, r3, #31
 8000f86:	211f      	movs	r1, #31
 8000f88:	fa01 f303 	lsl.w	r3, r1, r3
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	401a      	ands	r2, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	0e9b      	lsrs	r3, r3, #26
 8000f94:	f003 011f 	and.w	r1, r3, #31
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	f003 031f 	and.w	r3, r3, #31
 8000f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa2:	431a      	orrs	r2, r3
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000fa8:	bf00      	nop
 8000faa:	371c      	adds	r7, #28
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b087      	sub	sp, #28
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	3314      	adds	r3, #20
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	0e5b      	lsrs	r3, r3, #25
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	f003 0304 	and.w	r3, r3, #4
 8000fd0:	4413      	add	r3, r2
 8000fd2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	0d1b      	lsrs	r3, r3, #20
 8000fdc:	f003 031f 	and.w	r3, r3, #31
 8000fe0:	2107      	movs	r1, #7
 8000fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe6:	43db      	mvns	r3, r3
 8000fe8:	401a      	ands	r2, r3
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	0d1b      	lsrs	r3, r3, #20
 8000fee:	f003 031f 	and.w	r3, r3, #31
 8000ff2:	6879      	ldr	r1, [r7, #4]
 8000ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff8:	431a      	orrs	r2, r3
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000ffe:	bf00      	nop
 8001000:	371c      	adds	r7, #28
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
	...

0800100c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800100c:	b480      	push	{r7}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001024:	43db      	mvns	r3, r3
 8001026:	401a      	ands	r2, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f003 0318 	and.w	r3, r3, #24
 800102e:	4908      	ldr	r1, [pc, #32]	@ (8001050 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001030:	40d9      	lsrs	r1, r3
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	400b      	ands	r3, r1
 8001036:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800103a:	431a      	orrs	r2, r3
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001042:	bf00      	nop
 8001044:	3714      	adds	r7, #20
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	0007ffff 	.word	0x0007ffff

08001054 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	f003 031f 	and.w	r3, r3, #31
}
 8001064:	4618      	mov	r0, r3
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr

08001070 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	689b      	ldr	r3, [r3, #8]
 800107c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001080:	4618      	mov	r0, r3
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800109c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80010a0:	687a      	ldr	r2, [r7, #4]
 80010a2:	6093      	str	r3, [r2, #8]
}
 80010a4:	bf00      	nop
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80010c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80010c4:	d101      	bne.n	80010ca <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80010c6:	2301      	movs	r3, #1
 80010c8:	e000      	b.n	80010cc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80010ca:	2300      	movs	r3, #0
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80010e8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80010ec:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80010f4:	bf00      	nop
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr

08001100 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001110:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001114:	d101      	bne.n	800111a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001116:	2301      	movs	r3, #1
 8001118:	e000      	b.n	800111c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800111a:	2300      	movs	r3, #0
}
 800111c:	4618      	mov	r0, r3
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001138:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800113c:	f043 0201 	orr.w	r2, r3, #1
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001144:	bf00      	nop
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	f003 0301 	and.w	r3, r3, #1
 8001160:	2b01      	cmp	r3, #1
 8001162:	d101      	bne.n	8001168 <LL_ADC_IsEnabled+0x18>
 8001164:	2301      	movs	r3, #1
 8001166:	e000      	b.n	800116a <LL_ADC_IsEnabled+0x1a>
 8001168:	2300      	movs	r3, #0
}
 800116a:	4618      	mov	r0, r3
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr

08001176 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001176:	b480      	push	{r7}
 8001178:	b083      	sub	sp, #12
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001186:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800118a:	f043 0204 	orr.w	r2, r3, #4
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001192:	bf00      	nop
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr

0800119e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800119e:	b480      	push	{r7}
 80011a0:	b083      	sub	sp, #12
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	f003 0304 	and.w	r3, r3, #4
 80011ae:	2b04      	cmp	r3, #4
 80011b0:	d101      	bne.n	80011b6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80011b2:	2301      	movs	r3, #1
 80011b4:	e000      	b.n	80011b8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80011b6:	2300      	movs	r3, #0
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	f003 0308 	and.w	r3, r3, #8
 80011d4:	2b08      	cmp	r3, #8
 80011d6:	d101      	bne.n	80011dc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80011d8:	2301      	movs	r3, #1
 80011da:	e000      	b.n	80011de <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80011dc:	2300      	movs	r3, #0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
	...

080011ec <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80011ec:	b590      	push	{r4, r7, lr}
 80011ee:	b089      	sub	sp, #36	@ 0x24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011f4:	2300      	movs	r3, #0
 80011f6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d101      	bne.n	8001206 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e130      	b.n	8001468 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	691b      	ldr	r3, [r3, #16]
 800120a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001210:	2b00      	cmp	r3, #0
 8001212:	d109      	bne.n	8001228 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f7ff fbcf 	bl	80009b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2200      	movs	r2, #0
 800121e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2200      	movs	r2, #0
 8001224:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff ff3f 	bl	80010b0 <LL_ADC_IsDeepPowerDownEnabled>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d004      	beq.n	8001242 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff ff25 	bl	800108c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff ff5a 	bl	8001100 <LL_ADC_IsInternalRegulatorEnabled>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d115      	bne.n	800127e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff ff3e 	bl	80010d8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800125c:	4b84      	ldr	r3, [pc, #528]	@ (8001470 <HAL_ADC_Init+0x284>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	099b      	lsrs	r3, r3, #6
 8001262:	4a84      	ldr	r2, [pc, #528]	@ (8001474 <HAL_ADC_Init+0x288>)
 8001264:	fba2 2303 	umull	r2, r3, r2, r3
 8001268:	099b      	lsrs	r3, r3, #6
 800126a:	3301      	adds	r3, #1
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001270:	e002      	b.n	8001278 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	3b01      	subs	r3, #1
 8001276:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d1f9      	bne.n	8001272 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff ff3c 	bl	8001100 <LL_ADC_IsInternalRegulatorEnabled>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d10d      	bne.n	80012aa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001292:	f043 0210 	orr.w	r2, r3, #16
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800129e:	f043 0201 	orr.w	r2, r3, #1
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff ff75 	bl	800119e <LL_ADC_REG_IsConversionOngoing>
 80012b4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012ba:	f003 0310 	and.w	r3, r3, #16
 80012be:	2b00      	cmp	r3, #0
 80012c0:	f040 80c9 	bne.w	8001456 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	f040 80c5 	bne.w	8001456 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012d0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80012d4:	f043 0202 	orr.w	r2, r3, #2
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff ff35 	bl	8001150 <LL_ADC_IsEnabled>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d115      	bne.n	8001318 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80012ec:	4862      	ldr	r0, [pc, #392]	@ (8001478 <HAL_ADC_Init+0x28c>)
 80012ee:	f7ff ff2f 	bl	8001150 <LL_ADC_IsEnabled>
 80012f2:	4604      	mov	r4, r0
 80012f4:	4861      	ldr	r0, [pc, #388]	@ (800147c <HAL_ADC_Init+0x290>)
 80012f6:	f7ff ff2b 	bl	8001150 <LL_ADC_IsEnabled>
 80012fa:	4603      	mov	r3, r0
 80012fc:	431c      	orrs	r4, r3
 80012fe:	4860      	ldr	r0, [pc, #384]	@ (8001480 <HAL_ADC_Init+0x294>)
 8001300:	f7ff ff26 	bl	8001150 <LL_ADC_IsEnabled>
 8001304:	4603      	mov	r3, r0
 8001306:	4323      	orrs	r3, r4
 8001308:	2b00      	cmp	r3, #0
 800130a:	d105      	bne.n	8001318 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	4619      	mov	r1, r3
 8001312:	485c      	ldr	r0, [pc, #368]	@ (8001484 <HAL_ADC_Init+0x298>)
 8001314:	f7ff fd86 	bl	8000e24 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	7e5b      	ldrb	r3, [r3, #25]
 800131c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001322:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001328:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800132e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001336:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001338:	4313      	orrs	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001342:	2b01      	cmp	r3, #1
 8001344:	d106      	bne.n	8001354 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800134a:	3b01      	subs	r3, #1
 800134c:	045b      	lsls	r3, r3, #17
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	4313      	orrs	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001358:	2b00      	cmp	r3, #0
 800135a:	d009      	beq.n	8001370 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001360:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001368:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	4313      	orrs	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	68da      	ldr	r2, [r3, #12]
 8001376:	4b44      	ldr	r3, [pc, #272]	@ (8001488 <HAL_ADC_Init+0x29c>)
 8001378:	4013      	ands	r3, r2
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	6812      	ldr	r2, [r2, #0]
 800137e:	69b9      	ldr	r1, [r7, #24]
 8001380:	430b      	orrs	r3, r1
 8001382:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff ff1b 	bl	80011c4 <LL_ADC_INJ_IsConversionOngoing>
 800138e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d13d      	bne.n	8001412 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d13a      	bne.n	8001412 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80013a0:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80013a8:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80013aa:	4313      	orrs	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80013b8:	f023 0302 	bic.w	r3, r3, #2
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	6812      	ldr	r2, [r2, #0]
 80013c0:	69b9      	ldr	r1, [r7, #24]
 80013c2:	430b      	orrs	r3, r1
 80013c4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d118      	bne.n	8001402 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	691b      	ldr	r3, [r3, #16]
 80013d6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80013da:	f023 0304 	bic.w	r3, r3, #4
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80013e6:	4311      	orrs	r1, r2
 80013e8:	687a      	ldr	r2, [r7, #4]
 80013ea:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80013ec:	4311      	orrs	r1, r2
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80013f2:	430a      	orrs	r2, r1
 80013f4:	431a      	orrs	r2, r3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f042 0201 	orr.w	r2, r2, #1
 80013fe:	611a      	str	r2, [r3, #16]
 8001400:	e007      	b.n	8001412 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	691a      	ldr	r2, [r3, #16]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f022 0201 	bic.w	r2, r2, #1
 8001410:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	691b      	ldr	r3, [r3, #16]
 8001416:	2b01      	cmp	r3, #1
 8001418:	d10c      	bne.n	8001434 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001420:	f023 010f 	bic.w	r1, r3, #15
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	69db      	ldr	r3, [r3, #28]
 8001428:	1e5a      	subs	r2, r3, #1
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	430a      	orrs	r2, r1
 8001430:	631a      	str	r2, [r3, #48]	@ 0x30
 8001432:	e007      	b.n	8001444 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f022 020f 	bic.w	r2, r2, #15
 8001442:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001448:	f023 0303 	bic.w	r3, r3, #3
 800144c:	f043 0201 	orr.w	r2, r3, #1
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	655a      	str	r2, [r3, #84]	@ 0x54
 8001454:	e007      	b.n	8001466 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800145a:	f043 0210 	orr.w	r2, r3, #16
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001466:	7ffb      	ldrb	r3, [r7, #31]
}
 8001468:	4618      	mov	r0, r3
 800146a:	3724      	adds	r7, #36	@ 0x24
 800146c:	46bd      	mov	sp, r7
 800146e:	bd90      	pop	{r4, r7, pc}
 8001470:	20000000 	.word	0x20000000
 8001474:	053e2d63 	.word	0x053e2d63
 8001478:	50040000 	.word	0x50040000
 800147c:	50040100 	.word	0x50040100
 8001480:	50040200 	.word	0x50040200
 8001484:	50040300 	.word	0x50040300
 8001488:	fff0c007 	.word	0xfff0c007

0800148c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b086      	sub	sp, #24
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001494:	4857      	ldr	r0, [pc, #348]	@ (80015f4 <HAL_ADC_Start+0x168>)
 8001496:	f7ff fddd 	bl	8001054 <LL_ADC_GetMultimode>
 800149a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff fe7c 	bl	800119e <LL_ADC_REG_IsConversionOngoing>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	f040 809c 	bne.w	80015e6 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d101      	bne.n	80014bc <HAL_ADC_Start+0x30>
 80014b8:	2302      	movs	r3, #2
 80014ba:	e097      	b.n	80015ec <HAL_ADC_Start+0x160>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2201      	movs	r2, #1
 80014c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f000 fd73 	bl	8001fb0 <ADC_Enable>
 80014ca:	4603      	mov	r3, r0
 80014cc:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80014ce:	7dfb      	ldrb	r3, [r7, #23]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	f040 8083 	bne.w	80015dc <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014da:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80014de:	f023 0301 	bic.w	r3, r3, #1
 80014e2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a42      	ldr	r2, [pc, #264]	@ (80015f8 <HAL_ADC_Start+0x16c>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d002      	beq.n	80014fa <HAL_ADC_Start+0x6e>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	e000      	b.n	80014fc <HAL_ADC_Start+0x70>
 80014fa:	4b40      	ldr	r3, [pc, #256]	@ (80015fc <HAL_ADC_Start+0x170>)
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	6812      	ldr	r2, [r2, #0]
 8001500:	4293      	cmp	r3, r2
 8001502:	d002      	beq.n	800150a <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d105      	bne.n	8001516 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800150e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800151a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800151e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001522:	d106      	bne.n	8001532 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001528:	f023 0206 	bic.w	r2, r3, #6
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	659a      	str	r2, [r3, #88]	@ 0x58
 8001530:	e002      	b.n	8001538 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2200      	movs	r2, #0
 8001536:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	221c      	movs	r2, #28
 800153e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2200      	movs	r2, #0
 8001544:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a2a      	ldr	r2, [pc, #168]	@ (80015f8 <HAL_ADC_Start+0x16c>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d002      	beq.n	8001558 <HAL_ADC_Start+0xcc>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	e000      	b.n	800155a <HAL_ADC_Start+0xce>
 8001558:	4b28      	ldr	r3, [pc, #160]	@ (80015fc <HAL_ADC_Start+0x170>)
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	6812      	ldr	r2, [r2, #0]
 800155e:	4293      	cmp	r3, r2
 8001560:	d008      	beq.n	8001574 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d005      	beq.n	8001574 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	2b05      	cmp	r3, #5
 800156c:	d002      	beq.n	8001574 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	2b09      	cmp	r3, #9
 8001572:	d114      	bne.n	800159e <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	68db      	ldr	r3, [r3, #12]
 800157a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d007      	beq.n	8001592 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001586:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800158a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4618      	mov	r0, r3
 8001598:	f7ff fded 	bl	8001176 <LL_ADC_REG_StartConversion>
 800159c:	e025      	b.n	80015ea <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015a2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a12      	ldr	r2, [pc, #72]	@ (80015f8 <HAL_ADC_Start+0x16c>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d002      	beq.n	80015ba <HAL_ADC_Start+0x12e>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	e000      	b.n	80015bc <HAL_ADC_Start+0x130>
 80015ba:	4b10      	ldr	r3, [pc, #64]	@ (80015fc <HAL_ADC_Start+0x170>)
 80015bc:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	68db      	ldr	r3, [r3, #12]
 80015c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d00f      	beq.n	80015ea <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015ce:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80015d2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	655a      	str	r2, [r3, #84]	@ 0x54
 80015da:	e006      	b.n	80015ea <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2200      	movs	r2, #0
 80015e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80015e4:	e001      	b.n	80015ea <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80015e6:	2302      	movs	r3, #2
 80015e8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80015ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3718      	adds	r7, #24
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	50040300 	.word	0x50040300
 80015f8:	50040100 	.word	0x50040100
 80015fc:	50040000 	.word	0x50040000

08001600 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b088      	sub	sp, #32
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800160a:	4866      	ldr	r0, [pc, #408]	@ (80017a4 <HAL_ADC_PollForConversion+0x1a4>)
 800160c:	f7ff fd22 	bl	8001054 <LL_ADC_GetMultimode>
 8001610:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	695b      	ldr	r3, [r3, #20]
 8001616:	2b08      	cmp	r3, #8
 8001618:	d102      	bne.n	8001620 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800161a:	2308      	movs	r3, #8
 800161c:	61fb      	str	r3, [r7, #28]
 800161e:	e02a      	b.n	8001676 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d005      	beq.n	8001632 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	2b05      	cmp	r3, #5
 800162a:	d002      	beq.n	8001632 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	2b09      	cmp	r3, #9
 8001630:	d111      	bne.n	8001656 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	f003 0301 	and.w	r3, r3, #1
 800163c:	2b00      	cmp	r3, #0
 800163e:	d007      	beq.n	8001650 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001644:	f043 0220 	orr.w	r2, r3, #32
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e0a4      	b.n	800179a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001650:	2304      	movs	r3, #4
 8001652:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001654:	e00f      	b.n	8001676 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001656:	4853      	ldr	r0, [pc, #332]	@ (80017a4 <HAL_ADC_PollForConversion+0x1a4>)
 8001658:	f7ff fd0a 	bl	8001070 <LL_ADC_GetMultiDMATransfer>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d007      	beq.n	8001672 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001666:	f043 0220 	orr.w	r2, r3, #32
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e093      	b.n	800179a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001672:	2304      	movs	r3, #4
 8001674:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001676:	f7ff fbc9 	bl	8000e0c <HAL_GetTick>
 800167a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800167c:	e021      	b.n	80016c2 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001684:	d01d      	beq.n	80016c2 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001686:	f7ff fbc1 	bl	8000e0c <HAL_GetTick>
 800168a:	4602      	mov	r2, r0
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	683a      	ldr	r2, [r7, #0]
 8001692:	429a      	cmp	r2, r3
 8001694:	d302      	bcc.n	800169c <HAL_ADC_PollForConversion+0x9c>
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d112      	bne.n	80016c2 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	4013      	ands	r3, r2
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d10b      	bne.n	80016c2 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016ae:	f043 0204 	orr.w	r2, r3, #4
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2200      	movs	r2, #0
 80016ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e06b      	b.n	800179a <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	4013      	ands	r3, r2
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d0d6      	beq.n	800167e <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016d4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff fc28 	bl	8000f36 <LL_ADC_REG_IsTriggerSourceSWStart>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d01c      	beq.n	8001726 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	7e5b      	ldrb	r3, [r3, #25]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d118      	bne.n	8001726 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0308 	and.w	r3, r3, #8
 80016fe:	2b08      	cmp	r3, #8
 8001700:	d111      	bne.n	8001726 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001706:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001712:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d105      	bne.n	8001726 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800171e:	f043 0201 	orr.w	r2, r3, #1
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a1f      	ldr	r2, [pc, #124]	@ (80017a8 <HAL_ADC_PollForConversion+0x1a8>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d002      	beq.n	8001736 <HAL_ADC_PollForConversion+0x136>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	e000      	b.n	8001738 <HAL_ADC_PollForConversion+0x138>
 8001736:	4b1d      	ldr	r3, [pc, #116]	@ (80017ac <HAL_ADC_PollForConversion+0x1ac>)
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	6812      	ldr	r2, [r2, #0]
 800173c:	4293      	cmp	r3, r2
 800173e:	d008      	beq.n	8001752 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d005      	beq.n	8001752 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	2b05      	cmp	r3, #5
 800174a:	d002      	beq.n	8001752 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	2b09      	cmp	r3, #9
 8001750:	d104      	bne.n	800175c <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	61bb      	str	r3, [r7, #24]
 800175a:	e00c      	b.n	8001776 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a11      	ldr	r2, [pc, #68]	@ (80017a8 <HAL_ADC_PollForConversion+0x1a8>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d002      	beq.n	800176c <HAL_ADC_PollForConversion+0x16c>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	e000      	b.n	800176e <HAL_ADC_PollForConversion+0x16e>
 800176c:	4b0f      	ldr	r3, [pc, #60]	@ (80017ac <HAL_ADC_PollForConversion+0x1ac>)
 800176e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	2b08      	cmp	r3, #8
 800177a:	d104      	bne.n	8001786 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2208      	movs	r2, #8
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	e008      	b.n	8001798 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d103      	bne.n	8001798 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	220c      	movs	r2, #12
 8001796:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001798:	2300      	movs	r3, #0
}
 800179a:	4618      	mov	r0, r3
 800179c:	3720      	adds	r7, #32
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	50040300 	.word	0x50040300
 80017a8:	50040100 	.word	0x50040100
 80017ac:	50040000 	.word	0x50040000

080017b0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80017be:	4618      	mov	r0, r3
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
	...

080017cc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b0b6      	sub	sp, #216	@ 0xd8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017d6:	2300      	movs	r3, #0
 80017d8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80017dc:	2300      	movs	r3, #0
 80017de:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d101      	bne.n	80017ee <HAL_ADC_ConfigChannel+0x22>
 80017ea:	2302      	movs	r3, #2
 80017ec:	e3c9      	b.n	8001f82 <HAL_ADC_ConfigChannel+0x7b6>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2201      	movs	r2, #1
 80017f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7ff fccf 	bl	800119e <LL_ADC_REG_IsConversionOngoing>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	f040 83aa 	bne.w	8001f5c <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	2b05      	cmp	r3, #5
 8001816:	d824      	bhi.n	8001862 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	3b02      	subs	r3, #2
 800181e:	2b03      	cmp	r3, #3
 8001820:	d81b      	bhi.n	800185a <HAL_ADC_ConfigChannel+0x8e>
 8001822:	a201      	add	r2, pc, #4	@ (adr r2, 8001828 <HAL_ADC_ConfigChannel+0x5c>)
 8001824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001828:	08001839 	.word	0x08001839
 800182c:	08001841 	.word	0x08001841
 8001830:	08001849 	.word	0x08001849
 8001834:	08001851 	.word	0x08001851
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001838:	230c      	movs	r3, #12
 800183a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800183e:	e010      	b.n	8001862 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001840:	2312      	movs	r3, #18
 8001842:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001846:	e00c      	b.n	8001862 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001848:	2318      	movs	r3, #24
 800184a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800184e:	e008      	b.n	8001862 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001850:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001854:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001858:	e003      	b.n	8001862 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800185a:	2306      	movs	r3, #6
 800185c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001860:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6818      	ldr	r0, [r3, #0]
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	461a      	mov	r2, r3
 800186c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001870:	f7ff fb74 	bl	8000f5c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff fc90 	bl	800119e <LL_ADC_REG_IsConversionOngoing>
 800187e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff fc9c 	bl	80011c4 <LL_ADC_INJ_IsConversionOngoing>
 800188c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001890:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001894:	2b00      	cmp	r3, #0
 8001896:	f040 81a4 	bne.w	8001be2 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800189a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800189e:	2b00      	cmp	r3, #0
 80018a0:	f040 819f 	bne.w	8001be2 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6818      	ldr	r0, [r3, #0]
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	6819      	ldr	r1, [r3, #0]
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	461a      	mov	r2, r3
 80018b2:	f7ff fb7f 	bl	8000fb4 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	695a      	ldr	r2, [r3, #20]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	08db      	lsrs	r3, r3, #3
 80018c2:	f003 0303 	and.w	r3, r3, #3
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	691b      	ldr	r3, [r3, #16]
 80018d4:	2b04      	cmp	r3, #4
 80018d6:	d00a      	beq.n	80018ee <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6818      	ldr	r0, [r3, #0]
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	6919      	ldr	r1, [r3, #16]
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80018e8:	f7ff fad0 	bl	8000e8c <LL_ADC_SetOffset>
 80018ec:	e179      	b.n	8001be2 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2100      	movs	r1, #0
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff faed 	bl	8000ed4 <LL_ADC_GetOffsetChannel>
 80018fa:	4603      	mov	r3, r0
 80018fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001900:	2b00      	cmp	r3, #0
 8001902:	d10a      	bne.n	800191a <HAL_ADC_ConfigChannel+0x14e>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2100      	movs	r1, #0
 800190a:	4618      	mov	r0, r3
 800190c:	f7ff fae2 	bl	8000ed4 <LL_ADC_GetOffsetChannel>
 8001910:	4603      	mov	r3, r0
 8001912:	0e9b      	lsrs	r3, r3, #26
 8001914:	f003 021f 	and.w	r2, r3, #31
 8001918:	e01e      	b.n	8001958 <HAL_ADC_ConfigChannel+0x18c>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2100      	movs	r1, #0
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff fad7 	bl	8000ed4 <LL_ADC_GetOffsetChannel>
 8001926:	4603      	mov	r3, r0
 8001928:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800192c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001930:	fa93 f3a3 	rbit	r3, r3
 8001934:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001938:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800193c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001940:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001944:	2b00      	cmp	r3, #0
 8001946:	d101      	bne.n	800194c <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001948:	2320      	movs	r3, #32
 800194a:	e004      	b.n	8001956 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 800194c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001950:	fab3 f383 	clz	r3, r3
 8001954:	b2db      	uxtb	r3, r3
 8001956:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001960:	2b00      	cmp	r3, #0
 8001962:	d105      	bne.n	8001970 <HAL_ADC_ConfigChannel+0x1a4>
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	0e9b      	lsrs	r3, r3, #26
 800196a:	f003 031f 	and.w	r3, r3, #31
 800196e:	e018      	b.n	80019a2 <HAL_ADC_ConfigChannel+0x1d6>
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001978:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800197c:	fa93 f3a3 	rbit	r3, r3
 8001980:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8001984:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001988:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800198c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d101      	bne.n	8001998 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8001994:	2320      	movs	r3, #32
 8001996:	e004      	b.n	80019a2 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001998:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800199c:	fab3 f383 	clz	r3, r3
 80019a0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d106      	bne.n	80019b4 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2200      	movs	r2, #0
 80019ac:	2100      	movs	r1, #0
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7ff faa6 	bl	8000f00 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2101      	movs	r1, #1
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff fa8a 	bl	8000ed4 <LL_ADC_GetOffsetChannel>
 80019c0:	4603      	mov	r3, r0
 80019c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d10a      	bne.n	80019e0 <HAL_ADC_ConfigChannel+0x214>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2101      	movs	r1, #1
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff fa7f 	bl	8000ed4 <LL_ADC_GetOffsetChannel>
 80019d6:	4603      	mov	r3, r0
 80019d8:	0e9b      	lsrs	r3, r3, #26
 80019da:	f003 021f 	and.w	r2, r3, #31
 80019de:	e01e      	b.n	8001a1e <HAL_ADC_ConfigChannel+0x252>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2101      	movs	r1, #1
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff fa74 	bl	8000ed4 <LL_ADC_GetOffsetChannel>
 80019ec:	4603      	mov	r3, r0
 80019ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80019f6:	fa93 f3a3 	rbit	r3, r3
 80019fa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80019fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001a02:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8001a06:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d101      	bne.n	8001a12 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8001a0e:	2320      	movs	r3, #32
 8001a10:	e004      	b.n	8001a1c <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8001a12:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001a16:	fab3 f383 	clz	r3, r3
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d105      	bne.n	8001a36 <HAL_ADC_ConfigChannel+0x26a>
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	0e9b      	lsrs	r3, r3, #26
 8001a30:	f003 031f 	and.w	r3, r3, #31
 8001a34:	e018      	b.n	8001a68 <HAL_ADC_ConfigChannel+0x29c>
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a3e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001a42:	fa93 f3a3 	rbit	r3, r3
 8001a46:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8001a4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001a4e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8001a52:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d101      	bne.n	8001a5e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8001a5a:	2320      	movs	r3, #32
 8001a5c:	e004      	b.n	8001a68 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8001a5e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001a62:	fab3 f383 	clz	r3, r3
 8001a66:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d106      	bne.n	8001a7a <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2200      	movs	r2, #0
 8001a72:	2101      	movs	r1, #1
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff fa43 	bl	8000f00 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2102      	movs	r1, #2
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff fa27 	bl	8000ed4 <LL_ADC_GetOffsetChannel>
 8001a86:	4603      	mov	r3, r0
 8001a88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d10a      	bne.n	8001aa6 <HAL_ADC_ConfigChannel+0x2da>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2102      	movs	r1, #2
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7ff fa1c 	bl	8000ed4 <LL_ADC_GetOffsetChannel>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	0e9b      	lsrs	r3, r3, #26
 8001aa0:	f003 021f 	and.w	r2, r3, #31
 8001aa4:	e01e      	b.n	8001ae4 <HAL_ADC_ConfigChannel+0x318>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	2102      	movs	r1, #2
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff fa11 	bl	8000ed4 <LL_ADC_GetOffsetChannel>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001abc:	fa93 f3a3 	rbit	r3, r3
 8001ac0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8001ac4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001ac8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8001acc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d101      	bne.n	8001ad8 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8001ad4:	2320      	movs	r3, #32
 8001ad6:	e004      	b.n	8001ae2 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8001ad8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001adc:	fab3 f383 	clz	r3, r3
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d105      	bne.n	8001afc <HAL_ADC_ConfigChannel+0x330>
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	0e9b      	lsrs	r3, r3, #26
 8001af6:	f003 031f 	and.w	r3, r3, #31
 8001afa:	e014      	b.n	8001b26 <HAL_ADC_ConfigChannel+0x35a>
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b02:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001b04:	fa93 f3a3 	rbit	r3, r3
 8001b08:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8001b0a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001b0c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8001b10:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d101      	bne.n	8001b1c <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8001b18:	2320      	movs	r3, #32
 8001b1a:	e004      	b.n	8001b26 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8001b1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001b20:	fab3 f383 	clz	r3, r3
 8001b24:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d106      	bne.n	8001b38 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	2102      	movs	r1, #2
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7ff f9e4 	bl	8000f00 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2103      	movs	r1, #3
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7ff f9c8 	bl	8000ed4 <LL_ADC_GetOffsetChannel>
 8001b44:	4603      	mov	r3, r0
 8001b46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d10a      	bne.n	8001b64 <HAL_ADC_ConfigChannel+0x398>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2103      	movs	r1, #3
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff f9bd 	bl	8000ed4 <LL_ADC_GetOffsetChannel>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	0e9b      	lsrs	r3, r3, #26
 8001b5e:	f003 021f 	and.w	r2, r3, #31
 8001b62:	e017      	b.n	8001b94 <HAL_ADC_ConfigChannel+0x3c8>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2103      	movs	r1, #3
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff f9b2 	bl	8000ed4 <LL_ADC_GetOffsetChannel>
 8001b70:	4603      	mov	r3, r0
 8001b72:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b74:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001b76:	fa93 f3a3 	rbit	r3, r3
 8001b7a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001b7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001b7e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8001b80:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d101      	bne.n	8001b8a <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8001b86:	2320      	movs	r3, #32
 8001b88:	e003      	b.n	8001b92 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8001b8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001b8c:	fab3 f383 	clz	r3, r3
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d105      	bne.n	8001bac <HAL_ADC_ConfigChannel+0x3e0>
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	0e9b      	lsrs	r3, r3, #26
 8001ba6:	f003 031f 	and.w	r3, r3, #31
 8001baa:	e011      	b.n	8001bd0 <HAL_ADC_ConfigChannel+0x404>
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001bb4:	fa93 f3a3 	rbit	r3, r3
 8001bb8:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8001bba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001bbc:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8001bbe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d101      	bne.n	8001bc8 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001bc4:	2320      	movs	r3, #32
 8001bc6:	e003      	b.n	8001bd0 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001bc8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001bca:	fab3 f383 	clz	r3, r3
 8001bce:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d106      	bne.n	8001be2 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	2103      	movs	r1, #3
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff f98f 	bl	8000f00 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff fab2 	bl	8001150 <LL_ADC_IsEnabled>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	f040 8140 	bne.w	8001e74 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6818      	ldr	r0, [r3, #0]
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	6819      	ldr	r1, [r3, #0]
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	461a      	mov	r2, r3
 8001c02:	f7ff fa03 	bl	800100c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	4a8f      	ldr	r2, [pc, #572]	@ (8001e48 <HAL_ADC_ConfigChannel+0x67c>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	f040 8131 	bne.w	8001e74 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d10b      	bne.n	8001c3a <HAL_ADC_ConfigChannel+0x46e>
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	0e9b      	lsrs	r3, r3, #26
 8001c28:	3301      	adds	r3, #1
 8001c2a:	f003 031f 	and.w	r3, r3, #31
 8001c2e:	2b09      	cmp	r3, #9
 8001c30:	bf94      	ite	ls
 8001c32:	2301      	movls	r3, #1
 8001c34:	2300      	movhi	r3, #0
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	e019      	b.n	8001c6e <HAL_ADC_ConfigChannel+0x4a2>
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c40:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001c42:	fa93 f3a3 	rbit	r3, r3
 8001c46:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8001c48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c4a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8001c4c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d101      	bne.n	8001c56 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8001c52:	2320      	movs	r3, #32
 8001c54:	e003      	b.n	8001c5e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8001c56:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001c58:	fab3 f383 	clz	r3, r3
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	3301      	adds	r3, #1
 8001c60:	f003 031f 	and.w	r3, r3, #31
 8001c64:	2b09      	cmp	r3, #9
 8001c66:	bf94      	ite	ls
 8001c68:	2301      	movls	r3, #1
 8001c6a:	2300      	movhi	r3, #0
 8001c6c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d079      	beq.n	8001d66 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d107      	bne.n	8001c8e <HAL_ADC_ConfigChannel+0x4c2>
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	0e9b      	lsrs	r3, r3, #26
 8001c84:	3301      	adds	r3, #1
 8001c86:	069b      	lsls	r3, r3, #26
 8001c88:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001c8c:	e015      	b.n	8001cba <HAL_ADC_ConfigChannel+0x4ee>
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001c96:	fa93 f3a3 	rbit	r3, r3
 8001c9a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8001c9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c9e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8001ca0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d101      	bne.n	8001caa <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8001ca6:	2320      	movs	r3, #32
 8001ca8:	e003      	b.n	8001cb2 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8001caa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001cac:	fab3 f383 	clz	r3, r3
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	069b      	lsls	r3, r3, #26
 8001cb6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d109      	bne.n	8001cda <HAL_ADC_ConfigChannel+0x50e>
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	0e9b      	lsrs	r3, r3, #26
 8001ccc:	3301      	adds	r3, #1
 8001cce:	f003 031f 	and.w	r3, r3, #31
 8001cd2:	2101      	movs	r1, #1
 8001cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd8:	e017      	b.n	8001d0a <HAL_ADC_ConfigChannel+0x53e>
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ce2:	fa93 f3a3 	rbit	r3, r3
 8001ce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001ce8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001cea:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8001cec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d101      	bne.n	8001cf6 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8001cf2:	2320      	movs	r3, #32
 8001cf4:	e003      	b.n	8001cfe <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8001cf6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001cf8:	fab3 f383 	clz	r3, r3
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	3301      	adds	r3, #1
 8001d00:	f003 031f 	and.w	r3, r3, #31
 8001d04:	2101      	movs	r1, #1
 8001d06:	fa01 f303 	lsl.w	r3, r1, r3
 8001d0a:	ea42 0103 	orr.w	r1, r2, r3
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d10a      	bne.n	8001d30 <HAL_ADC_ConfigChannel+0x564>
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	0e9b      	lsrs	r3, r3, #26
 8001d20:	3301      	adds	r3, #1
 8001d22:	f003 021f 	and.w	r2, r3, #31
 8001d26:	4613      	mov	r3, r2
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	4413      	add	r3, r2
 8001d2c:	051b      	lsls	r3, r3, #20
 8001d2e:	e018      	b.n	8001d62 <HAL_ADC_ConfigChannel+0x596>
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d38:	fa93 f3a3 	rbit	r3, r3
 8001d3c:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8001d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d40:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8001d42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d101      	bne.n	8001d4c <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8001d48:	2320      	movs	r3, #32
 8001d4a:	e003      	b.n	8001d54 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8001d4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d4e:	fab3 f383 	clz	r3, r3
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	3301      	adds	r3, #1
 8001d56:	f003 021f 	and.w	r2, r3, #31
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	4413      	add	r3, r2
 8001d60:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d62:	430b      	orrs	r3, r1
 8001d64:	e081      	b.n	8001e6a <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d107      	bne.n	8001d82 <HAL_ADC_ConfigChannel+0x5b6>
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	0e9b      	lsrs	r3, r3, #26
 8001d78:	3301      	adds	r3, #1
 8001d7a:	069b      	lsls	r3, r3, #26
 8001d7c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001d80:	e015      	b.n	8001dae <HAL_ADC_ConfigChannel+0x5e2>
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d8a:	fa93 f3a3 	rbit	r3, r3
 8001d8e:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8001d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8001d94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d101      	bne.n	8001d9e <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8001d9a:	2320      	movs	r3, #32
 8001d9c:	e003      	b.n	8001da6 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8001d9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001da0:	fab3 f383 	clz	r3, r3
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	3301      	adds	r3, #1
 8001da8:	069b      	lsls	r3, r3, #26
 8001daa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d109      	bne.n	8001dce <HAL_ADC_ConfigChannel+0x602>
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	0e9b      	lsrs	r3, r3, #26
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	f003 031f 	and.w	r3, r3, #31
 8001dc6:	2101      	movs	r1, #1
 8001dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dcc:	e017      	b.n	8001dfe <HAL_ADC_ConfigChannel+0x632>
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	fa93 f3a3 	rbit	r3, r3
 8001dda:	61bb      	str	r3, [r7, #24]
  return result;
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001de0:	6a3b      	ldr	r3, [r7, #32]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d101      	bne.n	8001dea <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8001de6:	2320      	movs	r3, #32
 8001de8:	e003      	b.n	8001df2 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8001dea:	6a3b      	ldr	r3, [r7, #32]
 8001dec:	fab3 f383 	clz	r3, r3
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	3301      	adds	r3, #1
 8001df4:	f003 031f 	and.w	r3, r3, #31
 8001df8:	2101      	movs	r1, #1
 8001dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8001dfe:	ea42 0103 	orr.w	r1, r2, r3
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d10d      	bne.n	8001e2a <HAL_ADC_ConfigChannel+0x65e>
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	0e9b      	lsrs	r3, r3, #26
 8001e14:	3301      	adds	r3, #1
 8001e16:	f003 021f 	and.w	r2, r3, #31
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	4413      	add	r3, r2
 8001e20:	3b1e      	subs	r3, #30
 8001e22:	051b      	lsls	r3, r3, #20
 8001e24:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001e28:	e01e      	b.n	8001e68 <HAL_ADC_ConfigChannel+0x69c>
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	fa93 f3a3 	rbit	r3, r3
 8001e36:	60fb      	str	r3, [r7, #12]
  return result;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d104      	bne.n	8001e4c <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8001e42:	2320      	movs	r3, #32
 8001e44:	e006      	b.n	8001e54 <HAL_ADC_ConfigChannel+0x688>
 8001e46:	bf00      	nop
 8001e48:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	fab3 f383 	clz	r3, r3
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	3301      	adds	r3, #1
 8001e56:	f003 021f 	and.w	r2, r3, #31
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	4413      	add	r3, r2
 8001e60:	3b1e      	subs	r3, #30
 8001e62:	051b      	lsls	r3, r3, #20
 8001e64:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e68:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001e6a:	683a      	ldr	r2, [r7, #0]
 8001e6c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e6e:	4619      	mov	r1, r3
 8001e70:	f7ff f8a0 	bl	8000fb4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	4b44      	ldr	r3, [pc, #272]	@ (8001f8c <HAL_ADC_ConfigChannel+0x7c0>)
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d07a      	beq.n	8001f76 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e80:	4843      	ldr	r0, [pc, #268]	@ (8001f90 <HAL_ADC_ConfigChannel+0x7c4>)
 8001e82:	f7fe fff5 	bl	8000e70 <LL_ADC_GetCommonPathInternalCh>
 8001e86:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a41      	ldr	r2, [pc, #260]	@ (8001f94 <HAL_ADC_ConfigChannel+0x7c8>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d12c      	bne.n	8001eee <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001e94:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001e98:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d126      	bne.n	8001eee <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a3c      	ldr	r2, [pc, #240]	@ (8001f98 <HAL_ADC_ConfigChannel+0x7cc>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d004      	beq.n	8001eb4 <HAL_ADC_ConfigChannel+0x6e8>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a3b      	ldr	r2, [pc, #236]	@ (8001f9c <HAL_ADC_ConfigChannel+0x7d0>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d15d      	bne.n	8001f70 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001eb4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001eb8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	4834      	ldr	r0, [pc, #208]	@ (8001f90 <HAL_ADC_ConfigChannel+0x7c4>)
 8001ec0:	f7fe ffc3 	bl	8000e4a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ec4:	4b36      	ldr	r3, [pc, #216]	@ (8001fa0 <HAL_ADC_ConfigChannel+0x7d4>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	099b      	lsrs	r3, r3, #6
 8001eca:	4a36      	ldr	r2, [pc, #216]	@ (8001fa4 <HAL_ADC_ConfigChannel+0x7d8>)
 8001ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed0:	099b      	lsrs	r3, r3, #6
 8001ed2:	1c5a      	adds	r2, r3, #1
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	4413      	add	r3, r2
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001ede:	e002      	b.n	8001ee6 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d1f9      	bne.n	8001ee0 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001eec:	e040      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a2d      	ldr	r2, [pc, #180]	@ (8001fa8 <HAL_ADC_ConfigChannel+0x7dc>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d118      	bne.n	8001f2a <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001ef8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001efc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d112      	bne.n	8001f2a <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a23      	ldr	r2, [pc, #140]	@ (8001f98 <HAL_ADC_ConfigChannel+0x7cc>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d004      	beq.n	8001f18 <HAL_ADC_ConfigChannel+0x74c>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a22      	ldr	r2, [pc, #136]	@ (8001f9c <HAL_ADC_ConfigChannel+0x7d0>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d12d      	bne.n	8001f74 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f18:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001f1c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f20:	4619      	mov	r1, r3
 8001f22:	481b      	ldr	r0, [pc, #108]	@ (8001f90 <HAL_ADC_ConfigChannel+0x7c4>)
 8001f24:	f7fe ff91 	bl	8000e4a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f28:	e024      	b.n	8001f74 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a1f      	ldr	r2, [pc, #124]	@ (8001fac <HAL_ADC_ConfigChannel+0x7e0>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d120      	bne.n	8001f76 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001f34:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001f38:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d11a      	bne.n	8001f76 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a14      	ldr	r2, [pc, #80]	@ (8001f98 <HAL_ADC_ConfigChannel+0x7cc>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d115      	bne.n	8001f76 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f4a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001f4e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001f52:	4619      	mov	r1, r3
 8001f54:	480e      	ldr	r0, [pc, #56]	@ (8001f90 <HAL_ADC_ConfigChannel+0x7c4>)
 8001f56:	f7fe ff78 	bl	8000e4a <LL_ADC_SetCommonPathInternalCh>
 8001f5a:	e00c      	b.n	8001f76 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f60:	f043 0220 	orr.w	r2, r3, #32
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8001f6e:	e002      	b.n	8001f76 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f70:	bf00      	nop
 8001f72:	e000      	b.n	8001f76 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f74:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8001f7e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	37d8      	adds	r7, #216	@ 0xd8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	80080000 	.word	0x80080000
 8001f90:	50040300 	.word	0x50040300
 8001f94:	c7520000 	.word	0xc7520000
 8001f98:	50040000 	.word	0x50040000
 8001f9c:	50040200 	.word	0x50040200
 8001fa0:	20000000 	.word	0x20000000
 8001fa4:	053e2d63 	.word	0x053e2d63
 8001fa8:	cb840000 	.word	0xcb840000
 8001fac:	80000001 	.word	0x80000001

08001fb0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7ff f8c5 	bl	8001150 <LL_ADC_IsEnabled>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d169      	bne.n	80020a0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	689a      	ldr	r2, [r3, #8]
 8001fd2:	4b36      	ldr	r3, [pc, #216]	@ (80020ac <ADC_Enable+0xfc>)
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d00d      	beq.n	8001ff6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fde:	f043 0210 	orr.w	r2, r3, #16
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fea:	f043 0201 	orr.w	r2, r3, #1
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e055      	b.n	80020a2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7ff f894 	bl	8001128 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002000:	482b      	ldr	r0, [pc, #172]	@ (80020b0 <ADC_Enable+0x100>)
 8002002:	f7fe ff35 	bl	8000e70 <LL_ADC_GetCommonPathInternalCh>
 8002006:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002008:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800200c:	2b00      	cmp	r3, #0
 800200e:	d013      	beq.n	8002038 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002010:	4b28      	ldr	r3, [pc, #160]	@ (80020b4 <ADC_Enable+0x104>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	099b      	lsrs	r3, r3, #6
 8002016:	4a28      	ldr	r2, [pc, #160]	@ (80020b8 <ADC_Enable+0x108>)
 8002018:	fba2 2303 	umull	r2, r3, r2, r3
 800201c:	099b      	lsrs	r3, r3, #6
 800201e:	1c5a      	adds	r2, r3, #1
 8002020:	4613      	mov	r3, r2
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	4413      	add	r3, r2
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800202a:	e002      	b.n	8002032 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	3b01      	subs	r3, #1
 8002030:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d1f9      	bne.n	800202c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002038:	f7fe fee8 	bl	8000e0c <HAL_GetTick>
 800203c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800203e:	e028      	b.n	8002092 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4618      	mov	r0, r3
 8002046:	f7ff f883 	bl	8001150 <LL_ADC_IsEnabled>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d104      	bne.n	800205a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4618      	mov	r0, r3
 8002056:	f7ff f867 	bl	8001128 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800205a:	f7fe fed7 	bl	8000e0c <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	2b02      	cmp	r3, #2
 8002066:	d914      	bls.n	8002092 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	2b01      	cmp	r3, #1
 8002074:	d00d      	beq.n	8002092 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800207a:	f043 0210 	orr.w	r2, r3, #16
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002086:	f043 0201 	orr.w	r2, r3, #1
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e007      	b.n	80020a2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0301 	and.w	r3, r3, #1
 800209c:	2b01      	cmp	r3, #1
 800209e:	d1cf      	bne.n	8002040 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3710      	adds	r7, #16
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	8000003f 	.word	0x8000003f
 80020b0:	50040300 	.word	0x50040300
 80020b4:	20000000 	.word	0x20000000
 80020b8:	053e2d63 	.word	0x053e2d63

080020bc <LL_ADC_IsEnabled>:
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	f003 0301 	and.w	r3, r3, #1
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d101      	bne.n	80020d4 <LL_ADC_IsEnabled+0x18>
 80020d0:	2301      	movs	r3, #1
 80020d2:	e000      	b.n	80020d6 <LL_ADC_IsEnabled+0x1a>
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr

080020e2 <LL_ADC_REG_IsConversionOngoing>:
{
 80020e2:	b480      	push	{r7}
 80020e4:	b083      	sub	sp, #12
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f003 0304 	and.w	r3, r3, #4
 80020f2:	2b04      	cmp	r3, #4
 80020f4:	d101      	bne.n	80020fa <LL_ADC_REG_IsConversionOngoing+0x18>
 80020f6:	2301      	movs	r3, #1
 80020f8:	e000      	b.n	80020fc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80020fa:	2300      	movs	r3, #0
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002108:	b590      	push	{r4, r7, lr}
 800210a:	b09f      	sub	sp, #124	@ 0x7c
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002112:	2300      	movs	r3, #0
 8002114:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800211e:	2b01      	cmp	r3, #1
 8002120:	d101      	bne.n	8002126 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002122:	2302      	movs	r3, #2
 8002124:	e093      	b.n	800224e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2201      	movs	r2, #1
 800212a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800212e:	2300      	movs	r3, #0
 8002130:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002132:	2300      	movs	r3, #0
 8002134:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a47      	ldr	r2, [pc, #284]	@ (8002258 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d102      	bne.n	8002146 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002140:	4b46      	ldr	r3, [pc, #280]	@ (800225c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002142:	60bb      	str	r3, [r7, #8]
 8002144:	e001      	b.n	800214a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002146:	2300      	movs	r3, #0
 8002148:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d10b      	bne.n	8002168 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002154:	f043 0220 	orr.w	r2, r3, #32
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e072      	b.n	800224e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	4618      	mov	r0, r3
 800216c:	f7ff ffb9 	bl	80020e2 <LL_ADC_REG_IsConversionOngoing>
 8002170:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4618      	mov	r0, r3
 8002178:	f7ff ffb3 	bl	80020e2 <LL_ADC_REG_IsConversionOngoing>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d154      	bne.n	800222c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002182:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002184:	2b00      	cmp	r3, #0
 8002186:	d151      	bne.n	800222c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002188:	4b35      	ldr	r3, [pc, #212]	@ (8002260 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800218a:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d02c      	beq.n	80021ee <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002194:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	6859      	ldr	r1, [r3, #4]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80021a6:	035b      	lsls	r3, r3, #13
 80021a8:	430b      	orrs	r3, r1
 80021aa:	431a      	orrs	r2, r3
 80021ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80021ae:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80021b0:	4829      	ldr	r0, [pc, #164]	@ (8002258 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80021b2:	f7ff ff83 	bl	80020bc <LL_ADC_IsEnabled>
 80021b6:	4604      	mov	r4, r0
 80021b8:	4828      	ldr	r0, [pc, #160]	@ (800225c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80021ba:	f7ff ff7f 	bl	80020bc <LL_ADC_IsEnabled>
 80021be:	4603      	mov	r3, r0
 80021c0:	431c      	orrs	r4, r3
 80021c2:	4828      	ldr	r0, [pc, #160]	@ (8002264 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80021c4:	f7ff ff7a 	bl	80020bc <LL_ADC_IsEnabled>
 80021c8:	4603      	mov	r3, r0
 80021ca:	4323      	orrs	r3, r4
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d137      	bne.n	8002240 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80021d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80021d8:	f023 030f 	bic.w	r3, r3, #15
 80021dc:	683a      	ldr	r2, [r7, #0]
 80021de:	6811      	ldr	r1, [r2, #0]
 80021e0:	683a      	ldr	r2, [r7, #0]
 80021e2:	6892      	ldr	r2, [r2, #8]
 80021e4:	430a      	orrs	r2, r1
 80021e6:	431a      	orrs	r2, r3
 80021e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80021ea:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80021ec:	e028      	b.n	8002240 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80021ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80021f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80021f8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80021fa:	4817      	ldr	r0, [pc, #92]	@ (8002258 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80021fc:	f7ff ff5e 	bl	80020bc <LL_ADC_IsEnabled>
 8002200:	4604      	mov	r4, r0
 8002202:	4816      	ldr	r0, [pc, #88]	@ (800225c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002204:	f7ff ff5a 	bl	80020bc <LL_ADC_IsEnabled>
 8002208:	4603      	mov	r3, r0
 800220a:	431c      	orrs	r4, r3
 800220c:	4815      	ldr	r0, [pc, #84]	@ (8002264 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800220e:	f7ff ff55 	bl	80020bc <LL_ADC_IsEnabled>
 8002212:	4603      	mov	r3, r0
 8002214:	4323      	orrs	r3, r4
 8002216:	2b00      	cmp	r3, #0
 8002218:	d112      	bne.n	8002240 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800221a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002222:	f023 030f 	bic.w	r3, r3, #15
 8002226:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002228:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800222a:	e009      	b.n	8002240 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002230:	f043 0220 	orr.w	r2, r3, #32
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800223e:	e000      	b.n	8002242 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002240:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800224a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800224e:	4618      	mov	r0, r3
 8002250:	377c      	adds	r7, #124	@ 0x7c
 8002252:	46bd      	mov	sp, r7
 8002254:	bd90      	pop	{r4, r7, pc}
 8002256:	bf00      	nop
 8002258:	50040000 	.word	0x50040000
 800225c:	50040100 	.word	0x50040100
 8002260:	50040300 	.word	0x50040300
 8002264:	50040200 	.word	0x50040200

08002268 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002268:	b480      	push	{r7}
 800226a:	b085      	sub	sp, #20
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f003 0307 	and.w	r3, r3, #7
 8002276:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002278:	4b0c      	ldr	r3, [pc, #48]	@ (80022ac <__NVIC_SetPriorityGrouping+0x44>)
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800227e:	68ba      	ldr	r2, [r7, #8]
 8002280:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002284:	4013      	ands	r3, r2
 8002286:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002290:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002294:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002298:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800229a:	4a04      	ldr	r2, [pc, #16]	@ (80022ac <__NVIC_SetPriorityGrouping+0x44>)
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	60d3      	str	r3, [r2, #12]
}
 80022a0:	bf00      	nop
 80022a2:	3714      	adds	r7, #20
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr
 80022ac:	e000ed00 	.word	0xe000ed00

080022b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022b4:	4b04      	ldr	r3, [pc, #16]	@ (80022c8 <__NVIC_GetPriorityGrouping+0x18>)
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	0a1b      	lsrs	r3, r3, #8
 80022ba:	f003 0307 	and.w	r3, r3, #7
}
 80022be:	4618      	mov	r0, r3
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr
 80022c8:	e000ed00 	.word	0xe000ed00

080022cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	4603      	mov	r3, r0
 80022d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	db0b      	blt.n	80022f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022de:	79fb      	ldrb	r3, [r7, #7]
 80022e0:	f003 021f 	and.w	r2, r3, #31
 80022e4:	4907      	ldr	r1, [pc, #28]	@ (8002304 <__NVIC_EnableIRQ+0x38>)
 80022e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ea:	095b      	lsrs	r3, r3, #5
 80022ec:	2001      	movs	r0, #1
 80022ee:	fa00 f202 	lsl.w	r2, r0, r2
 80022f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022f6:	bf00      	nop
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	e000e100 	.word	0xe000e100

08002308 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	4603      	mov	r3, r0
 8002310:	6039      	str	r1, [r7, #0]
 8002312:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002318:	2b00      	cmp	r3, #0
 800231a:	db0a      	blt.n	8002332 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	b2da      	uxtb	r2, r3
 8002320:	490c      	ldr	r1, [pc, #48]	@ (8002354 <__NVIC_SetPriority+0x4c>)
 8002322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002326:	0112      	lsls	r2, r2, #4
 8002328:	b2d2      	uxtb	r2, r2
 800232a:	440b      	add	r3, r1
 800232c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002330:	e00a      	b.n	8002348 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	b2da      	uxtb	r2, r3
 8002336:	4908      	ldr	r1, [pc, #32]	@ (8002358 <__NVIC_SetPriority+0x50>)
 8002338:	79fb      	ldrb	r3, [r7, #7]
 800233a:	f003 030f 	and.w	r3, r3, #15
 800233e:	3b04      	subs	r3, #4
 8002340:	0112      	lsls	r2, r2, #4
 8002342:	b2d2      	uxtb	r2, r2
 8002344:	440b      	add	r3, r1
 8002346:	761a      	strb	r2, [r3, #24]
}
 8002348:	bf00      	nop
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	e000e100 	.word	0xe000e100
 8002358:	e000ed00 	.word	0xe000ed00

0800235c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800235c:	b480      	push	{r7}
 800235e:	b089      	sub	sp, #36	@ 0x24
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f003 0307 	and.w	r3, r3, #7
 800236e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	f1c3 0307 	rsb	r3, r3, #7
 8002376:	2b04      	cmp	r3, #4
 8002378:	bf28      	it	cs
 800237a:	2304      	movcs	r3, #4
 800237c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	3304      	adds	r3, #4
 8002382:	2b06      	cmp	r3, #6
 8002384:	d902      	bls.n	800238c <NVIC_EncodePriority+0x30>
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	3b03      	subs	r3, #3
 800238a:	e000      	b.n	800238e <NVIC_EncodePriority+0x32>
 800238c:	2300      	movs	r3, #0
 800238e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002390:	f04f 32ff 	mov.w	r2, #4294967295
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	fa02 f303 	lsl.w	r3, r2, r3
 800239a:	43da      	mvns	r2, r3
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	401a      	ands	r2, r3
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023a4:	f04f 31ff 	mov.w	r1, #4294967295
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	fa01 f303 	lsl.w	r3, r1, r3
 80023ae:	43d9      	mvns	r1, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023b4:	4313      	orrs	r3, r2
         );
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3724      	adds	r7, #36	@ 0x24
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
	...

080023c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	3b01      	subs	r3, #1
 80023d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023d4:	d301      	bcc.n	80023da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023d6:	2301      	movs	r3, #1
 80023d8:	e00f      	b.n	80023fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023da:	4a0a      	ldr	r2, [pc, #40]	@ (8002404 <SysTick_Config+0x40>)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	3b01      	subs	r3, #1
 80023e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023e2:	210f      	movs	r1, #15
 80023e4:	f04f 30ff 	mov.w	r0, #4294967295
 80023e8:	f7ff ff8e 	bl	8002308 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023ec:	4b05      	ldr	r3, [pc, #20]	@ (8002404 <SysTick_Config+0x40>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023f2:	4b04      	ldr	r3, [pc, #16]	@ (8002404 <SysTick_Config+0x40>)
 80023f4:	2207      	movs	r2, #7
 80023f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	e000e010 	.word	0xe000e010

08002408 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f7ff ff29 	bl	8002268 <__NVIC_SetPriorityGrouping>
}
 8002416:	bf00      	nop
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800241e:	b580      	push	{r7, lr}
 8002420:	b086      	sub	sp, #24
 8002422:	af00      	add	r7, sp, #0
 8002424:	4603      	mov	r3, r0
 8002426:	60b9      	str	r1, [r7, #8]
 8002428:	607a      	str	r2, [r7, #4]
 800242a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800242c:	2300      	movs	r3, #0
 800242e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002430:	f7ff ff3e 	bl	80022b0 <__NVIC_GetPriorityGrouping>
 8002434:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	68b9      	ldr	r1, [r7, #8]
 800243a:	6978      	ldr	r0, [r7, #20]
 800243c:	f7ff ff8e 	bl	800235c <NVIC_EncodePriority>
 8002440:	4602      	mov	r2, r0
 8002442:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002446:	4611      	mov	r1, r2
 8002448:	4618      	mov	r0, r3
 800244a:	f7ff ff5d 	bl	8002308 <__NVIC_SetPriority>
}
 800244e:	bf00      	nop
 8002450:	3718      	adds	r7, #24
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002456:	b580      	push	{r7, lr}
 8002458:	b082      	sub	sp, #8
 800245a:	af00      	add	r7, sp, #0
 800245c:	4603      	mov	r3, r0
 800245e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002460:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff ff31 	bl	80022cc <__NVIC_EnableIRQ>
}
 800246a:	bf00      	nop
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b082      	sub	sp, #8
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f7ff ffa2 	bl	80023c4 <SysTick_Config>
 8002480:	4603      	mov	r3, r0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3708      	adds	r7, #8
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
	...

0800248c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800248c:	b480      	push	{r7}
 800248e:	b087      	sub	sp, #28
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002496:	2300      	movs	r3, #0
 8002498:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800249a:	e17f      	b.n	800279c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	2101      	movs	r1, #1
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	fa01 f303 	lsl.w	r3, r1, r3
 80024a8:	4013      	ands	r3, r2
 80024aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	f000 8171 	beq.w	8002796 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f003 0303 	and.w	r3, r3, #3
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d005      	beq.n	80024cc <HAL_GPIO_Init+0x40>
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f003 0303 	and.w	r3, r3, #3
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d130      	bne.n	800252e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	2203      	movs	r2, #3
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	43db      	mvns	r3, r3
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	4013      	ands	r3, r2
 80024e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	68da      	ldr	r2, [r3, #12]
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	005b      	lsls	r3, r3, #1
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	693a      	ldr	r2, [r7, #16]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	693a      	ldr	r2, [r7, #16]
 80024fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002502:	2201      	movs	r2, #1
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	fa02 f303 	lsl.w	r3, r2, r3
 800250a:	43db      	mvns	r3, r3
 800250c:	693a      	ldr	r2, [r7, #16]
 800250e:	4013      	ands	r3, r2
 8002510:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	091b      	lsrs	r3, r3, #4
 8002518:	f003 0201 	and.w	r2, r3, #1
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	fa02 f303 	lsl.w	r3, r2, r3
 8002522:	693a      	ldr	r2, [r7, #16]
 8002524:	4313      	orrs	r3, r2
 8002526:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f003 0303 	and.w	r3, r3, #3
 8002536:	2b03      	cmp	r3, #3
 8002538:	d118      	bne.n	800256c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800253e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002540:	2201      	movs	r2, #1
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	43db      	mvns	r3, r3
 800254a:	693a      	ldr	r2, [r7, #16]
 800254c:	4013      	ands	r3, r2
 800254e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	08db      	lsrs	r3, r3, #3
 8002556:	f003 0201 	and.w	r2, r3, #1
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	693a      	ldr	r2, [r7, #16]
 8002562:	4313      	orrs	r3, r2
 8002564:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f003 0303 	and.w	r3, r3, #3
 8002574:	2b03      	cmp	r3, #3
 8002576:	d017      	beq.n	80025a8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	2203      	movs	r2, #3
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	43db      	mvns	r3, r3
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	4013      	ands	r3, r2
 800258e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	689a      	ldr	r2, [r3, #8]
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	005b      	lsls	r3, r3, #1
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	693a      	ldr	r2, [r7, #16]
 800259e:	4313      	orrs	r3, r2
 80025a0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	693a      	ldr	r2, [r7, #16]
 80025a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f003 0303 	and.w	r3, r3, #3
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d123      	bne.n	80025fc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	08da      	lsrs	r2, r3, #3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	3208      	adds	r2, #8
 80025bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	f003 0307 	and.w	r3, r3, #7
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	220f      	movs	r2, #15
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	43db      	mvns	r3, r3
 80025d2:	693a      	ldr	r2, [r7, #16]
 80025d4:	4013      	ands	r3, r2
 80025d6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	691a      	ldr	r2, [r3, #16]
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	f003 0307 	and.w	r3, r3, #7
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	693a      	ldr	r2, [r7, #16]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	08da      	lsrs	r2, r3, #3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	3208      	adds	r2, #8
 80025f6:	6939      	ldr	r1, [r7, #16]
 80025f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	2203      	movs	r2, #3
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	43db      	mvns	r3, r3
 800260e:	693a      	ldr	r2, [r7, #16]
 8002610:	4013      	ands	r3, r2
 8002612:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f003 0203 	and.w	r2, r3, #3
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	4313      	orrs	r3, r2
 8002628:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	693a      	ldr	r2, [r7, #16]
 800262e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002638:	2b00      	cmp	r3, #0
 800263a:	f000 80ac 	beq.w	8002796 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800263e:	4b5f      	ldr	r3, [pc, #380]	@ (80027bc <HAL_GPIO_Init+0x330>)
 8002640:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002642:	4a5e      	ldr	r2, [pc, #376]	@ (80027bc <HAL_GPIO_Init+0x330>)
 8002644:	f043 0301 	orr.w	r3, r3, #1
 8002648:	6613      	str	r3, [r2, #96]	@ 0x60
 800264a:	4b5c      	ldr	r3, [pc, #368]	@ (80027bc <HAL_GPIO_Init+0x330>)
 800264c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800264e:	f003 0301 	and.w	r3, r3, #1
 8002652:	60bb      	str	r3, [r7, #8]
 8002654:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002656:	4a5a      	ldr	r2, [pc, #360]	@ (80027c0 <HAL_GPIO_Init+0x334>)
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	089b      	lsrs	r3, r3, #2
 800265c:	3302      	adds	r3, #2
 800265e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002662:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	f003 0303 	and.w	r3, r3, #3
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	220f      	movs	r2, #15
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	43db      	mvns	r3, r3
 8002674:	693a      	ldr	r2, [r7, #16]
 8002676:	4013      	ands	r3, r2
 8002678:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002680:	d025      	beq.n	80026ce <HAL_GPIO_Init+0x242>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a4f      	ldr	r2, [pc, #316]	@ (80027c4 <HAL_GPIO_Init+0x338>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d01f      	beq.n	80026ca <HAL_GPIO_Init+0x23e>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a4e      	ldr	r2, [pc, #312]	@ (80027c8 <HAL_GPIO_Init+0x33c>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d019      	beq.n	80026c6 <HAL_GPIO_Init+0x23a>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a4d      	ldr	r2, [pc, #308]	@ (80027cc <HAL_GPIO_Init+0x340>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d013      	beq.n	80026c2 <HAL_GPIO_Init+0x236>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a4c      	ldr	r2, [pc, #304]	@ (80027d0 <HAL_GPIO_Init+0x344>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d00d      	beq.n	80026be <HAL_GPIO_Init+0x232>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a4b      	ldr	r2, [pc, #300]	@ (80027d4 <HAL_GPIO_Init+0x348>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d007      	beq.n	80026ba <HAL_GPIO_Init+0x22e>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a4a      	ldr	r2, [pc, #296]	@ (80027d8 <HAL_GPIO_Init+0x34c>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d101      	bne.n	80026b6 <HAL_GPIO_Init+0x22a>
 80026b2:	2306      	movs	r3, #6
 80026b4:	e00c      	b.n	80026d0 <HAL_GPIO_Init+0x244>
 80026b6:	2307      	movs	r3, #7
 80026b8:	e00a      	b.n	80026d0 <HAL_GPIO_Init+0x244>
 80026ba:	2305      	movs	r3, #5
 80026bc:	e008      	b.n	80026d0 <HAL_GPIO_Init+0x244>
 80026be:	2304      	movs	r3, #4
 80026c0:	e006      	b.n	80026d0 <HAL_GPIO_Init+0x244>
 80026c2:	2303      	movs	r3, #3
 80026c4:	e004      	b.n	80026d0 <HAL_GPIO_Init+0x244>
 80026c6:	2302      	movs	r3, #2
 80026c8:	e002      	b.n	80026d0 <HAL_GPIO_Init+0x244>
 80026ca:	2301      	movs	r3, #1
 80026cc:	e000      	b.n	80026d0 <HAL_GPIO_Init+0x244>
 80026ce:	2300      	movs	r3, #0
 80026d0:	697a      	ldr	r2, [r7, #20]
 80026d2:	f002 0203 	and.w	r2, r2, #3
 80026d6:	0092      	lsls	r2, r2, #2
 80026d8:	4093      	lsls	r3, r2
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	4313      	orrs	r3, r2
 80026de:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80026e0:	4937      	ldr	r1, [pc, #220]	@ (80027c0 <HAL_GPIO_Init+0x334>)
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	089b      	lsrs	r3, r3, #2
 80026e6:	3302      	adds	r3, #2
 80026e8:	693a      	ldr	r2, [r7, #16]
 80026ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80026ee:	4b3b      	ldr	r3, [pc, #236]	@ (80027dc <HAL_GPIO_Init+0x350>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	43db      	mvns	r3, r3
 80026f8:	693a      	ldr	r2, [r7, #16]
 80026fa:	4013      	ands	r3, r2
 80026fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d003      	beq.n	8002712 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	4313      	orrs	r3, r2
 8002710:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002712:	4a32      	ldr	r2, [pc, #200]	@ (80027dc <HAL_GPIO_Init+0x350>)
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002718:	4b30      	ldr	r3, [pc, #192]	@ (80027dc <HAL_GPIO_Init+0x350>)
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	43db      	mvns	r3, r3
 8002722:	693a      	ldr	r2, [r7, #16]
 8002724:	4013      	ands	r3, r2
 8002726:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d003      	beq.n	800273c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002734:	693a      	ldr	r2, [r7, #16]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	4313      	orrs	r3, r2
 800273a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800273c:	4a27      	ldr	r2, [pc, #156]	@ (80027dc <HAL_GPIO_Init+0x350>)
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002742:	4b26      	ldr	r3, [pc, #152]	@ (80027dc <HAL_GPIO_Init+0x350>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	43db      	mvns	r3, r3
 800274c:	693a      	ldr	r2, [r7, #16]
 800274e:	4013      	ands	r3, r2
 8002750:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d003      	beq.n	8002766 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800275e:	693a      	ldr	r2, [r7, #16]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	4313      	orrs	r3, r2
 8002764:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002766:	4a1d      	ldr	r2, [pc, #116]	@ (80027dc <HAL_GPIO_Init+0x350>)
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800276c:	4b1b      	ldr	r3, [pc, #108]	@ (80027dc <HAL_GPIO_Init+0x350>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	43db      	mvns	r3, r3
 8002776:	693a      	ldr	r2, [r7, #16]
 8002778:	4013      	ands	r3, r2
 800277a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d003      	beq.n	8002790 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002788:	693a      	ldr	r2, [r7, #16]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	4313      	orrs	r3, r2
 800278e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002790:	4a12      	ldr	r2, [pc, #72]	@ (80027dc <HAL_GPIO_Init+0x350>)
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	3301      	adds	r3, #1
 800279a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	fa22 f303 	lsr.w	r3, r2, r3
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	f47f ae78 	bne.w	800249c <HAL_GPIO_Init+0x10>
  }
}
 80027ac:	bf00      	nop
 80027ae:	bf00      	nop
 80027b0:	371c      	adds	r7, #28
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	40021000 	.word	0x40021000
 80027c0:	40010000 	.word	0x40010000
 80027c4:	48000400 	.word	0x48000400
 80027c8:	48000800 	.word	0x48000800
 80027cc:	48000c00 	.word	0x48000c00
 80027d0:	48001000 	.word	0x48001000
 80027d4:	48001400 	.word	0x48001400
 80027d8:	48001800 	.word	0x48001800
 80027dc:	40010400 	.word	0x40010400

080027e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	460b      	mov	r3, r1
 80027ea:	807b      	strh	r3, [r7, #2]
 80027ec:	4613      	mov	r3, r2
 80027ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027f0:	787b      	ldrb	r3, [r7, #1]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d003      	beq.n	80027fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80027f6:	887a      	ldrh	r2, [r7, #2]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80027fc:	e002      	b.n	8002804 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80027fe:	887a      	ldrh	r2, [r7, #2]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002804:	bf00      	nop
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002814:	4b04      	ldr	r3, [pc, #16]	@ (8002828 <HAL_PWREx_GetVoltageRange+0x18>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800281c:	4618      	mov	r0, r3
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	40007000 	.word	0x40007000

0800282c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800282c:	b480      	push	{r7}
 800282e:	b085      	sub	sp, #20
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800283a:	d130      	bne.n	800289e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800283c:	4b23      	ldr	r3, [pc, #140]	@ (80028cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002844:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002848:	d038      	beq.n	80028bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800284a:	4b20      	ldr	r3, [pc, #128]	@ (80028cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002852:	4a1e      	ldr	r2, [pc, #120]	@ (80028cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002854:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002858:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800285a:	4b1d      	ldr	r3, [pc, #116]	@ (80028d0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2232      	movs	r2, #50	@ 0x32
 8002860:	fb02 f303 	mul.w	r3, r2, r3
 8002864:	4a1b      	ldr	r2, [pc, #108]	@ (80028d4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002866:	fba2 2303 	umull	r2, r3, r2, r3
 800286a:	0c9b      	lsrs	r3, r3, #18
 800286c:	3301      	adds	r3, #1
 800286e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002870:	e002      	b.n	8002878 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	3b01      	subs	r3, #1
 8002876:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002878:	4b14      	ldr	r3, [pc, #80]	@ (80028cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800287a:	695b      	ldr	r3, [r3, #20]
 800287c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002880:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002884:	d102      	bne.n	800288c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d1f2      	bne.n	8002872 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800288c:	4b0f      	ldr	r3, [pc, #60]	@ (80028cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800288e:	695b      	ldr	r3, [r3, #20]
 8002890:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002894:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002898:	d110      	bne.n	80028bc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e00f      	b.n	80028be <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800289e:	4b0b      	ldr	r3, [pc, #44]	@ (80028cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80028a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028aa:	d007      	beq.n	80028bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80028ac:	4b07      	ldr	r3, [pc, #28]	@ (80028cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80028b4:	4a05      	ldr	r2, [pc, #20]	@ (80028cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80028ba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3714      	adds	r7, #20
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	40007000 	.word	0x40007000
 80028d0:	20000000 	.word	0x20000000
 80028d4:	431bde83 	.word	0x431bde83

080028d8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b088      	sub	sp, #32
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d101      	bne.n	80028ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e3ca      	b.n	8003080 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028ea:	4b97      	ldr	r3, [pc, #604]	@ (8002b48 <HAL_RCC_OscConfig+0x270>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f003 030c 	and.w	r3, r3, #12
 80028f2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028f4:	4b94      	ldr	r3, [pc, #592]	@ (8002b48 <HAL_RCC_OscConfig+0x270>)
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	f003 0303 	and.w	r3, r3, #3
 80028fc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0310 	and.w	r3, r3, #16
 8002906:	2b00      	cmp	r3, #0
 8002908:	f000 80e4 	beq.w	8002ad4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d007      	beq.n	8002922 <HAL_RCC_OscConfig+0x4a>
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	2b0c      	cmp	r3, #12
 8002916:	f040 808b 	bne.w	8002a30 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	2b01      	cmp	r3, #1
 800291e:	f040 8087 	bne.w	8002a30 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002922:	4b89      	ldr	r3, [pc, #548]	@ (8002b48 <HAL_RCC_OscConfig+0x270>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0302 	and.w	r3, r3, #2
 800292a:	2b00      	cmp	r3, #0
 800292c:	d005      	beq.n	800293a <HAL_RCC_OscConfig+0x62>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	699b      	ldr	r3, [r3, #24]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d101      	bne.n	800293a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e3a2      	b.n	8003080 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a1a      	ldr	r2, [r3, #32]
 800293e:	4b82      	ldr	r3, [pc, #520]	@ (8002b48 <HAL_RCC_OscConfig+0x270>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0308 	and.w	r3, r3, #8
 8002946:	2b00      	cmp	r3, #0
 8002948:	d004      	beq.n	8002954 <HAL_RCC_OscConfig+0x7c>
 800294a:	4b7f      	ldr	r3, [pc, #508]	@ (8002b48 <HAL_RCC_OscConfig+0x270>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002952:	e005      	b.n	8002960 <HAL_RCC_OscConfig+0x88>
 8002954:	4b7c      	ldr	r3, [pc, #496]	@ (8002b48 <HAL_RCC_OscConfig+0x270>)
 8002956:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800295a:	091b      	lsrs	r3, r3, #4
 800295c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002960:	4293      	cmp	r3, r2
 8002962:	d223      	bcs.n	80029ac <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6a1b      	ldr	r3, [r3, #32]
 8002968:	4618      	mov	r0, r3
 800296a:	f000 fd1d 	bl	80033a8 <RCC_SetFlashLatencyFromMSIRange>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d001      	beq.n	8002978 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e383      	b.n	8003080 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002978:	4b73      	ldr	r3, [pc, #460]	@ (8002b48 <HAL_RCC_OscConfig+0x270>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a72      	ldr	r2, [pc, #456]	@ (8002b48 <HAL_RCC_OscConfig+0x270>)
 800297e:	f043 0308 	orr.w	r3, r3, #8
 8002982:	6013      	str	r3, [r2, #0]
 8002984:	4b70      	ldr	r3, [pc, #448]	@ (8002b48 <HAL_RCC_OscConfig+0x270>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a1b      	ldr	r3, [r3, #32]
 8002990:	496d      	ldr	r1, [pc, #436]	@ (8002b48 <HAL_RCC_OscConfig+0x270>)
 8002992:	4313      	orrs	r3, r2
 8002994:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002996:	4b6c      	ldr	r3, [pc, #432]	@ (8002b48 <HAL_RCC_OscConfig+0x270>)
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	69db      	ldr	r3, [r3, #28]
 80029a2:	021b      	lsls	r3, r3, #8
 80029a4:	4968      	ldr	r1, [pc, #416]	@ (8002b48 <HAL_RCC_OscConfig+0x270>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	604b      	str	r3, [r1, #4]
 80029aa:	e025      	b.n	80029f8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029ac:	4b66      	ldr	r3, [pc, #408]	@ (8002b48 <HAL_RCC_OscConfig+0x270>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a65      	ldr	r2, [pc, #404]	@ (8002b48 <HAL_RCC_OscConfig+0x270>)
 80029b2:	f043 0308 	orr.w	r3, r3, #8
 80029b6:	6013      	str	r3, [r2, #0]
 80029b8:	4b63      	ldr	r3, [pc, #396]	@ (8002b48 <HAL_RCC_OscConfig+0x270>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a1b      	ldr	r3, [r3, #32]
 80029c4:	4960      	ldr	r1, [pc, #384]	@ (8002b48 <HAL_RCC_OscConfig+0x270>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029ca:	4b5f      	ldr	r3, [pc, #380]	@ (8002b48 <HAL_RCC_OscConfig+0x270>)
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	69db      	ldr	r3, [r3, #28]
 80029d6:	021b      	lsls	r3, r3, #8
 80029d8:	495b      	ldr	r1, [pc, #364]	@ (8002b48 <HAL_RCC_OscConfig+0x270>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d109      	bne.n	80029f8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a1b      	ldr	r3, [r3, #32]
 80029e8:	4618      	mov	r0, r3
 80029ea:	f000 fcdd 	bl	80033a8 <RCC_SetFlashLatencyFromMSIRange>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d001      	beq.n	80029f8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e343      	b.n	8003080 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029f8:	f000 fc4a 	bl	8003290 <HAL_RCC_GetSysClockFreq>
 80029fc:	4602      	mov	r2, r0
 80029fe:	4b52      	ldr	r3, [pc, #328]	@ (8002b48 <HAL_RCC_OscConfig+0x270>)
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	091b      	lsrs	r3, r3, #4
 8002a04:	f003 030f 	and.w	r3, r3, #15
 8002a08:	4950      	ldr	r1, [pc, #320]	@ (8002b4c <HAL_RCC_OscConfig+0x274>)
 8002a0a:	5ccb      	ldrb	r3, [r1, r3]
 8002a0c:	f003 031f 	and.w	r3, r3, #31
 8002a10:	fa22 f303 	lsr.w	r3, r2, r3
 8002a14:	4a4e      	ldr	r2, [pc, #312]	@ (8002b50 <HAL_RCC_OscConfig+0x278>)
 8002a16:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002a18:	4b4e      	ldr	r3, [pc, #312]	@ (8002b54 <HAL_RCC_OscConfig+0x27c>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7fe f9a5 	bl	8000d6c <HAL_InitTick>
 8002a22:	4603      	mov	r3, r0
 8002a24:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002a26:	7bfb      	ldrb	r3, [r7, #15]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d052      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002a2c:	7bfb      	ldrb	r3, [r7, #15]
 8002a2e:	e327      	b.n	8003080 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	699b      	ldr	r3, [r3, #24]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d032      	beq.n	8002a9e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002a38:	4b43      	ldr	r3, [pc, #268]	@ (8002b48 <HAL_RCC_OscConfig+0x270>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a42      	ldr	r2, [pc, #264]	@ (8002b48 <HAL_RCC_OscConfig+0x270>)
 8002a3e:	f043 0301 	orr.w	r3, r3, #1
 8002a42:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a44:	f7fe f9e2 	bl	8000e0c <HAL_GetTick>
 8002a48:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a4a:	e008      	b.n	8002a5e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a4c:	f7fe f9de 	bl	8000e0c <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e310      	b.n	8003080 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a5e:	4b3a      	ldr	r3, [pc, #232]	@ (8002b48 <HAL_RCC_OscConfig+0x270>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d0f0      	beq.n	8002a4c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a6a:	4b37      	ldr	r3, [pc, #220]	@ (8002b48 <HAL_RCC_OscConfig+0x270>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a36      	ldr	r2, [pc, #216]	@ (8002b48 <HAL_RCC_OscConfig+0x270>)
 8002a70:	f043 0308 	orr.w	r3, r3, #8
 8002a74:	6013      	str	r3, [r2, #0]
 8002a76:	4b34      	ldr	r3, [pc, #208]	@ (8002b48 <HAL_RCC_OscConfig+0x270>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a1b      	ldr	r3, [r3, #32]
 8002a82:	4931      	ldr	r1, [pc, #196]	@ (8002b48 <HAL_RCC_OscConfig+0x270>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a88:	4b2f      	ldr	r3, [pc, #188]	@ (8002b48 <HAL_RCC_OscConfig+0x270>)
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	69db      	ldr	r3, [r3, #28]
 8002a94:	021b      	lsls	r3, r3, #8
 8002a96:	492c      	ldr	r1, [pc, #176]	@ (8002b48 <HAL_RCC_OscConfig+0x270>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	604b      	str	r3, [r1, #4]
 8002a9c:	e01a      	b.n	8002ad4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a9e:	4b2a      	ldr	r3, [pc, #168]	@ (8002b48 <HAL_RCC_OscConfig+0x270>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a29      	ldr	r2, [pc, #164]	@ (8002b48 <HAL_RCC_OscConfig+0x270>)
 8002aa4:	f023 0301 	bic.w	r3, r3, #1
 8002aa8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002aaa:	f7fe f9af 	bl	8000e0c <HAL_GetTick>
 8002aae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ab0:	e008      	b.n	8002ac4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ab2:	f7fe f9ab 	bl	8000e0c <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d901      	bls.n	8002ac4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e2dd      	b.n	8003080 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ac4:	4b20      	ldr	r3, [pc, #128]	@ (8002b48 <HAL_RCC_OscConfig+0x270>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0302 	and.w	r3, r3, #2
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d1f0      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x1da>
 8002ad0:	e000      	b.n	8002ad4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ad2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0301 	and.w	r3, r3, #1
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d074      	beq.n	8002bca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	2b08      	cmp	r3, #8
 8002ae4:	d005      	beq.n	8002af2 <HAL_RCC_OscConfig+0x21a>
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	2b0c      	cmp	r3, #12
 8002aea:	d10e      	bne.n	8002b0a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	2b03      	cmp	r3, #3
 8002af0:	d10b      	bne.n	8002b0a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002af2:	4b15      	ldr	r3, [pc, #84]	@ (8002b48 <HAL_RCC_OscConfig+0x270>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d064      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x2f0>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d160      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e2ba      	b.n	8003080 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b12:	d106      	bne.n	8002b22 <HAL_RCC_OscConfig+0x24a>
 8002b14:	4b0c      	ldr	r3, [pc, #48]	@ (8002b48 <HAL_RCC_OscConfig+0x270>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a0b      	ldr	r2, [pc, #44]	@ (8002b48 <HAL_RCC_OscConfig+0x270>)
 8002b1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b1e:	6013      	str	r3, [r2, #0]
 8002b20:	e026      	b.n	8002b70 <HAL_RCC_OscConfig+0x298>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b2a:	d115      	bne.n	8002b58 <HAL_RCC_OscConfig+0x280>
 8002b2c:	4b06      	ldr	r3, [pc, #24]	@ (8002b48 <HAL_RCC_OscConfig+0x270>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a05      	ldr	r2, [pc, #20]	@ (8002b48 <HAL_RCC_OscConfig+0x270>)
 8002b32:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b36:	6013      	str	r3, [r2, #0]
 8002b38:	4b03      	ldr	r3, [pc, #12]	@ (8002b48 <HAL_RCC_OscConfig+0x270>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a02      	ldr	r2, [pc, #8]	@ (8002b48 <HAL_RCC_OscConfig+0x270>)
 8002b3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b42:	6013      	str	r3, [r2, #0]
 8002b44:	e014      	b.n	8002b70 <HAL_RCC_OscConfig+0x298>
 8002b46:	bf00      	nop
 8002b48:	40021000 	.word	0x40021000
 8002b4c:	08005290 	.word	0x08005290
 8002b50:	20000000 	.word	0x20000000
 8002b54:	20000004 	.word	0x20000004
 8002b58:	4ba0      	ldr	r3, [pc, #640]	@ (8002ddc <HAL_RCC_OscConfig+0x504>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a9f      	ldr	r2, [pc, #636]	@ (8002ddc <HAL_RCC_OscConfig+0x504>)
 8002b5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b62:	6013      	str	r3, [r2, #0]
 8002b64:	4b9d      	ldr	r3, [pc, #628]	@ (8002ddc <HAL_RCC_OscConfig+0x504>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a9c      	ldr	r2, [pc, #624]	@ (8002ddc <HAL_RCC_OscConfig+0x504>)
 8002b6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d013      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b78:	f7fe f948 	bl	8000e0c <HAL_GetTick>
 8002b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b7e:	e008      	b.n	8002b92 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b80:	f7fe f944 	bl	8000e0c <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b64      	cmp	r3, #100	@ 0x64
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e276      	b.n	8003080 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b92:	4b92      	ldr	r3, [pc, #584]	@ (8002ddc <HAL_RCC_OscConfig+0x504>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d0f0      	beq.n	8002b80 <HAL_RCC_OscConfig+0x2a8>
 8002b9e:	e014      	b.n	8002bca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba0:	f7fe f934 	bl	8000e0c <HAL_GetTick>
 8002ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ba6:	e008      	b.n	8002bba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ba8:	f7fe f930 	bl	8000e0c <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b64      	cmp	r3, #100	@ 0x64
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e262      	b.n	8003080 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002bba:	4b88      	ldr	r3, [pc, #544]	@ (8002ddc <HAL_RCC_OscConfig+0x504>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1f0      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x2d0>
 8002bc6:	e000      	b.n	8002bca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d060      	beq.n	8002c98 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	2b04      	cmp	r3, #4
 8002bda:	d005      	beq.n	8002be8 <HAL_RCC_OscConfig+0x310>
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	2b0c      	cmp	r3, #12
 8002be0:	d119      	bne.n	8002c16 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d116      	bne.n	8002c16 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002be8:	4b7c      	ldr	r3, [pc, #496]	@ (8002ddc <HAL_RCC_OscConfig+0x504>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d005      	beq.n	8002c00 <HAL_RCC_OscConfig+0x328>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d101      	bne.n	8002c00 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e23f      	b.n	8003080 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c00:	4b76      	ldr	r3, [pc, #472]	@ (8002ddc <HAL_RCC_OscConfig+0x504>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	691b      	ldr	r3, [r3, #16]
 8002c0c:	061b      	lsls	r3, r3, #24
 8002c0e:	4973      	ldr	r1, [pc, #460]	@ (8002ddc <HAL_RCC_OscConfig+0x504>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c14:	e040      	b.n	8002c98 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d023      	beq.n	8002c66 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c1e:	4b6f      	ldr	r3, [pc, #444]	@ (8002ddc <HAL_RCC_OscConfig+0x504>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a6e      	ldr	r2, [pc, #440]	@ (8002ddc <HAL_RCC_OscConfig+0x504>)
 8002c24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c2a:	f7fe f8ef 	bl	8000e0c <HAL_GetTick>
 8002c2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c30:	e008      	b.n	8002c44 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c32:	f7fe f8eb 	bl	8000e0c <HAL_GetTick>
 8002c36:	4602      	mov	r2, r0
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d901      	bls.n	8002c44 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e21d      	b.n	8003080 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c44:	4b65      	ldr	r3, [pc, #404]	@ (8002ddc <HAL_RCC_OscConfig+0x504>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d0f0      	beq.n	8002c32 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c50:	4b62      	ldr	r3, [pc, #392]	@ (8002ddc <HAL_RCC_OscConfig+0x504>)
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	691b      	ldr	r3, [r3, #16]
 8002c5c:	061b      	lsls	r3, r3, #24
 8002c5e:	495f      	ldr	r1, [pc, #380]	@ (8002ddc <HAL_RCC_OscConfig+0x504>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	604b      	str	r3, [r1, #4]
 8002c64:	e018      	b.n	8002c98 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c66:	4b5d      	ldr	r3, [pc, #372]	@ (8002ddc <HAL_RCC_OscConfig+0x504>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a5c      	ldr	r2, [pc, #368]	@ (8002ddc <HAL_RCC_OscConfig+0x504>)
 8002c6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c72:	f7fe f8cb 	bl	8000e0c <HAL_GetTick>
 8002c76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c78:	e008      	b.n	8002c8c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c7a:	f7fe f8c7 	bl	8000e0c <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d901      	bls.n	8002c8c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	e1f9      	b.n	8003080 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c8c:	4b53      	ldr	r3, [pc, #332]	@ (8002ddc <HAL_RCC_OscConfig+0x504>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d1f0      	bne.n	8002c7a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0308 	and.w	r3, r3, #8
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d03c      	beq.n	8002d1e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	695b      	ldr	r3, [r3, #20]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d01c      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cac:	4b4b      	ldr	r3, [pc, #300]	@ (8002ddc <HAL_RCC_OscConfig+0x504>)
 8002cae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cb2:	4a4a      	ldr	r2, [pc, #296]	@ (8002ddc <HAL_RCC_OscConfig+0x504>)
 8002cb4:	f043 0301 	orr.w	r3, r3, #1
 8002cb8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cbc:	f7fe f8a6 	bl	8000e0c <HAL_GetTick>
 8002cc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cc2:	e008      	b.n	8002cd6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cc4:	f7fe f8a2 	bl	8000e0c <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e1d4      	b.n	8003080 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cd6:	4b41      	ldr	r3, [pc, #260]	@ (8002ddc <HAL_RCC_OscConfig+0x504>)
 8002cd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cdc:	f003 0302 	and.w	r3, r3, #2
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d0ef      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x3ec>
 8002ce4:	e01b      	b.n	8002d1e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ce6:	4b3d      	ldr	r3, [pc, #244]	@ (8002ddc <HAL_RCC_OscConfig+0x504>)
 8002ce8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cec:	4a3b      	ldr	r2, [pc, #236]	@ (8002ddc <HAL_RCC_OscConfig+0x504>)
 8002cee:	f023 0301 	bic.w	r3, r3, #1
 8002cf2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cf6:	f7fe f889 	bl	8000e0c <HAL_GetTick>
 8002cfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cfc:	e008      	b.n	8002d10 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cfe:	f7fe f885 	bl	8000e0c <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d901      	bls.n	8002d10 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e1b7      	b.n	8003080 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d10:	4b32      	ldr	r3, [pc, #200]	@ (8002ddc <HAL_RCC_OscConfig+0x504>)
 8002d12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d16:	f003 0302 	and.w	r3, r3, #2
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d1ef      	bne.n	8002cfe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0304 	and.w	r3, r3, #4
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	f000 80a6 	beq.w	8002e78 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002d30:	4b2a      	ldr	r3, [pc, #168]	@ (8002ddc <HAL_RCC_OscConfig+0x504>)
 8002d32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d10d      	bne.n	8002d58 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d3c:	4b27      	ldr	r3, [pc, #156]	@ (8002ddc <HAL_RCC_OscConfig+0x504>)
 8002d3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d40:	4a26      	ldr	r2, [pc, #152]	@ (8002ddc <HAL_RCC_OscConfig+0x504>)
 8002d42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d46:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d48:	4b24      	ldr	r3, [pc, #144]	@ (8002ddc <HAL_RCC_OscConfig+0x504>)
 8002d4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d50:	60bb      	str	r3, [r7, #8]
 8002d52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d54:	2301      	movs	r3, #1
 8002d56:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d58:	4b21      	ldr	r3, [pc, #132]	@ (8002de0 <HAL_RCC_OscConfig+0x508>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d118      	bne.n	8002d96 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d64:	4b1e      	ldr	r3, [pc, #120]	@ (8002de0 <HAL_RCC_OscConfig+0x508>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a1d      	ldr	r2, [pc, #116]	@ (8002de0 <HAL_RCC_OscConfig+0x508>)
 8002d6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d6e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d70:	f7fe f84c 	bl	8000e0c <HAL_GetTick>
 8002d74:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d76:	e008      	b.n	8002d8a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d78:	f7fe f848 	bl	8000e0c <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d901      	bls.n	8002d8a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e17a      	b.n	8003080 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d8a:	4b15      	ldr	r3, [pc, #84]	@ (8002de0 <HAL_RCC_OscConfig+0x508>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d0f0      	beq.n	8002d78 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d108      	bne.n	8002db0 <HAL_RCC_OscConfig+0x4d8>
 8002d9e:	4b0f      	ldr	r3, [pc, #60]	@ (8002ddc <HAL_RCC_OscConfig+0x504>)
 8002da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002da4:	4a0d      	ldr	r2, [pc, #52]	@ (8002ddc <HAL_RCC_OscConfig+0x504>)
 8002da6:	f043 0301 	orr.w	r3, r3, #1
 8002daa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002dae:	e029      	b.n	8002e04 <HAL_RCC_OscConfig+0x52c>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	2b05      	cmp	r3, #5
 8002db6:	d115      	bne.n	8002de4 <HAL_RCC_OscConfig+0x50c>
 8002db8:	4b08      	ldr	r3, [pc, #32]	@ (8002ddc <HAL_RCC_OscConfig+0x504>)
 8002dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dbe:	4a07      	ldr	r2, [pc, #28]	@ (8002ddc <HAL_RCC_OscConfig+0x504>)
 8002dc0:	f043 0304 	orr.w	r3, r3, #4
 8002dc4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002dc8:	4b04      	ldr	r3, [pc, #16]	@ (8002ddc <HAL_RCC_OscConfig+0x504>)
 8002dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dce:	4a03      	ldr	r2, [pc, #12]	@ (8002ddc <HAL_RCC_OscConfig+0x504>)
 8002dd0:	f043 0301 	orr.w	r3, r3, #1
 8002dd4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002dd8:	e014      	b.n	8002e04 <HAL_RCC_OscConfig+0x52c>
 8002dda:	bf00      	nop
 8002ddc:	40021000 	.word	0x40021000
 8002de0:	40007000 	.word	0x40007000
 8002de4:	4b9c      	ldr	r3, [pc, #624]	@ (8003058 <HAL_RCC_OscConfig+0x780>)
 8002de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dea:	4a9b      	ldr	r2, [pc, #620]	@ (8003058 <HAL_RCC_OscConfig+0x780>)
 8002dec:	f023 0301 	bic.w	r3, r3, #1
 8002df0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002df4:	4b98      	ldr	r3, [pc, #608]	@ (8003058 <HAL_RCC_OscConfig+0x780>)
 8002df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dfa:	4a97      	ldr	r2, [pc, #604]	@ (8003058 <HAL_RCC_OscConfig+0x780>)
 8002dfc:	f023 0304 	bic.w	r3, r3, #4
 8002e00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d016      	beq.n	8002e3a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e0c:	f7fd fffe 	bl	8000e0c <HAL_GetTick>
 8002e10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e12:	e00a      	b.n	8002e2a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e14:	f7fd fffa 	bl	8000e0c <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e12a      	b.n	8003080 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e2a:	4b8b      	ldr	r3, [pc, #556]	@ (8003058 <HAL_RCC_OscConfig+0x780>)
 8002e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d0ed      	beq.n	8002e14 <HAL_RCC_OscConfig+0x53c>
 8002e38:	e015      	b.n	8002e66 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e3a:	f7fd ffe7 	bl	8000e0c <HAL_GetTick>
 8002e3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e40:	e00a      	b.n	8002e58 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e42:	f7fd ffe3 	bl	8000e0c <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d901      	bls.n	8002e58 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	e113      	b.n	8003080 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e58:	4b7f      	ldr	r3, [pc, #508]	@ (8003058 <HAL_RCC_OscConfig+0x780>)
 8002e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e5e:	f003 0302 	and.w	r3, r3, #2
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d1ed      	bne.n	8002e42 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e66:	7ffb      	ldrb	r3, [r7, #31]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d105      	bne.n	8002e78 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e6c:	4b7a      	ldr	r3, [pc, #488]	@ (8003058 <HAL_RCC_OscConfig+0x780>)
 8002e6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e70:	4a79      	ldr	r2, [pc, #484]	@ (8003058 <HAL_RCC_OscConfig+0x780>)
 8002e72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e76:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	f000 80fe 	beq.w	800307e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	f040 80d0 	bne.w	800302c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002e8c:	4b72      	ldr	r3, [pc, #456]	@ (8003058 <HAL_RCC_OscConfig+0x780>)
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	f003 0203 	and.w	r2, r3, #3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d130      	bne.n	8002f02 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d127      	bne.n	8002f02 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ebc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d11f      	bne.n	8002f02 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002ecc:	2a07      	cmp	r2, #7
 8002ece:	bf14      	ite	ne
 8002ed0:	2201      	movne	r2, #1
 8002ed2:	2200      	moveq	r2, #0
 8002ed4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d113      	bne.n	8002f02 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ee4:	085b      	lsrs	r3, r3, #1
 8002ee6:	3b01      	subs	r3, #1
 8002ee8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d109      	bne.n	8002f02 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef8:	085b      	lsrs	r3, r3, #1
 8002efa:	3b01      	subs	r3, #1
 8002efc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d06e      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	2b0c      	cmp	r3, #12
 8002f06:	d069      	beq.n	8002fdc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002f08:	4b53      	ldr	r3, [pc, #332]	@ (8003058 <HAL_RCC_OscConfig+0x780>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d105      	bne.n	8002f20 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002f14:	4b50      	ldr	r3, [pc, #320]	@ (8003058 <HAL_RCC_OscConfig+0x780>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d001      	beq.n	8002f24 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e0ad      	b.n	8003080 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002f24:	4b4c      	ldr	r3, [pc, #304]	@ (8003058 <HAL_RCC_OscConfig+0x780>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a4b      	ldr	r2, [pc, #300]	@ (8003058 <HAL_RCC_OscConfig+0x780>)
 8002f2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f2e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f30:	f7fd ff6c 	bl	8000e0c <HAL_GetTick>
 8002f34:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f36:	e008      	b.n	8002f4a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f38:	f7fd ff68 	bl	8000e0c <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e09a      	b.n	8003080 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f4a:	4b43      	ldr	r3, [pc, #268]	@ (8003058 <HAL_RCC_OscConfig+0x780>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1f0      	bne.n	8002f38 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f56:	4b40      	ldr	r3, [pc, #256]	@ (8003058 <HAL_RCC_OscConfig+0x780>)
 8002f58:	68da      	ldr	r2, [r3, #12]
 8002f5a:	4b40      	ldr	r3, [pc, #256]	@ (800305c <HAL_RCC_OscConfig+0x784>)
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002f66:	3a01      	subs	r2, #1
 8002f68:	0112      	lsls	r2, r2, #4
 8002f6a:	4311      	orrs	r1, r2
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002f70:	0212      	lsls	r2, r2, #8
 8002f72:	4311      	orrs	r1, r2
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002f78:	0852      	lsrs	r2, r2, #1
 8002f7a:	3a01      	subs	r2, #1
 8002f7c:	0552      	lsls	r2, r2, #21
 8002f7e:	4311      	orrs	r1, r2
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002f84:	0852      	lsrs	r2, r2, #1
 8002f86:	3a01      	subs	r2, #1
 8002f88:	0652      	lsls	r2, r2, #25
 8002f8a:	4311      	orrs	r1, r2
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002f90:	0912      	lsrs	r2, r2, #4
 8002f92:	0452      	lsls	r2, r2, #17
 8002f94:	430a      	orrs	r2, r1
 8002f96:	4930      	ldr	r1, [pc, #192]	@ (8003058 <HAL_RCC_OscConfig+0x780>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002f9c:	4b2e      	ldr	r3, [pc, #184]	@ (8003058 <HAL_RCC_OscConfig+0x780>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a2d      	ldr	r2, [pc, #180]	@ (8003058 <HAL_RCC_OscConfig+0x780>)
 8002fa2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002fa6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002fa8:	4b2b      	ldr	r3, [pc, #172]	@ (8003058 <HAL_RCC_OscConfig+0x780>)
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	4a2a      	ldr	r2, [pc, #168]	@ (8003058 <HAL_RCC_OscConfig+0x780>)
 8002fae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002fb2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002fb4:	f7fd ff2a 	bl	8000e0c <HAL_GetTick>
 8002fb8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fba:	e008      	b.n	8002fce <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fbc:	f7fd ff26 	bl	8000e0c <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d901      	bls.n	8002fce <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e058      	b.n	8003080 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fce:	4b22      	ldr	r3, [pc, #136]	@ (8003058 <HAL_RCC_OscConfig+0x780>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d0f0      	beq.n	8002fbc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002fda:	e050      	b.n	800307e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e04f      	b.n	8003080 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fe0:	4b1d      	ldr	r3, [pc, #116]	@ (8003058 <HAL_RCC_OscConfig+0x780>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d148      	bne.n	800307e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002fec:	4b1a      	ldr	r3, [pc, #104]	@ (8003058 <HAL_RCC_OscConfig+0x780>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a19      	ldr	r2, [pc, #100]	@ (8003058 <HAL_RCC_OscConfig+0x780>)
 8002ff2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ff6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ff8:	4b17      	ldr	r3, [pc, #92]	@ (8003058 <HAL_RCC_OscConfig+0x780>)
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	4a16      	ldr	r2, [pc, #88]	@ (8003058 <HAL_RCC_OscConfig+0x780>)
 8002ffe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003002:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003004:	f7fd ff02 	bl	8000e0c <HAL_GetTick>
 8003008:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800300a:	e008      	b.n	800301e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800300c:	f7fd fefe 	bl	8000e0c <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b02      	cmp	r3, #2
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e030      	b.n	8003080 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800301e:	4b0e      	ldr	r3, [pc, #56]	@ (8003058 <HAL_RCC_OscConfig+0x780>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d0f0      	beq.n	800300c <HAL_RCC_OscConfig+0x734>
 800302a:	e028      	b.n	800307e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	2b0c      	cmp	r3, #12
 8003030:	d023      	beq.n	800307a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003032:	4b09      	ldr	r3, [pc, #36]	@ (8003058 <HAL_RCC_OscConfig+0x780>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a08      	ldr	r2, [pc, #32]	@ (8003058 <HAL_RCC_OscConfig+0x780>)
 8003038:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800303c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800303e:	f7fd fee5 	bl	8000e0c <HAL_GetTick>
 8003042:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003044:	e00c      	b.n	8003060 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003046:	f7fd fee1 	bl	8000e0c <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	2b02      	cmp	r3, #2
 8003052:	d905      	bls.n	8003060 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	e013      	b.n	8003080 <HAL_RCC_OscConfig+0x7a8>
 8003058:	40021000 	.word	0x40021000
 800305c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003060:	4b09      	ldr	r3, [pc, #36]	@ (8003088 <HAL_RCC_OscConfig+0x7b0>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d1ec      	bne.n	8003046 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800306c:	4b06      	ldr	r3, [pc, #24]	@ (8003088 <HAL_RCC_OscConfig+0x7b0>)
 800306e:	68da      	ldr	r2, [r3, #12]
 8003070:	4905      	ldr	r1, [pc, #20]	@ (8003088 <HAL_RCC_OscConfig+0x7b0>)
 8003072:	4b06      	ldr	r3, [pc, #24]	@ (800308c <HAL_RCC_OscConfig+0x7b4>)
 8003074:	4013      	ands	r3, r2
 8003076:	60cb      	str	r3, [r1, #12]
 8003078:	e001      	b.n	800307e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e000      	b.n	8003080 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800307e:	2300      	movs	r3, #0
}
 8003080:	4618      	mov	r0, r3
 8003082:	3720      	adds	r7, #32
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	40021000 	.word	0x40021000
 800308c:	feeefffc 	.word	0xfeeefffc

08003090 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d101      	bne.n	80030a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e0e7      	b.n	8003274 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030a4:	4b75      	ldr	r3, [pc, #468]	@ (800327c <HAL_RCC_ClockConfig+0x1ec>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0307 	and.w	r3, r3, #7
 80030ac:	683a      	ldr	r2, [r7, #0]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d910      	bls.n	80030d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030b2:	4b72      	ldr	r3, [pc, #456]	@ (800327c <HAL_RCC_ClockConfig+0x1ec>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f023 0207 	bic.w	r2, r3, #7
 80030ba:	4970      	ldr	r1, [pc, #448]	@ (800327c <HAL_RCC_ClockConfig+0x1ec>)
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	4313      	orrs	r3, r2
 80030c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030c2:	4b6e      	ldr	r3, [pc, #440]	@ (800327c <HAL_RCC_ClockConfig+0x1ec>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0307 	and.w	r3, r3, #7
 80030ca:	683a      	ldr	r2, [r7, #0]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d001      	beq.n	80030d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e0cf      	b.n	8003274 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0302 	and.w	r3, r3, #2
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d010      	beq.n	8003102 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	689a      	ldr	r2, [r3, #8]
 80030e4:	4b66      	ldr	r3, [pc, #408]	@ (8003280 <HAL_RCC_ClockConfig+0x1f0>)
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d908      	bls.n	8003102 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030f0:	4b63      	ldr	r3, [pc, #396]	@ (8003280 <HAL_RCC_ClockConfig+0x1f0>)
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	4960      	ldr	r1, [pc, #384]	@ (8003280 <HAL_RCC_ClockConfig+0x1f0>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0301 	and.w	r3, r3, #1
 800310a:	2b00      	cmp	r3, #0
 800310c:	d04c      	beq.n	80031a8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	2b03      	cmp	r3, #3
 8003114:	d107      	bne.n	8003126 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003116:	4b5a      	ldr	r3, [pc, #360]	@ (8003280 <HAL_RCC_ClockConfig+0x1f0>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d121      	bne.n	8003166 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e0a6      	b.n	8003274 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	2b02      	cmp	r3, #2
 800312c:	d107      	bne.n	800313e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800312e:	4b54      	ldr	r3, [pc, #336]	@ (8003280 <HAL_RCC_ClockConfig+0x1f0>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d115      	bne.n	8003166 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e09a      	b.n	8003274 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d107      	bne.n	8003156 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003146:	4b4e      	ldr	r3, [pc, #312]	@ (8003280 <HAL_RCC_ClockConfig+0x1f0>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d109      	bne.n	8003166 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e08e      	b.n	8003274 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003156:	4b4a      	ldr	r3, [pc, #296]	@ (8003280 <HAL_RCC_ClockConfig+0x1f0>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800315e:	2b00      	cmp	r3, #0
 8003160:	d101      	bne.n	8003166 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e086      	b.n	8003274 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003166:	4b46      	ldr	r3, [pc, #280]	@ (8003280 <HAL_RCC_ClockConfig+0x1f0>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f023 0203 	bic.w	r2, r3, #3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	4943      	ldr	r1, [pc, #268]	@ (8003280 <HAL_RCC_ClockConfig+0x1f0>)
 8003174:	4313      	orrs	r3, r2
 8003176:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003178:	f7fd fe48 	bl	8000e0c <HAL_GetTick>
 800317c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800317e:	e00a      	b.n	8003196 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003180:	f7fd fe44 	bl	8000e0c <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800318e:	4293      	cmp	r3, r2
 8003190:	d901      	bls.n	8003196 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e06e      	b.n	8003274 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003196:	4b3a      	ldr	r3, [pc, #232]	@ (8003280 <HAL_RCC_ClockConfig+0x1f0>)
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f003 020c 	and.w	r2, r3, #12
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d1eb      	bne.n	8003180 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0302 	and.w	r3, r3, #2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d010      	beq.n	80031d6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	689a      	ldr	r2, [r3, #8]
 80031b8:	4b31      	ldr	r3, [pc, #196]	@ (8003280 <HAL_RCC_ClockConfig+0x1f0>)
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d208      	bcs.n	80031d6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031c4:	4b2e      	ldr	r3, [pc, #184]	@ (8003280 <HAL_RCC_ClockConfig+0x1f0>)
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	492b      	ldr	r1, [pc, #172]	@ (8003280 <HAL_RCC_ClockConfig+0x1f0>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031d6:	4b29      	ldr	r3, [pc, #164]	@ (800327c <HAL_RCC_ClockConfig+0x1ec>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0307 	and.w	r3, r3, #7
 80031de:	683a      	ldr	r2, [r7, #0]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d210      	bcs.n	8003206 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031e4:	4b25      	ldr	r3, [pc, #148]	@ (800327c <HAL_RCC_ClockConfig+0x1ec>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f023 0207 	bic.w	r2, r3, #7
 80031ec:	4923      	ldr	r1, [pc, #140]	@ (800327c <HAL_RCC_ClockConfig+0x1ec>)
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031f4:	4b21      	ldr	r3, [pc, #132]	@ (800327c <HAL_RCC_ClockConfig+0x1ec>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0307 	and.w	r3, r3, #7
 80031fc:	683a      	ldr	r2, [r7, #0]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d001      	beq.n	8003206 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e036      	b.n	8003274 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0304 	and.w	r3, r3, #4
 800320e:	2b00      	cmp	r3, #0
 8003210:	d008      	beq.n	8003224 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003212:	4b1b      	ldr	r3, [pc, #108]	@ (8003280 <HAL_RCC_ClockConfig+0x1f0>)
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	4918      	ldr	r1, [pc, #96]	@ (8003280 <HAL_RCC_ClockConfig+0x1f0>)
 8003220:	4313      	orrs	r3, r2
 8003222:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0308 	and.w	r3, r3, #8
 800322c:	2b00      	cmp	r3, #0
 800322e:	d009      	beq.n	8003244 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003230:	4b13      	ldr	r3, [pc, #76]	@ (8003280 <HAL_RCC_ClockConfig+0x1f0>)
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	691b      	ldr	r3, [r3, #16]
 800323c:	00db      	lsls	r3, r3, #3
 800323e:	4910      	ldr	r1, [pc, #64]	@ (8003280 <HAL_RCC_ClockConfig+0x1f0>)
 8003240:	4313      	orrs	r3, r2
 8003242:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003244:	f000 f824 	bl	8003290 <HAL_RCC_GetSysClockFreq>
 8003248:	4602      	mov	r2, r0
 800324a:	4b0d      	ldr	r3, [pc, #52]	@ (8003280 <HAL_RCC_ClockConfig+0x1f0>)
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	091b      	lsrs	r3, r3, #4
 8003250:	f003 030f 	and.w	r3, r3, #15
 8003254:	490b      	ldr	r1, [pc, #44]	@ (8003284 <HAL_RCC_ClockConfig+0x1f4>)
 8003256:	5ccb      	ldrb	r3, [r1, r3]
 8003258:	f003 031f 	and.w	r3, r3, #31
 800325c:	fa22 f303 	lsr.w	r3, r2, r3
 8003260:	4a09      	ldr	r2, [pc, #36]	@ (8003288 <HAL_RCC_ClockConfig+0x1f8>)
 8003262:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003264:	4b09      	ldr	r3, [pc, #36]	@ (800328c <HAL_RCC_ClockConfig+0x1fc>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4618      	mov	r0, r3
 800326a:	f7fd fd7f 	bl	8000d6c <HAL_InitTick>
 800326e:	4603      	mov	r3, r0
 8003270:	72fb      	strb	r3, [r7, #11]

  return status;
 8003272:	7afb      	ldrb	r3, [r7, #11]
}
 8003274:	4618      	mov	r0, r3
 8003276:	3710      	adds	r7, #16
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}
 800327c:	40022000 	.word	0x40022000
 8003280:	40021000 	.word	0x40021000
 8003284:	08005290 	.word	0x08005290
 8003288:	20000000 	.word	0x20000000
 800328c:	20000004 	.word	0x20000004

08003290 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003290:	b480      	push	{r7}
 8003292:	b089      	sub	sp, #36	@ 0x24
 8003294:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003296:	2300      	movs	r3, #0
 8003298:	61fb      	str	r3, [r7, #28]
 800329a:	2300      	movs	r3, #0
 800329c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800329e:	4b3e      	ldr	r3, [pc, #248]	@ (8003398 <HAL_RCC_GetSysClockFreq+0x108>)
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f003 030c 	and.w	r3, r3, #12
 80032a6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032a8:	4b3b      	ldr	r3, [pc, #236]	@ (8003398 <HAL_RCC_GetSysClockFreq+0x108>)
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	f003 0303 	and.w	r3, r3, #3
 80032b0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d005      	beq.n	80032c4 <HAL_RCC_GetSysClockFreq+0x34>
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	2b0c      	cmp	r3, #12
 80032bc:	d121      	bne.n	8003302 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d11e      	bne.n	8003302 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80032c4:	4b34      	ldr	r3, [pc, #208]	@ (8003398 <HAL_RCC_GetSysClockFreq+0x108>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0308 	and.w	r3, r3, #8
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d107      	bne.n	80032e0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80032d0:	4b31      	ldr	r3, [pc, #196]	@ (8003398 <HAL_RCC_GetSysClockFreq+0x108>)
 80032d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032d6:	0a1b      	lsrs	r3, r3, #8
 80032d8:	f003 030f 	and.w	r3, r3, #15
 80032dc:	61fb      	str	r3, [r7, #28]
 80032de:	e005      	b.n	80032ec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80032e0:	4b2d      	ldr	r3, [pc, #180]	@ (8003398 <HAL_RCC_GetSysClockFreq+0x108>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	091b      	lsrs	r3, r3, #4
 80032e6:	f003 030f 	and.w	r3, r3, #15
 80032ea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80032ec:	4a2b      	ldr	r2, [pc, #172]	@ (800339c <HAL_RCC_GetSysClockFreq+0x10c>)
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032f4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d10d      	bne.n	8003318 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003300:	e00a      	b.n	8003318 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	2b04      	cmp	r3, #4
 8003306:	d102      	bne.n	800330e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003308:	4b25      	ldr	r3, [pc, #148]	@ (80033a0 <HAL_RCC_GetSysClockFreq+0x110>)
 800330a:	61bb      	str	r3, [r7, #24]
 800330c:	e004      	b.n	8003318 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	2b08      	cmp	r3, #8
 8003312:	d101      	bne.n	8003318 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003314:	4b23      	ldr	r3, [pc, #140]	@ (80033a4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003316:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	2b0c      	cmp	r3, #12
 800331c:	d134      	bne.n	8003388 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800331e:	4b1e      	ldr	r3, [pc, #120]	@ (8003398 <HAL_RCC_GetSysClockFreq+0x108>)
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	f003 0303 	and.w	r3, r3, #3
 8003326:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	2b02      	cmp	r3, #2
 800332c:	d003      	beq.n	8003336 <HAL_RCC_GetSysClockFreq+0xa6>
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	2b03      	cmp	r3, #3
 8003332:	d003      	beq.n	800333c <HAL_RCC_GetSysClockFreq+0xac>
 8003334:	e005      	b.n	8003342 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003336:	4b1a      	ldr	r3, [pc, #104]	@ (80033a0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003338:	617b      	str	r3, [r7, #20]
      break;
 800333a:	e005      	b.n	8003348 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800333c:	4b19      	ldr	r3, [pc, #100]	@ (80033a4 <HAL_RCC_GetSysClockFreq+0x114>)
 800333e:	617b      	str	r3, [r7, #20]
      break;
 8003340:	e002      	b.n	8003348 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	617b      	str	r3, [r7, #20]
      break;
 8003346:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003348:	4b13      	ldr	r3, [pc, #76]	@ (8003398 <HAL_RCC_GetSysClockFreq+0x108>)
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	091b      	lsrs	r3, r3, #4
 800334e:	f003 0307 	and.w	r3, r3, #7
 8003352:	3301      	adds	r3, #1
 8003354:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003356:	4b10      	ldr	r3, [pc, #64]	@ (8003398 <HAL_RCC_GetSysClockFreq+0x108>)
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	0a1b      	lsrs	r3, r3, #8
 800335c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003360:	697a      	ldr	r2, [r7, #20]
 8003362:	fb03 f202 	mul.w	r2, r3, r2
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	fbb2 f3f3 	udiv	r3, r2, r3
 800336c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800336e:	4b0a      	ldr	r3, [pc, #40]	@ (8003398 <HAL_RCC_GetSysClockFreq+0x108>)
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	0e5b      	lsrs	r3, r3, #25
 8003374:	f003 0303 	and.w	r3, r3, #3
 8003378:	3301      	adds	r3, #1
 800337a:	005b      	lsls	r3, r3, #1
 800337c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800337e:	697a      	ldr	r2, [r7, #20]
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	fbb2 f3f3 	udiv	r3, r2, r3
 8003386:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003388:	69bb      	ldr	r3, [r7, #24]
}
 800338a:	4618      	mov	r0, r3
 800338c:	3724      	adds	r7, #36	@ 0x24
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	40021000 	.word	0x40021000
 800339c:	080052a0 	.word	0x080052a0
 80033a0:	00f42400 	.word	0x00f42400
 80033a4:	007a1200 	.word	0x007a1200

080033a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b086      	sub	sp, #24
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80033b0:	2300      	movs	r3, #0
 80033b2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80033b4:	4b2a      	ldr	r3, [pc, #168]	@ (8003460 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d003      	beq.n	80033c8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80033c0:	f7ff fa26 	bl	8002810 <HAL_PWREx_GetVoltageRange>
 80033c4:	6178      	str	r0, [r7, #20]
 80033c6:	e014      	b.n	80033f2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80033c8:	4b25      	ldr	r3, [pc, #148]	@ (8003460 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033cc:	4a24      	ldr	r2, [pc, #144]	@ (8003460 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80033d4:	4b22      	ldr	r3, [pc, #136]	@ (8003460 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033dc:	60fb      	str	r3, [r7, #12]
 80033de:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80033e0:	f7ff fa16 	bl	8002810 <HAL_PWREx_GetVoltageRange>
 80033e4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80033e6:	4b1e      	ldr	r3, [pc, #120]	@ (8003460 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033ea:	4a1d      	ldr	r2, [pc, #116]	@ (8003460 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033f0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033f8:	d10b      	bne.n	8003412 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2b80      	cmp	r3, #128	@ 0x80
 80033fe:	d919      	bls.n	8003434 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2ba0      	cmp	r3, #160	@ 0xa0
 8003404:	d902      	bls.n	800340c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003406:	2302      	movs	r3, #2
 8003408:	613b      	str	r3, [r7, #16]
 800340a:	e013      	b.n	8003434 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800340c:	2301      	movs	r3, #1
 800340e:	613b      	str	r3, [r7, #16]
 8003410:	e010      	b.n	8003434 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2b80      	cmp	r3, #128	@ 0x80
 8003416:	d902      	bls.n	800341e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003418:	2303      	movs	r3, #3
 800341a:	613b      	str	r3, [r7, #16]
 800341c:	e00a      	b.n	8003434 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2b80      	cmp	r3, #128	@ 0x80
 8003422:	d102      	bne.n	800342a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003424:	2302      	movs	r3, #2
 8003426:	613b      	str	r3, [r7, #16]
 8003428:	e004      	b.n	8003434 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2b70      	cmp	r3, #112	@ 0x70
 800342e:	d101      	bne.n	8003434 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003430:	2301      	movs	r3, #1
 8003432:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003434:	4b0b      	ldr	r3, [pc, #44]	@ (8003464 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f023 0207 	bic.w	r2, r3, #7
 800343c:	4909      	ldr	r1, [pc, #36]	@ (8003464 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	4313      	orrs	r3, r2
 8003442:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003444:	4b07      	ldr	r3, [pc, #28]	@ (8003464 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0307 	and.w	r3, r3, #7
 800344c:	693a      	ldr	r2, [r7, #16]
 800344e:	429a      	cmp	r2, r3
 8003450:	d001      	beq.n	8003456 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e000      	b.n	8003458 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003456:	2300      	movs	r3, #0
}
 8003458:	4618      	mov	r0, r3
 800345a:	3718      	adds	r7, #24
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}
 8003460:	40021000 	.word	0x40021000
 8003464:	40022000 	.word	0x40022000

08003468 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b086      	sub	sp, #24
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003470:	2300      	movs	r3, #0
 8003472:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003474:	2300      	movs	r3, #0
 8003476:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003480:	2b00      	cmp	r3, #0
 8003482:	d041      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003488:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800348c:	d02a      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800348e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003492:	d824      	bhi.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003494:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003498:	d008      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x44>
 800349a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800349e:	d81e      	bhi.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x76>
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d00a      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x52>
 80034a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80034a8:	d010      	beq.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80034aa:	e018      	b.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80034ac:	4b86      	ldr	r3, [pc, #536]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	4a85      	ldr	r2, [pc, #532]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034b6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80034b8:	e015      	b.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	3304      	adds	r3, #4
 80034be:	2100      	movs	r1, #0
 80034c0:	4618      	mov	r0, r3
 80034c2:	f000 fabb 	bl	8003a3c <RCCEx_PLLSAI1_Config>
 80034c6:	4603      	mov	r3, r0
 80034c8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80034ca:	e00c      	b.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	3320      	adds	r3, #32
 80034d0:	2100      	movs	r1, #0
 80034d2:	4618      	mov	r0, r3
 80034d4:	f000 fba6 	bl	8003c24 <RCCEx_PLLSAI2_Config>
 80034d8:	4603      	mov	r3, r0
 80034da:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80034dc:	e003      	b.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	74fb      	strb	r3, [r7, #19]
      break;
 80034e2:	e000      	b.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80034e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034e6:	7cfb      	ldrb	r3, [r7, #19]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d10b      	bne.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034ec:	4b76      	ldr	r3, [pc, #472]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034f2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80034fa:	4973      	ldr	r1, [pc, #460]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003502:	e001      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003504:	7cfb      	ldrb	r3, [r7, #19]
 8003506:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d041      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003518:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800351c:	d02a      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800351e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003522:	d824      	bhi.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003524:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003528:	d008      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800352a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800352e:	d81e      	bhi.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003530:	2b00      	cmp	r3, #0
 8003532:	d00a      	beq.n	800354a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003534:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003538:	d010      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800353a:	e018      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800353c:	4b62      	ldr	r3, [pc, #392]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	4a61      	ldr	r2, [pc, #388]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003542:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003546:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003548:	e015      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	3304      	adds	r3, #4
 800354e:	2100      	movs	r1, #0
 8003550:	4618      	mov	r0, r3
 8003552:	f000 fa73 	bl	8003a3c <RCCEx_PLLSAI1_Config>
 8003556:	4603      	mov	r3, r0
 8003558:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800355a:	e00c      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	3320      	adds	r3, #32
 8003560:	2100      	movs	r1, #0
 8003562:	4618      	mov	r0, r3
 8003564:	f000 fb5e 	bl	8003c24 <RCCEx_PLLSAI2_Config>
 8003568:	4603      	mov	r3, r0
 800356a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800356c:	e003      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	74fb      	strb	r3, [r7, #19]
      break;
 8003572:	e000      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003574:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003576:	7cfb      	ldrb	r3, [r7, #19]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d10b      	bne.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800357c:	4b52      	ldr	r3, [pc, #328]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800357e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003582:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800358a:	494f      	ldr	r1, [pc, #316]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800358c:	4313      	orrs	r3, r2
 800358e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003592:	e001      	b.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003594:	7cfb      	ldrb	r3, [r7, #19]
 8003596:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	f000 80a0 	beq.w	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035a6:	2300      	movs	r3, #0
 80035a8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80035aa:	4b47      	ldr	r3, [pc, #284]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d101      	bne.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x152>
 80035b6:	2301      	movs	r3, #1
 80035b8:	e000      	b.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80035ba:	2300      	movs	r3, #0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d00d      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035c0:	4b41      	ldr	r3, [pc, #260]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035c4:	4a40      	ldr	r2, [pc, #256]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80035cc:	4b3e      	ldr	r3, [pc, #248]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035d4:	60bb      	str	r3, [r7, #8]
 80035d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035d8:	2301      	movs	r3, #1
 80035da:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035dc:	4b3b      	ldr	r3, [pc, #236]	@ (80036cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a3a      	ldr	r2, [pc, #232]	@ (80036cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80035e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80035e8:	f7fd fc10 	bl	8000e0c <HAL_GetTick>
 80035ec:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80035ee:	e009      	b.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035f0:	f7fd fc0c 	bl	8000e0c <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d902      	bls.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	74fb      	strb	r3, [r7, #19]
        break;
 8003602:	e005      	b.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003604:	4b31      	ldr	r3, [pc, #196]	@ (80036cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800360c:	2b00      	cmp	r3, #0
 800360e:	d0ef      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003610:	7cfb      	ldrb	r3, [r7, #19]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d15c      	bne.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003616:	4b2c      	ldr	r3, [pc, #176]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003618:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800361c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003620:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d01f      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800362e:	697a      	ldr	r2, [r7, #20]
 8003630:	429a      	cmp	r2, r3
 8003632:	d019      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003634:	4b24      	ldr	r3, [pc, #144]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003636:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800363a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800363e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003640:	4b21      	ldr	r3, [pc, #132]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003642:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003646:	4a20      	ldr	r2, [pc, #128]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003648:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800364c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003650:	4b1d      	ldr	r3, [pc, #116]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003652:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003656:	4a1c      	ldr	r2, [pc, #112]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003658:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800365c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003660:	4a19      	ldr	r2, [pc, #100]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	f003 0301 	and.w	r3, r3, #1
 800366e:	2b00      	cmp	r3, #0
 8003670:	d016      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003672:	f7fd fbcb 	bl	8000e0c <HAL_GetTick>
 8003676:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003678:	e00b      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800367a:	f7fd fbc7 	bl	8000e0c <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003688:	4293      	cmp	r3, r2
 800368a:	d902      	bls.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	74fb      	strb	r3, [r7, #19]
            break;
 8003690:	e006      	b.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003692:	4b0d      	ldr	r3, [pc, #52]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003694:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003698:	f003 0302 	and.w	r3, r3, #2
 800369c:	2b00      	cmp	r3, #0
 800369e:	d0ec      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80036a0:	7cfb      	ldrb	r3, [r7, #19]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d10c      	bne.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036a6:	4b08      	ldr	r3, [pc, #32]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036b6:	4904      	ldr	r1, [pc, #16]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80036be:	e009      	b.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80036c0:	7cfb      	ldrb	r3, [r7, #19]
 80036c2:	74bb      	strb	r3, [r7, #18]
 80036c4:	e006      	b.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80036c6:	bf00      	nop
 80036c8:	40021000 	.word	0x40021000
 80036cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036d0:	7cfb      	ldrb	r3, [r7, #19]
 80036d2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036d4:	7c7b      	ldrb	r3, [r7, #17]
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d105      	bne.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036da:	4b9e      	ldr	r3, [pc, #632]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036de:	4a9d      	ldr	r2, [pc, #628]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036e4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0301 	and.w	r3, r3, #1
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d00a      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036f2:	4b98      	ldr	r3, [pc, #608]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036f8:	f023 0203 	bic.w	r2, r3, #3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003700:	4994      	ldr	r1, [pc, #592]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003702:	4313      	orrs	r3, r2
 8003704:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0302 	and.w	r3, r3, #2
 8003710:	2b00      	cmp	r3, #0
 8003712:	d00a      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003714:	4b8f      	ldr	r3, [pc, #572]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003716:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800371a:	f023 020c 	bic.w	r2, r3, #12
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003722:	498c      	ldr	r1, [pc, #560]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003724:	4313      	orrs	r3, r2
 8003726:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0304 	and.w	r3, r3, #4
 8003732:	2b00      	cmp	r3, #0
 8003734:	d00a      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003736:	4b87      	ldr	r3, [pc, #540]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003738:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800373c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003744:	4983      	ldr	r1, [pc, #524]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003746:	4313      	orrs	r3, r2
 8003748:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0308 	and.w	r3, r3, #8
 8003754:	2b00      	cmp	r3, #0
 8003756:	d00a      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003758:	4b7e      	ldr	r3, [pc, #504]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800375a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800375e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003766:	497b      	ldr	r1, [pc, #492]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003768:	4313      	orrs	r3, r2
 800376a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0310 	and.w	r3, r3, #16
 8003776:	2b00      	cmp	r3, #0
 8003778:	d00a      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800377a:	4b76      	ldr	r3, [pc, #472]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800377c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003780:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003788:	4972      	ldr	r1, [pc, #456]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800378a:	4313      	orrs	r3, r2
 800378c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0320 	and.w	r3, r3, #32
 8003798:	2b00      	cmp	r3, #0
 800379a:	d00a      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800379c:	4b6d      	ldr	r3, [pc, #436]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800379e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037a2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037aa:	496a      	ldr	r1, [pc, #424]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ac:	4313      	orrs	r3, r2
 80037ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d00a      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80037be:	4b65      	ldr	r3, [pc, #404]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037c4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037cc:	4961      	ldr	r1, [pc, #388]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00a      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80037e0:	4b5c      	ldr	r3, [pc, #368]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037e6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037ee:	4959      	ldr	r1, [pc, #356]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00a      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003802:	4b54      	ldr	r3, [pc, #336]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003804:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003808:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003810:	4950      	ldr	r1, [pc, #320]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003812:	4313      	orrs	r3, r2
 8003814:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003820:	2b00      	cmp	r3, #0
 8003822:	d00a      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003824:	4b4b      	ldr	r3, [pc, #300]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003826:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800382a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003832:	4948      	ldr	r1, [pc, #288]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003834:	4313      	orrs	r3, r2
 8003836:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003842:	2b00      	cmp	r3, #0
 8003844:	d00a      	beq.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003846:	4b43      	ldr	r3, [pc, #268]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003848:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800384c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003854:	493f      	ldr	r1, [pc, #252]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003856:	4313      	orrs	r3, r2
 8003858:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d028      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003868:	4b3a      	ldr	r3, [pc, #232]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800386a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800386e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003876:	4937      	ldr	r1, [pc, #220]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003878:	4313      	orrs	r3, r2
 800387a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003882:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003886:	d106      	bne.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003888:	4b32      	ldr	r3, [pc, #200]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	4a31      	ldr	r2, [pc, #196]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800388e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003892:	60d3      	str	r3, [r2, #12]
 8003894:	e011      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800389a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800389e:	d10c      	bne.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	3304      	adds	r3, #4
 80038a4:	2101      	movs	r1, #1
 80038a6:	4618      	mov	r0, r3
 80038a8:	f000 f8c8 	bl	8003a3c <RCCEx_PLLSAI1_Config>
 80038ac:	4603      	mov	r3, r0
 80038ae:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80038b0:	7cfb      	ldrb	r3, [r7, #19]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d001      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80038b6:	7cfb      	ldrb	r3, [r7, #19]
 80038b8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d028      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80038c6:	4b23      	ldr	r3, [pc, #140]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038cc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038d4:	491f      	ldr	r1, [pc, #124]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80038e4:	d106      	bne.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038e6:	4b1b      	ldr	r3, [pc, #108]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	4a1a      	ldr	r2, [pc, #104]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80038f0:	60d3      	str	r3, [r2, #12]
 80038f2:	e011      	b.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80038fc:	d10c      	bne.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	3304      	adds	r3, #4
 8003902:	2101      	movs	r1, #1
 8003904:	4618      	mov	r0, r3
 8003906:	f000 f899 	bl	8003a3c <RCCEx_PLLSAI1_Config>
 800390a:	4603      	mov	r3, r0
 800390c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800390e:	7cfb      	ldrb	r3, [r7, #19]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d001      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003914:	7cfb      	ldrb	r3, [r7, #19]
 8003916:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d02b      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003924:	4b0b      	ldr	r3, [pc, #44]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003926:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800392a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003932:	4908      	ldr	r1, [pc, #32]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003934:	4313      	orrs	r3, r2
 8003936:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800393e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003942:	d109      	bne.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003944:	4b03      	ldr	r3, [pc, #12]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	4a02      	ldr	r2, [pc, #8]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800394a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800394e:	60d3      	str	r3, [r2, #12]
 8003950:	e014      	b.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003952:	bf00      	nop
 8003954:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800395c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003960:	d10c      	bne.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	3304      	adds	r3, #4
 8003966:	2101      	movs	r1, #1
 8003968:	4618      	mov	r0, r3
 800396a:	f000 f867 	bl	8003a3c <RCCEx_PLLSAI1_Config>
 800396e:	4603      	mov	r3, r0
 8003970:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003972:	7cfb      	ldrb	r3, [r7, #19]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d001      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003978:	7cfb      	ldrb	r3, [r7, #19]
 800397a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003984:	2b00      	cmp	r3, #0
 8003986:	d02f      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003988:	4b2b      	ldr	r3, [pc, #172]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800398a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800398e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003996:	4928      	ldr	r1, [pc, #160]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003998:	4313      	orrs	r3, r2
 800399a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80039a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80039a6:	d10d      	bne.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	3304      	adds	r3, #4
 80039ac:	2102      	movs	r1, #2
 80039ae:	4618      	mov	r0, r3
 80039b0:	f000 f844 	bl	8003a3c <RCCEx_PLLSAI1_Config>
 80039b4:	4603      	mov	r3, r0
 80039b6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039b8:	7cfb      	ldrb	r3, [r7, #19]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d014      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80039be:	7cfb      	ldrb	r3, [r7, #19]
 80039c0:	74bb      	strb	r3, [r7, #18]
 80039c2:	e011      	b.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80039c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039cc:	d10c      	bne.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	3320      	adds	r3, #32
 80039d2:	2102      	movs	r1, #2
 80039d4:	4618      	mov	r0, r3
 80039d6:	f000 f925 	bl	8003c24 <RCCEx_PLLSAI2_Config>
 80039da:	4603      	mov	r3, r0
 80039dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039de:	7cfb      	ldrb	r3, [r7, #19]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d001      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80039e4:	7cfb      	ldrb	r3, [r7, #19]
 80039e6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d00a      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80039f4:	4b10      	ldr	r3, [pc, #64]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80039f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039fa:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a02:	490d      	ldr	r1, [pc, #52]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a04:	4313      	orrs	r3, r2
 8003a06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d00b      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003a16:	4b08      	ldr	r3, [pc, #32]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a1c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a26:	4904      	ldr	r1, [pc, #16]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003a2e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3718      	adds	r7, #24
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	40021000 	.word	0x40021000

08003a3c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a46:	2300      	movs	r3, #0
 8003a48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a4a:	4b75      	ldr	r3, [pc, #468]	@ (8003c20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	f003 0303 	and.w	r3, r3, #3
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d018      	beq.n	8003a88 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003a56:	4b72      	ldr	r3, [pc, #456]	@ (8003c20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	f003 0203 	and.w	r2, r3, #3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d10d      	bne.n	8003a82 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
       ||
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d009      	beq.n	8003a82 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003a6e:	4b6c      	ldr	r3, [pc, #432]	@ (8003c20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	091b      	lsrs	r3, r3, #4
 8003a74:	f003 0307 	and.w	r3, r3, #7
 8003a78:	1c5a      	adds	r2, r3, #1
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
       ||
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d047      	beq.n	8003b12 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	73fb      	strb	r3, [r7, #15]
 8003a86:	e044      	b.n	8003b12 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2b03      	cmp	r3, #3
 8003a8e:	d018      	beq.n	8003ac2 <RCCEx_PLLSAI1_Config+0x86>
 8003a90:	2b03      	cmp	r3, #3
 8003a92:	d825      	bhi.n	8003ae0 <RCCEx_PLLSAI1_Config+0xa4>
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d002      	beq.n	8003a9e <RCCEx_PLLSAI1_Config+0x62>
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d009      	beq.n	8003ab0 <RCCEx_PLLSAI1_Config+0x74>
 8003a9c:	e020      	b.n	8003ae0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a9e:	4b60      	ldr	r3, [pc, #384]	@ (8003c20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d11d      	bne.n	8003ae6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003aae:	e01a      	b.n	8003ae6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ab0:	4b5b      	ldr	r3, [pc, #364]	@ (8003c20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d116      	bne.n	8003aea <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ac0:	e013      	b.n	8003aea <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003ac2:	4b57      	ldr	r3, [pc, #348]	@ (8003c20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d10f      	bne.n	8003aee <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003ace:	4b54      	ldr	r3, [pc, #336]	@ (8003c20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d109      	bne.n	8003aee <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003ade:	e006      	b.n	8003aee <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ae4:	e004      	b.n	8003af0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003ae6:	bf00      	nop
 8003ae8:	e002      	b.n	8003af0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003aea:	bf00      	nop
 8003aec:	e000      	b.n	8003af0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003aee:	bf00      	nop
    }

    if(status == HAL_OK)
 8003af0:	7bfb      	ldrb	r3, [r7, #15]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d10d      	bne.n	8003b12 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003af6:	4b4a      	ldr	r3, [pc, #296]	@ (8003c20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6819      	ldr	r1, [r3, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	3b01      	subs	r3, #1
 8003b08:	011b      	lsls	r3, r3, #4
 8003b0a:	430b      	orrs	r3, r1
 8003b0c:	4944      	ldr	r1, [pc, #272]	@ (8003c20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003b12:	7bfb      	ldrb	r3, [r7, #15]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d17d      	bne.n	8003c14 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003b18:	4b41      	ldr	r3, [pc, #260]	@ (8003c20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a40      	ldr	r2, [pc, #256]	@ (8003c20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b1e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003b22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b24:	f7fd f972 	bl	8000e0c <HAL_GetTick>
 8003b28:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b2a:	e009      	b.n	8003b40 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b2c:	f7fd f96e 	bl	8000e0c <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d902      	bls.n	8003b40 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	73fb      	strb	r3, [r7, #15]
        break;
 8003b3e:	e005      	b.n	8003b4c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b40:	4b37      	ldr	r3, [pc, #220]	@ (8003c20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d1ef      	bne.n	8003b2c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003b4c:	7bfb      	ldrb	r3, [r7, #15]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d160      	bne.n	8003c14 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d111      	bne.n	8003b7c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b58:	4b31      	ldr	r3, [pc, #196]	@ (8003c20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b5a:	691b      	ldr	r3, [r3, #16]
 8003b5c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003b60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	6892      	ldr	r2, [r2, #8]
 8003b68:	0211      	lsls	r1, r2, #8
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	68d2      	ldr	r2, [r2, #12]
 8003b6e:	0912      	lsrs	r2, r2, #4
 8003b70:	0452      	lsls	r2, r2, #17
 8003b72:	430a      	orrs	r2, r1
 8003b74:	492a      	ldr	r1, [pc, #168]	@ (8003c20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	610b      	str	r3, [r1, #16]
 8003b7a:	e027      	b.n	8003bcc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d112      	bne.n	8003ba8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b82:	4b27      	ldr	r3, [pc, #156]	@ (8003c20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003b8a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	6892      	ldr	r2, [r2, #8]
 8003b92:	0211      	lsls	r1, r2, #8
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	6912      	ldr	r2, [r2, #16]
 8003b98:	0852      	lsrs	r2, r2, #1
 8003b9a:	3a01      	subs	r2, #1
 8003b9c:	0552      	lsls	r2, r2, #21
 8003b9e:	430a      	orrs	r2, r1
 8003ba0:	491f      	ldr	r1, [pc, #124]	@ (8003c20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	610b      	str	r3, [r1, #16]
 8003ba6:	e011      	b.n	8003bcc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ba8:	4b1d      	ldr	r3, [pc, #116]	@ (8003c20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003baa:	691b      	ldr	r3, [r3, #16]
 8003bac:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003bb0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	6892      	ldr	r2, [r2, #8]
 8003bb8:	0211      	lsls	r1, r2, #8
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	6952      	ldr	r2, [r2, #20]
 8003bbe:	0852      	lsrs	r2, r2, #1
 8003bc0:	3a01      	subs	r2, #1
 8003bc2:	0652      	lsls	r2, r2, #25
 8003bc4:	430a      	orrs	r2, r1
 8003bc6:	4916      	ldr	r1, [pc, #88]	@ (8003c20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003bcc:	4b14      	ldr	r3, [pc, #80]	@ (8003c20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a13      	ldr	r2, [pc, #76]	@ (8003c20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bd2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003bd6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bd8:	f7fd f918 	bl	8000e0c <HAL_GetTick>
 8003bdc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003bde:	e009      	b.n	8003bf4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003be0:	f7fd f914 	bl	8000e0c <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d902      	bls.n	8003bf4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	73fb      	strb	r3, [r7, #15]
          break;
 8003bf2:	e005      	b.n	8003c00 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003bf4:	4b0a      	ldr	r3, [pc, #40]	@ (8003c20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d0ef      	beq.n	8003be0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003c00:	7bfb      	ldrb	r3, [r7, #15]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d106      	bne.n	8003c14 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003c06:	4b06      	ldr	r3, [pc, #24]	@ (8003c20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c08:	691a      	ldr	r2, [r3, #16]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	699b      	ldr	r3, [r3, #24]
 8003c0e:	4904      	ldr	r1, [pc, #16]	@ (8003c20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3710      	adds	r7, #16
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	40021000 	.word	0x40021000

08003c24 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003c32:	4b6a      	ldr	r3, [pc, #424]	@ (8003ddc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	f003 0303 	and.w	r3, r3, #3
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d018      	beq.n	8003c70 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003c3e:	4b67      	ldr	r3, [pc, #412]	@ (8003ddc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	f003 0203 	and.w	r2, r3, #3
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d10d      	bne.n	8003c6a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
       ||
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d009      	beq.n	8003c6a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003c56:	4b61      	ldr	r3, [pc, #388]	@ (8003ddc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	091b      	lsrs	r3, r3, #4
 8003c5c:	f003 0307 	and.w	r3, r3, #7
 8003c60:	1c5a      	adds	r2, r3, #1
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
       ||
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d047      	beq.n	8003cfa <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	73fb      	strb	r3, [r7, #15]
 8003c6e:	e044      	b.n	8003cfa <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2b03      	cmp	r3, #3
 8003c76:	d018      	beq.n	8003caa <RCCEx_PLLSAI2_Config+0x86>
 8003c78:	2b03      	cmp	r3, #3
 8003c7a:	d825      	bhi.n	8003cc8 <RCCEx_PLLSAI2_Config+0xa4>
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d002      	beq.n	8003c86 <RCCEx_PLLSAI2_Config+0x62>
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d009      	beq.n	8003c98 <RCCEx_PLLSAI2_Config+0x74>
 8003c84:	e020      	b.n	8003cc8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003c86:	4b55      	ldr	r3, [pc, #340]	@ (8003ddc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0302 	and.w	r3, r3, #2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d11d      	bne.n	8003cce <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c96:	e01a      	b.n	8003cce <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003c98:	4b50      	ldr	r3, [pc, #320]	@ (8003ddc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d116      	bne.n	8003cd2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ca8:	e013      	b.n	8003cd2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003caa:	4b4c      	ldr	r3, [pc, #304]	@ (8003ddc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d10f      	bne.n	8003cd6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003cb6:	4b49      	ldr	r3, [pc, #292]	@ (8003ddc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d109      	bne.n	8003cd6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003cc6:	e006      	b.n	8003cd6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	73fb      	strb	r3, [r7, #15]
      break;
 8003ccc:	e004      	b.n	8003cd8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003cce:	bf00      	nop
 8003cd0:	e002      	b.n	8003cd8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003cd2:	bf00      	nop
 8003cd4:	e000      	b.n	8003cd8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003cd6:	bf00      	nop
    }

    if(status == HAL_OK)
 8003cd8:	7bfb      	ldrb	r3, [r7, #15]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d10d      	bne.n	8003cfa <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003cde:	4b3f      	ldr	r3, [pc, #252]	@ (8003ddc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6819      	ldr	r1, [r3, #0]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	011b      	lsls	r3, r3, #4
 8003cf2:	430b      	orrs	r3, r1
 8003cf4:	4939      	ldr	r1, [pc, #228]	@ (8003ddc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003cfa:	7bfb      	ldrb	r3, [r7, #15]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d167      	bne.n	8003dd0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003d00:	4b36      	ldr	r3, [pc, #216]	@ (8003ddc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a35      	ldr	r2, [pc, #212]	@ (8003ddc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d0c:	f7fd f87e 	bl	8000e0c <HAL_GetTick>
 8003d10:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003d12:	e009      	b.n	8003d28 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003d14:	f7fd f87a 	bl	8000e0c <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d902      	bls.n	8003d28 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	73fb      	strb	r3, [r7, #15]
        break;
 8003d26:	e005      	b.n	8003d34 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003d28:	4b2c      	ldr	r3, [pc, #176]	@ (8003ddc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d1ef      	bne.n	8003d14 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003d34:	7bfb      	ldrb	r3, [r7, #15]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d14a      	bne.n	8003dd0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d111      	bne.n	8003d64 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003d40:	4b26      	ldr	r3, [pc, #152]	@ (8003ddc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d42:	695b      	ldr	r3, [r3, #20]
 8003d44:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003d48:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	6892      	ldr	r2, [r2, #8]
 8003d50:	0211      	lsls	r1, r2, #8
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	68d2      	ldr	r2, [r2, #12]
 8003d56:	0912      	lsrs	r2, r2, #4
 8003d58:	0452      	lsls	r2, r2, #17
 8003d5a:	430a      	orrs	r2, r1
 8003d5c:	491f      	ldr	r1, [pc, #124]	@ (8003ddc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	614b      	str	r3, [r1, #20]
 8003d62:	e011      	b.n	8003d88 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003d64:	4b1d      	ldr	r3, [pc, #116]	@ (8003ddc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d66:	695b      	ldr	r3, [r3, #20]
 8003d68:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003d6c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	6892      	ldr	r2, [r2, #8]
 8003d74:	0211      	lsls	r1, r2, #8
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	6912      	ldr	r2, [r2, #16]
 8003d7a:	0852      	lsrs	r2, r2, #1
 8003d7c:	3a01      	subs	r2, #1
 8003d7e:	0652      	lsls	r2, r2, #25
 8003d80:	430a      	orrs	r2, r1
 8003d82:	4916      	ldr	r1, [pc, #88]	@ (8003ddc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003d88:	4b14      	ldr	r3, [pc, #80]	@ (8003ddc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a13      	ldr	r2, [pc, #76]	@ (8003ddc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d92:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d94:	f7fd f83a 	bl	8000e0c <HAL_GetTick>
 8003d98:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003d9a:	e009      	b.n	8003db0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003d9c:	f7fd f836 	bl	8000e0c <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d902      	bls.n	8003db0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	73fb      	strb	r3, [r7, #15]
          break;
 8003dae:	e005      	b.n	8003dbc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003db0:	4b0a      	ldr	r3, [pc, #40]	@ (8003ddc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d0ef      	beq.n	8003d9c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003dbc:	7bfb      	ldrb	r3, [r7, #15]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d106      	bne.n	8003dd0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003dc2:	4b06      	ldr	r3, [pc, #24]	@ (8003ddc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dc4:	695a      	ldr	r2, [r3, #20]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	695b      	ldr	r3, [r3, #20]
 8003dca:	4904      	ldr	r1, [pc, #16]	@ (8003ddc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3710      	adds	r7, #16
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	40021000 	.word	0x40021000

08003de0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b082      	sub	sp, #8
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d101      	bne.n	8003df2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e049      	b.n	8003e86 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d106      	bne.n	8003e0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f7fc fe8c 	bl	8000b24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2202      	movs	r2, #2
 8003e10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	3304      	adds	r3, #4
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	4610      	mov	r0, r2
 8003e20:	f000 fd1c 	bl	800485c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3708      	adds	r7, #8
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
	...

08003e90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b085      	sub	sp, #20
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d001      	beq.n	8003ea8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e04f      	b.n	8003f48 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2202      	movs	r2, #2
 8003eac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	68da      	ldr	r2, [r3, #12]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f042 0201 	orr.w	r2, r2, #1
 8003ebe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a23      	ldr	r2, [pc, #140]	@ (8003f54 <HAL_TIM_Base_Start_IT+0xc4>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d01d      	beq.n	8003f06 <HAL_TIM_Base_Start_IT+0x76>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ed2:	d018      	beq.n	8003f06 <HAL_TIM_Base_Start_IT+0x76>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a1f      	ldr	r2, [pc, #124]	@ (8003f58 <HAL_TIM_Base_Start_IT+0xc8>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d013      	beq.n	8003f06 <HAL_TIM_Base_Start_IT+0x76>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a1e      	ldr	r2, [pc, #120]	@ (8003f5c <HAL_TIM_Base_Start_IT+0xcc>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d00e      	beq.n	8003f06 <HAL_TIM_Base_Start_IT+0x76>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a1c      	ldr	r2, [pc, #112]	@ (8003f60 <HAL_TIM_Base_Start_IT+0xd0>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d009      	beq.n	8003f06 <HAL_TIM_Base_Start_IT+0x76>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a1b      	ldr	r2, [pc, #108]	@ (8003f64 <HAL_TIM_Base_Start_IT+0xd4>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d004      	beq.n	8003f06 <HAL_TIM_Base_Start_IT+0x76>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a19      	ldr	r2, [pc, #100]	@ (8003f68 <HAL_TIM_Base_Start_IT+0xd8>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d115      	bne.n	8003f32 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	689a      	ldr	r2, [r3, #8]
 8003f0c:	4b17      	ldr	r3, [pc, #92]	@ (8003f6c <HAL_TIM_Base_Start_IT+0xdc>)
 8003f0e:	4013      	ands	r3, r2
 8003f10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2b06      	cmp	r3, #6
 8003f16:	d015      	beq.n	8003f44 <HAL_TIM_Base_Start_IT+0xb4>
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f1e:	d011      	beq.n	8003f44 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f042 0201 	orr.w	r2, r2, #1
 8003f2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f30:	e008      	b.n	8003f44 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f042 0201 	orr.w	r2, r2, #1
 8003f40:	601a      	str	r2, [r3, #0]
 8003f42:	e000      	b.n	8003f46 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f44:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f46:	2300      	movs	r3, #0
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3714      	adds	r7, #20
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr
 8003f54:	40012c00 	.word	0x40012c00
 8003f58:	40000400 	.word	0x40000400
 8003f5c:	40000800 	.word	0x40000800
 8003f60:	40000c00 	.word	0x40000c00
 8003f64:	40013400 	.word	0x40013400
 8003f68:	40014000 	.word	0x40014000
 8003f6c:	00010007 	.word	0x00010007

08003f70 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b082      	sub	sp, #8
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d101      	bne.n	8003f82 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e049      	b.n	8004016 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d106      	bne.n	8003f9c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 f841 	bl	800401e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2202      	movs	r2, #2
 8003fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	3304      	adds	r3, #4
 8003fac:	4619      	mov	r1, r3
 8003fae:	4610      	mov	r0, r2
 8003fb0:	f000 fc54 	bl	800485c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3708      	adds	r7, #8
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}

0800401e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800401e:	b480      	push	{r7}
 8004020:	b083      	sub	sp, #12
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004026:	bf00      	nop
 8004028:	370c      	adds	r7, #12
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr
	...

08004034 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d109      	bne.n	8004058 <HAL_TIM_PWM_Start+0x24>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800404a:	b2db      	uxtb	r3, r3
 800404c:	2b01      	cmp	r3, #1
 800404e:	bf14      	ite	ne
 8004050:	2301      	movne	r3, #1
 8004052:	2300      	moveq	r3, #0
 8004054:	b2db      	uxtb	r3, r3
 8004056:	e03c      	b.n	80040d2 <HAL_TIM_PWM_Start+0x9e>
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	2b04      	cmp	r3, #4
 800405c:	d109      	bne.n	8004072 <HAL_TIM_PWM_Start+0x3e>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004064:	b2db      	uxtb	r3, r3
 8004066:	2b01      	cmp	r3, #1
 8004068:	bf14      	ite	ne
 800406a:	2301      	movne	r3, #1
 800406c:	2300      	moveq	r3, #0
 800406e:	b2db      	uxtb	r3, r3
 8004070:	e02f      	b.n	80040d2 <HAL_TIM_PWM_Start+0x9e>
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	2b08      	cmp	r3, #8
 8004076:	d109      	bne.n	800408c <HAL_TIM_PWM_Start+0x58>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800407e:	b2db      	uxtb	r3, r3
 8004080:	2b01      	cmp	r3, #1
 8004082:	bf14      	ite	ne
 8004084:	2301      	movne	r3, #1
 8004086:	2300      	moveq	r3, #0
 8004088:	b2db      	uxtb	r3, r3
 800408a:	e022      	b.n	80040d2 <HAL_TIM_PWM_Start+0x9e>
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	2b0c      	cmp	r3, #12
 8004090:	d109      	bne.n	80040a6 <HAL_TIM_PWM_Start+0x72>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004098:	b2db      	uxtb	r3, r3
 800409a:	2b01      	cmp	r3, #1
 800409c:	bf14      	ite	ne
 800409e:	2301      	movne	r3, #1
 80040a0:	2300      	moveq	r3, #0
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	e015      	b.n	80040d2 <HAL_TIM_PWM_Start+0x9e>
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	2b10      	cmp	r3, #16
 80040aa:	d109      	bne.n	80040c0 <HAL_TIM_PWM_Start+0x8c>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	bf14      	ite	ne
 80040b8:	2301      	movne	r3, #1
 80040ba:	2300      	moveq	r3, #0
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	e008      	b.n	80040d2 <HAL_TIM_PWM_Start+0x9e>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	bf14      	ite	ne
 80040cc:	2301      	movne	r3, #1
 80040ce:	2300      	moveq	r3, #0
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d001      	beq.n	80040da <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e09c      	b.n	8004214 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d104      	bne.n	80040ea <HAL_TIM_PWM_Start+0xb6>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2202      	movs	r2, #2
 80040e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80040e8:	e023      	b.n	8004132 <HAL_TIM_PWM_Start+0xfe>
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	2b04      	cmp	r3, #4
 80040ee:	d104      	bne.n	80040fa <HAL_TIM_PWM_Start+0xc6>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2202      	movs	r2, #2
 80040f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80040f8:	e01b      	b.n	8004132 <HAL_TIM_PWM_Start+0xfe>
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	2b08      	cmp	r3, #8
 80040fe:	d104      	bne.n	800410a <HAL_TIM_PWM_Start+0xd6>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2202      	movs	r2, #2
 8004104:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004108:	e013      	b.n	8004132 <HAL_TIM_PWM_Start+0xfe>
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	2b0c      	cmp	r3, #12
 800410e:	d104      	bne.n	800411a <HAL_TIM_PWM_Start+0xe6>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2202      	movs	r2, #2
 8004114:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004118:	e00b      	b.n	8004132 <HAL_TIM_PWM_Start+0xfe>
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	2b10      	cmp	r3, #16
 800411e:	d104      	bne.n	800412a <HAL_TIM_PWM_Start+0xf6>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2202      	movs	r2, #2
 8004124:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004128:	e003      	b.n	8004132 <HAL_TIM_PWM_Start+0xfe>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2202      	movs	r2, #2
 800412e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2201      	movs	r2, #1
 8004138:	6839      	ldr	r1, [r7, #0]
 800413a:	4618      	mov	r0, r3
 800413c:	f000 ffa4 	bl	8005088 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a35      	ldr	r2, [pc, #212]	@ (800421c <HAL_TIM_PWM_Start+0x1e8>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d013      	beq.n	8004172 <HAL_TIM_PWM_Start+0x13e>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a34      	ldr	r2, [pc, #208]	@ (8004220 <HAL_TIM_PWM_Start+0x1ec>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d00e      	beq.n	8004172 <HAL_TIM_PWM_Start+0x13e>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a32      	ldr	r2, [pc, #200]	@ (8004224 <HAL_TIM_PWM_Start+0x1f0>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d009      	beq.n	8004172 <HAL_TIM_PWM_Start+0x13e>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a31      	ldr	r2, [pc, #196]	@ (8004228 <HAL_TIM_PWM_Start+0x1f4>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d004      	beq.n	8004172 <HAL_TIM_PWM_Start+0x13e>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a2f      	ldr	r2, [pc, #188]	@ (800422c <HAL_TIM_PWM_Start+0x1f8>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d101      	bne.n	8004176 <HAL_TIM_PWM_Start+0x142>
 8004172:	2301      	movs	r3, #1
 8004174:	e000      	b.n	8004178 <HAL_TIM_PWM_Start+0x144>
 8004176:	2300      	movs	r3, #0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d007      	beq.n	800418c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800418a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a22      	ldr	r2, [pc, #136]	@ (800421c <HAL_TIM_PWM_Start+0x1e8>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d01d      	beq.n	80041d2 <HAL_TIM_PWM_Start+0x19e>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800419e:	d018      	beq.n	80041d2 <HAL_TIM_PWM_Start+0x19e>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a22      	ldr	r2, [pc, #136]	@ (8004230 <HAL_TIM_PWM_Start+0x1fc>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d013      	beq.n	80041d2 <HAL_TIM_PWM_Start+0x19e>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a21      	ldr	r2, [pc, #132]	@ (8004234 <HAL_TIM_PWM_Start+0x200>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d00e      	beq.n	80041d2 <HAL_TIM_PWM_Start+0x19e>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a1f      	ldr	r2, [pc, #124]	@ (8004238 <HAL_TIM_PWM_Start+0x204>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d009      	beq.n	80041d2 <HAL_TIM_PWM_Start+0x19e>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a17      	ldr	r2, [pc, #92]	@ (8004220 <HAL_TIM_PWM_Start+0x1ec>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d004      	beq.n	80041d2 <HAL_TIM_PWM_Start+0x19e>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a15      	ldr	r2, [pc, #84]	@ (8004224 <HAL_TIM_PWM_Start+0x1f0>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d115      	bne.n	80041fe <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	689a      	ldr	r2, [r3, #8]
 80041d8:	4b18      	ldr	r3, [pc, #96]	@ (800423c <HAL_TIM_PWM_Start+0x208>)
 80041da:	4013      	ands	r3, r2
 80041dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2b06      	cmp	r3, #6
 80041e2:	d015      	beq.n	8004210 <HAL_TIM_PWM_Start+0x1dc>
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041ea:	d011      	beq.n	8004210 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f042 0201 	orr.w	r2, r2, #1
 80041fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041fc:	e008      	b.n	8004210 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f042 0201 	orr.w	r2, r2, #1
 800420c:	601a      	str	r2, [r3, #0]
 800420e:	e000      	b.n	8004212 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004210:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004212:	2300      	movs	r3, #0
}
 8004214:	4618      	mov	r0, r3
 8004216:	3710      	adds	r7, #16
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}
 800421c:	40012c00 	.word	0x40012c00
 8004220:	40013400 	.word	0x40013400
 8004224:	40014000 	.word	0x40014000
 8004228:	40014400 	.word	0x40014400
 800422c:	40014800 	.word	0x40014800
 8004230:	40000400 	.word	0x40000400
 8004234:	40000800 	.word	0x40000800
 8004238:	40000c00 	.word	0x40000c00
 800423c:	00010007 	.word	0x00010007

08004240 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	691b      	ldr	r3, [r3, #16]
 8004256:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	f003 0302 	and.w	r3, r3, #2
 800425e:	2b00      	cmp	r3, #0
 8004260:	d020      	beq.n	80042a4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f003 0302 	and.w	r3, r3, #2
 8004268:	2b00      	cmp	r3, #0
 800426a:	d01b      	beq.n	80042a4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f06f 0202 	mvn.w	r2, #2
 8004274:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2201      	movs	r2, #1
 800427a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	699b      	ldr	r3, [r3, #24]
 8004282:	f003 0303 	and.w	r3, r3, #3
 8004286:	2b00      	cmp	r3, #0
 8004288:	d003      	beq.n	8004292 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 fac7 	bl	800481e <HAL_TIM_IC_CaptureCallback>
 8004290:	e005      	b.n	800429e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f000 fab9 	bl	800480a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f000 faca 	bl	8004832 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	f003 0304 	and.w	r3, r3, #4
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d020      	beq.n	80042f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f003 0304 	and.w	r3, r3, #4
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d01b      	beq.n	80042f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f06f 0204 	mvn.w	r2, #4
 80042c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2202      	movs	r2, #2
 80042c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d003      	beq.n	80042de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 faa1 	bl	800481e <HAL_TIM_IC_CaptureCallback>
 80042dc:	e005      	b.n	80042ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f000 fa93 	bl	800480a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f000 faa4 	bl	8004832 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	f003 0308 	and.w	r3, r3, #8
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d020      	beq.n	800433c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f003 0308 	and.w	r3, r3, #8
 8004300:	2b00      	cmp	r3, #0
 8004302:	d01b      	beq.n	800433c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f06f 0208 	mvn.w	r2, #8
 800430c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2204      	movs	r2, #4
 8004312:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	69db      	ldr	r3, [r3, #28]
 800431a:	f003 0303 	and.w	r3, r3, #3
 800431e:	2b00      	cmp	r3, #0
 8004320:	d003      	beq.n	800432a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f000 fa7b 	bl	800481e <HAL_TIM_IC_CaptureCallback>
 8004328:	e005      	b.n	8004336 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f000 fa6d 	bl	800480a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f000 fa7e 	bl	8004832 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	f003 0310 	and.w	r3, r3, #16
 8004342:	2b00      	cmp	r3, #0
 8004344:	d020      	beq.n	8004388 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f003 0310 	and.w	r3, r3, #16
 800434c:	2b00      	cmp	r3, #0
 800434e:	d01b      	beq.n	8004388 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f06f 0210 	mvn.w	r2, #16
 8004358:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2208      	movs	r2, #8
 800435e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	69db      	ldr	r3, [r3, #28]
 8004366:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800436a:	2b00      	cmp	r3, #0
 800436c:	d003      	beq.n	8004376 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 fa55 	bl	800481e <HAL_TIM_IC_CaptureCallback>
 8004374:	e005      	b.n	8004382 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 fa47 	bl	800480a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f000 fa58 	bl	8004832 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	f003 0301 	and.w	r3, r3, #1
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00c      	beq.n	80043ac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f003 0301 	and.w	r3, r3, #1
 8004398:	2b00      	cmp	r3, #0
 800439a:	d007      	beq.n	80043ac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f06f 0201 	mvn.w	r2, #1
 80043a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f7fc fa16 	bl	80007d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d104      	bne.n	80043c0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d00c      	beq.n	80043da <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d007      	beq.n	80043da <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80043d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f000 ff0f 	bl	80051f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d00c      	beq.n	80043fe <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d007      	beq.n	80043fe <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80043f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f000 ff07 	bl	800520c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004404:	2b00      	cmp	r3, #0
 8004406:	d00c      	beq.n	8004422 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800440e:	2b00      	cmp	r3, #0
 8004410:	d007      	beq.n	8004422 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800441a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f000 fa12 	bl	8004846 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	f003 0320 	and.w	r3, r3, #32
 8004428:	2b00      	cmp	r3, #0
 800442a:	d00c      	beq.n	8004446 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f003 0320 	and.w	r3, r3, #32
 8004432:	2b00      	cmp	r3, #0
 8004434:	d007      	beq.n	8004446 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f06f 0220 	mvn.w	r2, #32
 800443e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f000 fecf 	bl	80051e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004446:	bf00      	nop
 8004448:	3710      	adds	r7, #16
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
	...

08004450 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b086      	sub	sp, #24
 8004454:	af00      	add	r7, sp, #0
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	60b9      	str	r1, [r7, #8]
 800445a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800445c:	2300      	movs	r3, #0
 800445e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004466:	2b01      	cmp	r3, #1
 8004468:	d101      	bne.n	800446e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800446a:	2302      	movs	r3, #2
 800446c:	e0ff      	b.n	800466e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2201      	movs	r2, #1
 8004472:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2b14      	cmp	r3, #20
 800447a:	f200 80f0 	bhi.w	800465e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800447e:	a201      	add	r2, pc, #4	@ (adr r2, 8004484 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004484:	080044d9 	.word	0x080044d9
 8004488:	0800465f 	.word	0x0800465f
 800448c:	0800465f 	.word	0x0800465f
 8004490:	0800465f 	.word	0x0800465f
 8004494:	08004519 	.word	0x08004519
 8004498:	0800465f 	.word	0x0800465f
 800449c:	0800465f 	.word	0x0800465f
 80044a0:	0800465f 	.word	0x0800465f
 80044a4:	0800455b 	.word	0x0800455b
 80044a8:	0800465f 	.word	0x0800465f
 80044ac:	0800465f 	.word	0x0800465f
 80044b0:	0800465f 	.word	0x0800465f
 80044b4:	0800459b 	.word	0x0800459b
 80044b8:	0800465f 	.word	0x0800465f
 80044bc:	0800465f 	.word	0x0800465f
 80044c0:	0800465f 	.word	0x0800465f
 80044c4:	080045dd 	.word	0x080045dd
 80044c8:	0800465f 	.word	0x0800465f
 80044cc:	0800465f 	.word	0x0800465f
 80044d0:	0800465f 	.word	0x0800465f
 80044d4:	0800461d 	.word	0x0800461d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	68b9      	ldr	r1, [r7, #8]
 80044de:	4618      	mov	r0, r3
 80044e0:	f000 fa62 	bl	80049a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	699a      	ldr	r2, [r3, #24]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f042 0208 	orr.w	r2, r2, #8
 80044f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	699a      	ldr	r2, [r3, #24]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f022 0204 	bic.w	r2, r2, #4
 8004502:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	6999      	ldr	r1, [r3, #24]
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	691a      	ldr	r2, [r3, #16]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	430a      	orrs	r2, r1
 8004514:	619a      	str	r2, [r3, #24]
      break;
 8004516:	e0a5      	b.n	8004664 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	68b9      	ldr	r1, [r7, #8]
 800451e:	4618      	mov	r0, r3
 8004520:	f000 fad2 	bl	8004ac8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	699a      	ldr	r2, [r3, #24]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004532:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	699a      	ldr	r2, [r3, #24]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004542:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	6999      	ldr	r1, [r3, #24]
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	021a      	lsls	r2, r3, #8
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	430a      	orrs	r2, r1
 8004556:	619a      	str	r2, [r3, #24]
      break;
 8004558:	e084      	b.n	8004664 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68b9      	ldr	r1, [r7, #8]
 8004560:	4618      	mov	r0, r3
 8004562:	f000 fb3b 	bl	8004bdc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	69da      	ldr	r2, [r3, #28]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f042 0208 	orr.w	r2, r2, #8
 8004574:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	69da      	ldr	r2, [r3, #28]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f022 0204 	bic.w	r2, r2, #4
 8004584:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	69d9      	ldr	r1, [r3, #28]
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	691a      	ldr	r2, [r3, #16]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	430a      	orrs	r2, r1
 8004596:	61da      	str	r2, [r3, #28]
      break;
 8004598:	e064      	b.n	8004664 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68b9      	ldr	r1, [r7, #8]
 80045a0:	4618      	mov	r0, r3
 80045a2:	f000 fba3 	bl	8004cec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	69da      	ldr	r2, [r3, #28]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80045b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	69da      	ldr	r2, [r3, #28]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	69d9      	ldr	r1, [r3, #28]
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	691b      	ldr	r3, [r3, #16]
 80045d0:	021a      	lsls	r2, r3, #8
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	430a      	orrs	r2, r1
 80045d8:	61da      	str	r2, [r3, #28]
      break;
 80045da:	e043      	b.n	8004664 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	68b9      	ldr	r1, [r7, #8]
 80045e2:	4618      	mov	r0, r3
 80045e4:	f000 fbec 	bl	8004dc0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f042 0208 	orr.w	r2, r2, #8
 80045f6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f022 0204 	bic.w	r2, r2, #4
 8004606:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	691a      	ldr	r2, [r3, #16]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	430a      	orrs	r2, r1
 8004618:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800461a:	e023      	b.n	8004664 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68b9      	ldr	r1, [r7, #8]
 8004622:	4618      	mov	r0, r3
 8004624:	f000 fc30 	bl	8004e88 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004636:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004646:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	021a      	lsls	r2, r3, #8
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	430a      	orrs	r2, r1
 800465a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800465c:	e002      	b.n	8004664 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	75fb      	strb	r3, [r7, #23]
      break;
 8004662:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2200      	movs	r2, #0
 8004668:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800466c:	7dfb      	ldrb	r3, [r7, #23]
}
 800466e:	4618      	mov	r0, r3
 8004670:	3718      	adds	r7, #24
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop

08004678 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004682:	2300      	movs	r3, #0
 8004684:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800468c:	2b01      	cmp	r3, #1
 800468e:	d101      	bne.n	8004694 <HAL_TIM_ConfigClockSource+0x1c>
 8004690:	2302      	movs	r3, #2
 8004692:	e0b6      	b.n	8004802 <HAL_TIM_ConfigClockSource+0x18a>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2202      	movs	r2, #2
 80046a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046b2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80046b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80046be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	68ba      	ldr	r2, [r7, #8]
 80046c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046d0:	d03e      	beq.n	8004750 <HAL_TIM_ConfigClockSource+0xd8>
 80046d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046d6:	f200 8087 	bhi.w	80047e8 <HAL_TIM_ConfigClockSource+0x170>
 80046da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046de:	f000 8086 	beq.w	80047ee <HAL_TIM_ConfigClockSource+0x176>
 80046e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046e6:	d87f      	bhi.n	80047e8 <HAL_TIM_ConfigClockSource+0x170>
 80046e8:	2b70      	cmp	r3, #112	@ 0x70
 80046ea:	d01a      	beq.n	8004722 <HAL_TIM_ConfigClockSource+0xaa>
 80046ec:	2b70      	cmp	r3, #112	@ 0x70
 80046ee:	d87b      	bhi.n	80047e8 <HAL_TIM_ConfigClockSource+0x170>
 80046f0:	2b60      	cmp	r3, #96	@ 0x60
 80046f2:	d050      	beq.n	8004796 <HAL_TIM_ConfigClockSource+0x11e>
 80046f4:	2b60      	cmp	r3, #96	@ 0x60
 80046f6:	d877      	bhi.n	80047e8 <HAL_TIM_ConfigClockSource+0x170>
 80046f8:	2b50      	cmp	r3, #80	@ 0x50
 80046fa:	d03c      	beq.n	8004776 <HAL_TIM_ConfigClockSource+0xfe>
 80046fc:	2b50      	cmp	r3, #80	@ 0x50
 80046fe:	d873      	bhi.n	80047e8 <HAL_TIM_ConfigClockSource+0x170>
 8004700:	2b40      	cmp	r3, #64	@ 0x40
 8004702:	d058      	beq.n	80047b6 <HAL_TIM_ConfigClockSource+0x13e>
 8004704:	2b40      	cmp	r3, #64	@ 0x40
 8004706:	d86f      	bhi.n	80047e8 <HAL_TIM_ConfigClockSource+0x170>
 8004708:	2b30      	cmp	r3, #48	@ 0x30
 800470a:	d064      	beq.n	80047d6 <HAL_TIM_ConfigClockSource+0x15e>
 800470c:	2b30      	cmp	r3, #48	@ 0x30
 800470e:	d86b      	bhi.n	80047e8 <HAL_TIM_ConfigClockSource+0x170>
 8004710:	2b20      	cmp	r3, #32
 8004712:	d060      	beq.n	80047d6 <HAL_TIM_ConfigClockSource+0x15e>
 8004714:	2b20      	cmp	r3, #32
 8004716:	d867      	bhi.n	80047e8 <HAL_TIM_ConfigClockSource+0x170>
 8004718:	2b00      	cmp	r3, #0
 800471a:	d05c      	beq.n	80047d6 <HAL_TIM_ConfigClockSource+0x15e>
 800471c:	2b10      	cmp	r3, #16
 800471e:	d05a      	beq.n	80047d6 <HAL_TIM_ConfigClockSource+0x15e>
 8004720:	e062      	b.n	80047e8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004732:	f000 fc89 	bl	8005048 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004744:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	68ba      	ldr	r2, [r7, #8]
 800474c:	609a      	str	r2, [r3, #8]
      break;
 800474e:	e04f      	b.n	80047f0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004760:	f000 fc72 	bl	8005048 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	689a      	ldr	r2, [r3, #8]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004772:	609a      	str	r2, [r3, #8]
      break;
 8004774:	e03c      	b.n	80047f0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004782:	461a      	mov	r2, r3
 8004784:	f000 fbe6 	bl	8004f54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2150      	movs	r1, #80	@ 0x50
 800478e:	4618      	mov	r0, r3
 8004790:	f000 fc3f 	bl	8005012 <TIM_ITRx_SetConfig>
      break;
 8004794:	e02c      	b.n	80047f0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80047a2:	461a      	mov	r2, r3
 80047a4:	f000 fc05 	bl	8004fb2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2160      	movs	r1, #96	@ 0x60
 80047ae:	4618      	mov	r0, r3
 80047b0:	f000 fc2f 	bl	8005012 <TIM_ITRx_SetConfig>
      break;
 80047b4:	e01c      	b.n	80047f0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047c2:	461a      	mov	r2, r3
 80047c4:	f000 fbc6 	bl	8004f54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2140      	movs	r1, #64	@ 0x40
 80047ce:	4618      	mov	r0, r3
 80047d0:	f000 fc1f 	bl	8005012 <TIM_ITRx_SetConfig>
      break;
 80047d4:	e00c      	b.n	80047f0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4619      	mov	r1, r3
 80047e0:	4610      	mov	r0, r2
 80047e2:	f000 fc16 	bl	8005012 <TIM_ITRx_SetConfig>
      break;
 80047e6:	e003      	b.n	80047f0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	73fb      	strb	r3, [r7, #15]
      break;
 80047ec:	e000      	b.n	80047f0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80047ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004800:	7bfb      	ldrb	r3, [r7, #15]
}
 8004802:	4618      	mov	r0, r3
 8004804:	3710      	adds	r7, #16
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}

0800480a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800480a:	b480      	push	{r7}
 800480c:	b083      	sub	sp, #12
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004812:	bf00      	nop
 8004814:	370c      	adds	r7, #12
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr

0800481e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800481e:	b480      	push	{r7}
 8004820:	b083      	sub	sp, #12
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004826:	bf00      	nop
 8004828:	370c      	adds	r7, #12
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr

08004832 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004832:	b480      	push	{r7}
 8004834:	b083      	sub	sp, #12
 8004836:	af00      	add	r7, sp, #0
 8004838:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800483a:	bf00      	nop
 800483c:	370c      	adds	r7, #12
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr

08004846 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004846:	b480      	push	{r7}
 8004848:	b083      	sub	sp, #12
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800484e:	bf00      	nop
 8004850:	370c      	adds	r7, #12
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr
	...

0800485c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800485c:	b480      	push	{r7}
 800485e:	b085      	sub	sp, #20
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4a46      	ldr	r2, [pc, #280]	@ (8004988 <TIM_Base_SetConfig+0x12c>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d013      	beq.n	800489c <TIM_Base_SetConfig+0x40>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800487a:	d00f      	beq.n	800489c <TIM_Base_SetConfig+0x40>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4a43      	ldr	r2, [pc, #268]	@ (800498c <TIM_Base_SetConfig+0x130>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d00b      	beq.n	800489c <TIM_Base_SetConfig+0x40>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4a42      	ldr	r2, [pc, #264]	@ (8004990 <TIM_Base_SetConfig+0x134>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d007      	beq.n	800489c <TIM_Base_SetConfig+0x40>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4a41      	ldr	r2, [pc, #260]	@ (8004994 <TIM_Base_SetConfig+0x138>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d003      	beq.n	800489c <TIM_Base_SetConfig+0x40>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	4a40      	ldr	r2, [pc, #256]	@ (8004998 <TIM_Base_SetConfig+0x13c>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d108      	bne.n	80048ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	68fa      	ldr	r2, [r7, #12]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a35      	ldr	r2, [pc, #212]	@ (8004988 <TIM_Base_SetConfig+0x12c>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d01f      	beq.n	80048f6 <TIM_Base_SetConfig+0x9a>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048bc:	d01b      	beq.n	80048f6 <TIM_Base_SetConfig+0x9a>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a32      	ldr	r2, [pc, #200]	@ (800498c <TIM_Base_SetConfig+0x130>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d017      	beq.n	80048f6 <TIM_Base_SetConfig+0x9a>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a31      	ldr	r2, [pc, #196]	@ (8004990 <TIM_Base_SetConfig+0x134>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d013      	beq.n	80048f6 <TIM_Base_SetConfig+0x9a>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a30      	ldr	r2, [pc, #192]	@ (8004994 <TIM_Base_SetConfig+0x138>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d00f      	beq.n	80048f6 <TIM_Base_SetConfig+0x9a>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a2f      	ldr	r2, [pc, #188]	@ (8004998 <TIM_Base_SetConfig+0x13c>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d00b      	beq.n	80048f6 <TIM_Base_SetConfig+0x9a>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a2e      	ldr	r2, [pc, #184]	@ (800499c <TIM_Base_SetConfig+0x140>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d007      	beq.n	80048f6 <TIM_Base_SetConfig+0x9a>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a2d      	ldr	r2, [pc, #180]	@ (80049a0 <TIM_Base_SetConfig+0x144>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d003      	beq.n	80048f6 <TIM_Base_SetConfig+0x9a>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a2c      	ldr	r2, [pc, #176]	@ (80049a4 <TIM_Base_SetConfig+0x148>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d108      	bne.n	8004908 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	68fa      	ldr	r2, [r7, #12]
 8004904:	4313      	orrs	r3, r2
 8004906:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	695b      	ldr	r3, [r3, #20]
 8004912:	4313      	orrs	r3, r2
 8004914:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	68fa      	ldr	r2, [r7, #12]
 800491a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	689a      	ldr	r2, [r3, #8]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4a16      	ldr	r2, [pc, #88]	@ (8004988 <TIM_Base_SetConfig+0x12c>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d00f      	beq.n	8004954 <TIM_Base_SetConfig+0xf8>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4a18      	ldr	r2, [pc, #96]	@ (8004998 <TIM_Base_SetConfig+0x13c>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d00b      	beq.n	8004954 <TIM_Base_SetConfig+0xf8>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4a17      	ldr	r2, [pc, #92]	@ (800499c <TIM_Base_SetConfig+0x140>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d007      	beq.n	8004954 <TIM_Base_SetConfig+0xf8>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4a16      	ldr	r2, [pc, #88]	@ (80049a0 <TIM_Base_SetConfig+0x144>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d003      	beq.n	8004954 <TIM_Base_SetConfig+0xf8>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4a15      	ldr	r2, [pc, #84]	@ (80049a4 <TIM_Base_SetConfig+0x148>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d103      	bne.n	800495c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	691a      	ldr	r2, [r3, #16]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	691b      	ldr	r3, [r3, #16]
 8004966:	f003 0301 	and.w	r3, r3, #1
 800496a:	2b01      	cmp	r3, #1
 800496c:	d105      	bne.n	800497a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	691b      	ldr	r3, [r3, #16]
 8004972:	f023 0201 	bic.w	r2, r3, #1
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	611a      	str	r2, [r3, #16]
  }
}
 800497a:	bf00      	nop
 800497c:	3714      	adds	r7, #20
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop
 8004988:	40012c00 	.word	0x40012c00
 800498c:	40000400 	.word	0x40000400
 8004990:	40000800 	.word	0x40000800
 8004994:	40000c00 	.word	0x40000c00
 8004998:	40013400 	.word	0x40013400
 800499c:	40014000 	.word	0x40014000
 80049a0:	40014400 	.word	0x40014400
 80049a4:	40014800 	.word	0x40014800

080049a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b087      	sub	sp, #28
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a1b      	ldr	r3, [r3, #32]
 80049b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6a1b      	ldr	r3, [r3, #32]
 80049bc:	f023 0201 	bic.w	r2, r3, #1
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	699b      	ldr	r3, [r3, #24]
 80049ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f023 0303 	bic.w	r3, r3, #3
 80049e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	68fa      	ldr	r2, [r7, #12]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	f023 0302 	bic.w	r3, r3, #2
 80049f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	697a      	ldr	r2, [r7, #20]
 80049fc:	4313      	orrs	r3, r2
 80049fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a2c      	ldr	r2, [pc, #176]	@ (8004ab4 <TIM_OC1_SetConfig+0x10c>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d00f      	beq.n	8004a28 <TIM_OC1_SetConfig+0x80>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4a2b      	ldr	r2, [pc, #172]	@ (8004ab8 <TIM_OC1_SetConfig+0x110>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d00b      	beq.n	8004a28 <TIM_OC1_SetConfig+0x80>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	4a2a      	ldr	r2, [pc, #168]	@ (8004abc <TIM_OC1_SetConfig+0x114>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d007      	beq.n	8004a28 <TIM_OC1_SetConfig+0x80>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4a29      	ldr	r2, [pc, #164]	@ (8004ac0 <TIM_OC1_SetConfig+0x118>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d003      	beq.n	8004a28 <TIM_OC1_SetConfig+0x80>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4a28      	ldr	r2, [pc, #160]	@ (8004ac4 <TIM_OC1_SetConfig+0x11c>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d10c      	bne.n	8004a42 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	f023 0308 	bic.w	r3, r3, #8
 8004a2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	697a      	ldr	r2, [r7, #20]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	f023 0304 	bic.w	r3, r3, #4
 8004a40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a1b      	ldr	r2, [pc, #108]	@ (8004ab4 <TIM_OC1_SetConfig+0x10c>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d00f      	beq.n	8004a6a <TIM_OC1_SetConfig+0xc2>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a1a      	ldr	r2, [pc, #104]	@ (8004ab8 <TIM_OC1_SetConfig+0x110>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d00b      	beq.n	8004a6a <TIM_OC1_SetConfig+0xc2>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a19      	ldr	r2, [pc, #100]	@ (8004abc <TIM_OC1_SetConfig+0x114>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d007      	beq.n	8004a6a <TIM_OC1_SetConfig+0xc2>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a18      	ldr	r2, [pc, #96]	@ (8004ac0 <TIM_OC1_SetConfig+0x118>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d003      	beq.n	8004a6a <TIM_OC1_SetConfig+0xc2>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a17      	ldr	r2, [pc, #92]	@ (8004ac4 <TIM_OC1_SetConfig+0x11c>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d111      	bne.n	8004a8e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004a78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	695b      	ldr	r3, [r3, #20]
 8004a7e:	693a      	ldr	r2, [r7, #16]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	699b      	ldr	r3, [r3, #24]
 8004a88:	693a      	ldr	r2, [r7, #16]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	693a      	ldr	r2, [r7, #16]
 8004a92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	68fa      	ldr	r2, [r7, #12]
 8004a98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	685a      	ldr	r2, [r3, #4]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	697a      	ldr	r2, [r7, #20]
 8004aa6:	621a      	str	r2, [r3, #32]
}
 8004aa8:	bf00      	nop
 8004aaa:	371c      	adds	r7, #28
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr
 8004ab4:	40012c00 	.word	0x40012c00
 8004ab8:	40013400 	.word	0x40013400
 8004abc:	40014000 	.word	0x40014000
 8004ac0:	40014400 	.word	0x40014400
 8004ac4:	40014800 	.word	0x40014800

08004ac8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b087      	sub	sp, #28
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a1b      	ldr	r3, [r3, #32]
 8004ad6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6a1b      	ldr	r3, [r3, #32]
 8004adc:	f023 0210 	bic.w	r2, r3, #16
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	699b      	ldr	r3, [r3, #24]
 8004aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004af6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004afa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	021b      	lsls	r3, r3, #8
 8004b0a:	68fa      	ldr	r2, [r7, #12]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	f023 0320 	bic.w	r3, r3, #32
 8004b16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	011b      	lsls	r3, r3, #4
 8004b1e:	697a      	ldr	r2, [r7, #20]
 8004b20:	4313      	orrs	r3, r2
 8004b22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	4a28      	ldr	r2, [pc, #160]	@ (8004bc8 <TIM_OC2_SetConfig+0x100>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d003      	beq.n	8004b34 <TIM_OC2_SetConfig+0x6c>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	4a27      	ldr	r2, [pc, #156]	@ (8004bcc <TIM_OC2_SetConfig+0x104>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d10d      	bne.n	8004b50 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	011b      	lsls	r3, r3, #4
 8004b42:	697a      	ldr	r2, [r7, #20]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b4e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	4a1d      	ldr	r2, [pc, #116]	@ (8004bc8 <TIM_OC2_SetConfig+0x100>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d00f      	beq.n	8004b78 <TIM_OC2_SetConfig+0xb0>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	4a1c      	ldr	r2, [pc, #112]	@ (8004bcc <TIM_OC2_SetConfig+0x104>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d00b      	beq.n	8004b78 <TIM_OC2_SetConfig+0xb0>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a1b      	ldr	r2, [pc, #108]	@ (8004bd0 <TIM_OC2_SetConfig+0x108>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d007      	beq.n	8004b78 <TIM_OC2_SetConfig+0xb0>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a1a      	ldr	r2, [pc, #104]	@ (8004bd4 <TIM_OC2_SetConfig+0x10c>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d003      	beq.n	8004b78 <TIM_OC2_SetConfig+0xb0>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a19      	ldr	r2, [pc, #100]	@ (8004bd8 <TIM_OC2_SetConfig+0x110>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d113      	bne.n	8004ba0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004b7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004b86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	695b      	ldr	r3, [r3, #20]
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	693a      	ldr	r2, [r7, #16]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	699b      	ldr	r3, [r3, #24]
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	693a      	ldr	r2, [r7, #16]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	693a      	ldr	r2, [r7, #16]
 8004ba4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	68fa      	ldr	r2, [r7, #12]
 8004baa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	685a      	ldr	r2, [r3, #4]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	697a      	ldr	r2, [r7, #20]
 8004bb8:	621a      	str	r2, [r3, #32]
}
 8004bba:	bf00      	nop
 8004bbc:	371c      	adds	r7, #28
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr
 8004bc6:	bf00      	nop
 8004bc8:	40012c00 	.word	0x40012c00
 8004bcc:	40013400 	.word	0x40013400
 8004bd0:	40014000 	.word	0x40014000
 8004bd4:	40014400 	.word	0x40014400
 8004bd8:	40014800 	.word	0x40014800

08004bdc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b087      	sub	sp, #28
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6a1b      	ldr	r3, [r3, #32]
 8004bea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6a1b      	ldr	r3, [r3, #32]
 8004bf0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	69db      	ldr	r3, [r3, #28]
 8004c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f023 0303 	bic.w	r3, r3, #3
 8004c16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	68fa      	ldr	r2, [r7, #12]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004c28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	021b      	lsls	r3, r3, #8
 8004c30:	697a      	ldr	r2, [r7, #20]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a27      	ldr	r2, [pc, #156]	@ (8004cd8 <TIM_OC3_SetConfig+0xfc>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d003      	beq.n	8004c46 <TIM_OC3_SetConfig+0x6a>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a26      	ldr	r2, [pc, #152]	@ (8004cdc <TIM_OC3_SetConfig+0x100>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d10d      	bne.n	8004c62 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004c4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	021b      	lsls	r3, r3, #8
 8004c54:	697a      	ldr	r2, [r7, #20]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004c60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a1c      	ldr	r2, [pc, #112]	@ (8004cd8 <TIM_OC3_SetConfig+0xfc>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d00f      	beq.n	8004c8a <TIM_OC3_SetConfig+0xae>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4a1b      	ldr	r2, [pc, #108]	@ (8004cdc <TIM_OC3_SetConfig+0x100>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d00b      	beq.n	8004c8a <TIM_OC3_SetConfig+0xae>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4a1a      	ldr	r2, [pc, #104]	@ (8004ce0 <TIM_OC3_SetConfig+0x104>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d007      	beq.n	8004c8a <TIM_OC3_SetConfig+0xae>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a19      	ldr	r2, [pc, #100]	@ (8004ce4 <TIM_OC3_SetConfig+0x108>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d003      	beq.n	8004c8a <TIM_OC3_SetConfig+0xae>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a18      	ldr	r2, [pc, #96]	@ (8004ce8 <TIM_OC3_SetConfig+0x10c>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d113      	bne.n	8004cb2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004c90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004c98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	695b      	ldr	r3, [r3, #20]
 8004c9e:	011b      	lsls	r3, r3, #4
 8004ca0:	693a      	ldr	r2, [r7, #16]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	699b      	ldr	r3, [r3, #24]
 8004caa:	011b      	lsls	r3, r3, #4
 8004cac:	693a      	ldr	r2, [r7, #16]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	693a      	ldr	r2, [r7, #16]
 8004cb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	68fa      	ldr	r2, [r7, #12]
 8004cbc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	685a      	ldr	r2, [r3, #4]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	697a      	ldr	r2, [r7, #20]
 8004cca:	621a      	str	r2, [r3, #32]
}
 8004ccc:	bf00      	nop
 8004cce:	371c      	adds	r7, #28
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr
 8004cd8:	40012c00 	.word	0x40012c00
 8004cdc:	40013400 	.word	0x40013400
 8004ce0:	40014000 	.word	0x40014000
 8004ce4:	40014400 	.word	0x40014400
 8004ce8:	40014800 	.word	0x40014800

08004cec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b087      	sub	sp, #28
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6a1b      	ldr	r3, [r3, #32]
 8004cfa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6a1b      	ldr	r3, [r3, #32]
 8004d00:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	69db      	ldr	r3, [r3, #28]
 8004d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	021b      	lsls	r3, r3, #8
 8004d2e:	68fa      	ldr	r2, [r7, #12]
 8004d30:	4313      	orrs	r3, r2
 8004d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004d3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	031b      	lsls	r3, r3, #12
 8004d42:	693a      	ldr	r2, [r7, #16]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4a18      	ldr	r2, [pc, #96]	@ (8004dac <TIM_OC4_SetConfig+0xc0>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d00f      	beq.n	8004d70 <TIM_OC4_SetConfig+0x84>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	4a17      	ldr	r2, [pc, #92]	@ (8004db0 <TIM_OC4_SetConfig+0xc4>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d00b      	beq.n	8004d70 <TIM_OC4_SetConfig+0x84>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	4a16      	ldr	r2, [pc, #88]	@ (8004db4 <TIM_OC4_SetConfig+0xc8>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d007      	beq.n	8004d70 <TIM_OC4_SetConfig+0x84>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	4a15      	ldr	r2, [pc, #84]	@ (8004db8 <TIM_OC4_SetConfig+0xcc>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d003      	beq.n	8004d70 <TIM_OC4_SetConfig+0x84>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	4a14      	ldr	r2, [pc, #80]	@ (8004dbc <TIM_OC4_SetConfig+0xd0>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d109      	bne.n	8004d84 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004d76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	695b      	ldr	r3, [r3, #20]
 8004d7c:	019b      	lsls	r3, r3, #6
 8004d7e:	697a      	ldr	r2, [r7, #20]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	697a      	ldr	r2, [r7, #20]
 8004d88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	68fa      	ldr	r2, [r7, #12]
 8004d8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	685a      	ldr	r2, [r3, #4]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	693a      	ldr	r2, [r7, #16]
 8004d9c:	621a      	str	r2, [r3, #32]
}
 8004d9e:	bf00      	nop
 8004da0:	371c      	adds	r7, #28
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr
 8004daa:	bf00      	nop
 8004dac:	40012c00 	.word	0x40012c00
 8004db0:	40013400 	.word	0x40013400
 8004db4:	40014000 	.word	0x40014000
 8004db8:	40014400 	.word	0x40014400
 8004dbc:	40014800 	.word	0x40014800

08004dc0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b087      	sub	sp, #28
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a1b      	ldr	r3, [r3, #32]
 8004dce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6a1b      	ldr	r3, [r3, #32]
 8004dd4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004dee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004df2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	68fa      	ldr	r2, [r7, #12]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004e04:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	041b      	lsls	r3, r3, #16
 8004e0c:	693a      	ldr	r2, [r7, #16]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a17      	ldr	r2, [pc, #92]	@ (8004e74 <TIM_OC5_SetConfig+0xb4>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d00f      	beq.n	8004e3a <TIM_OC5_SetConfig+0x7a>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a16      	ldr	r2, [pc, #88]	@ (8004e78 <TIM_OC5_SetConfig+0xb8>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d00b      	beq.n	8004e3a <TIM_OC5_SetConfig+0x7a>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a15      	ldr	r2, [pc, #84]	@ (8004e7c <TIM_OC5_SetConfig+0xbc>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d007      	beq.n	8004e3a <TIM_OC5_SetConfig+0x7a>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a14      	ldr	r2, [pc, #80]	@ (8004e80 <TIM_OC5_SetConfig+0xc0>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d003      	beq.n	8004e3a <TIM_OC5_SetConfig+0x7a>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a13      	ldr	r2, [pc, #76]	@ (8004e84 <TIM_OC5_SetConfig+0xc4>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d109      	bne.n	8004e4e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e40:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	695b      	ldr	r3, [r3, #20]
 8004e46:	021b      	lsls	r3, r3, #8
 8004e48:	697a      	ldr	r2, [r7, #20]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	697a      	ldr	r2, [r7, #20]
 8004e52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	68fa      	ldr	r2, [r7, #12]
 8004e58:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	685a      	ldr	r2, [r3, #4]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	693a      	ldr	r2, [r7, #16]
 8004e66:	621a      	str	r2, [r3, #32]
}
 8004e68:	bf00      	nop
 8004e6a:	371c      	adds	r7, #28
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr
 8004e74:	40012c00 	.word	0x40012c00
 8004e78:	40013400 	.word	0x40013400
 8004e7c:	40014000 	.word	0x40014000
 8004e80:	40014400 	.word	0x40014400
 8004e84:	40014800 	.word	0x40014800

08004e88 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b087      	sub	sp, #28
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a1b      	ldr	r3, [r3, #32]
 8004e96:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6a1b      	ldr	r3, [r3, #32]
 8004e9c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004eb6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004eba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	021b      	lsls	r3, r3, #8
 8004ec2:	68fa      	ldr	r2, [r7, #12]
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004ece:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	051b      	lsls	r3, r3, #20
 8004ed6:	693a      	ldr	r2, [r7, #16]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	4a18      	ldr	r2, [pc, #96]	@ (8004f40 <TIM_OC6_SetConfig+0xb8>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d00f      	beq.n	8004f04 <TIM_OC6_SetConfig+0x7c>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	4a17      	ldr	r2, [pc, #92]	@ (8004f44 <TIM_OC6_SetConfig+0xbc>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d00b      	beq.n	8004f04 <TIM_OC6_SetConfig+0x7c>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	4a16      	ldr	r2, [pc, #88]	@ (8004f48 <TIM_OC6_SetConfig+0xc0>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d007      	beq.n	8004f04 <TIM_OC6_SetConfig+0x7c>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	4a15      	ldr	r2, [pc, #84]	@ (8004f4c <TIM_OC6_SetConfig+0xc4>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d003      	beq.n	8004f04 <TIM_OC6_SetConfig+0x7c>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	4a14      	ldr	r2, [pc, #80]	@ (8004f50 <TIM_OC6_SetConfig+0xc8>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d109      	bne.n	8004f18 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f0a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	695b      	ldr	r3, [r3, #20]
 8004f10:	029b      	lsls	r3, r3, #10
 8004f12:	697a      	ldr	r2, [r7, #20]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	697a      	ldr	r2, [r7, #20]
 8004f1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	68fa      	ldr	r2, [r7, #12]
 8004f22:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	685a      	ldr	r2, [r3, #4]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	693a      	ldr	r2, [r7, #16]
 8004f30:	621a      	str	r2, [r3, #32]
}
 8004f32:	bf00      	nop
 8004f34:	371c      	adds	r7, #28
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr
 8004f3e:	bf00      	nop
 8004f40:	40012c00 	.word	0x40012c00
 8004f44:	40013400 	.word	0x40013400
 8004f48:	40014000 	.word	0x40014000
 8004f4c:	40014400 	.word	0x40014400
 8004f50:	40014800 	.word	0x40014800

08004f54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b087      	sub	sp, #28
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6a1b      	ldr	r3, [r3, #32]
 8004f64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6a1b      	ldr	r3, [r3, #32]
 8004f6a:	f023 0201 	bic.w	r2, r3, #1
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	699b      	ldr	r3, [r3, #24]
 8004f76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	011b      	lsls	r3, r3, #4
 8004f84:	693a      	ldr	r2, [r7, #16]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	f023 030a 	bic.w	r3, r3, #10
 8004f90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f92:	697a      	ldr	r2, [r7, #20]
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	693a      	ldr	r2, [r7, #16]
 8004f9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	697a      	ldr	r2, [r7, #20]
 8004fa4:	621a      	str	r2, [r3, #32]
}
 8004fa6:	bf00      	nop
 8004fa8:	371c      	adds	r7, #28
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr

08004fb2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fb2:	b480      	push	{r7}
 8004fb4:	b087      	sub	sp, #28
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	60f8      	str	r0, [r7, #12]
 8004fba:	60b9      	str	r1, [r7, #8]
 8004fbc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	6a1b      	ldr	r3, [r3, #32]
 8004fc2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6a1b      	ldr	r3, [r3, #32]
 8004fc8:	f023 0210 	bic.w	r2, r3, #16
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	699b      	ldr	r3, [r3, #24]
 8004fd4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004fdc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	031b      	lsls	r3, r3, #12
 8004fe2:	693a      	ldr	r2, [r7, #16]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004fee:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	011b      	lsls	r3, r3, #4
 8004ff4:	697a      	ldr	r2, [r7, #20]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	693a      	ldr	r2, [r7, #16]
 8004ffe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	697a      	ldr	r2, [r7, #20]
 8005004:	621a      	str	r2, [r3, #32]
}
 8005006:	bf00      	nop
 8005008:	371c      	adds	r7, #28
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr

08005012 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005012:	b480      	push	{r7}
 8005014:	b085      	sub	sp, #20
 8005016:	af00      	add	r7, sp, #0
 8005018:	6078      	str	r0, [r7, #4]
 800501a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005028:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800502a:	683a      	ldr	r2, [r7, #0]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	4313      	orrs	r3, r2
 8005030:	f043 0307 	orr.w	r3, r3, #7
 8005034:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	68fa      	ldr	r2, [r7, #12]
 800503a:	609a      	str	r2, [r3, #8]
}
 800503c:	bf00      	nop
 800503e:	3714      	adds	r7, #20
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr

08005048 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005048:	b480      	push	{r7}
 800504a:	b087      	sub	sp, #28
 800504c:	af00      	add	r7, sp, #0
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	60b9      	str	r1, [r7, #8]
 8005052:	607a      	str	r2, [r7, #4]
 8005054:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005062:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	021a      	lsls	r2, r3, #8
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	431a      	orrs	r2, r3
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	4313      	orrs	r3, r2
 8005070:	697a      	ldr	r2, [r7, #20]
 8005072:	4313      	orrs	r3, r2
 8005074:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	697a      	ldr	r2, [r7, #20]
 800507a:	609a      	str	r2, [r3, #8]
}
 800507c:	bf00      	nop
 800507e:	371c      	adds	r7, #28
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005088:	b480      	push	{r7}
 800508a:	b087      	sub	sp, #28
 800508c:	af00      	add	r7, sp, #0
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	60b9      	str	r1, [r7, #8]
 8005092:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	f003 031f 	and.w	r3, r3, #31
 800509a:	2201      	movs	r2, #1
 800509c:	fa02 f303 	lsl.w	r3, r2, r3
 80050a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	6a1a      	ldr	r2, [r3, #32]
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	43db      	mvns	r3, r3
 80050aa:	401a      	ands	r2, r3
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6a1a      	ldr	r2, [r3, #32]
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	f003 031f 	and.w	r3, r3, #31
 80050ba:	6879      	ldr	r1, [r7, #4]
 80050bc:	fa01 f303 	lsl.w	r3, r1, r3
 80050c0:	431a      	orrs	r2, r3
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	621a      	str	r2, [r3, #32]
}
 80050c6:	bf00      	nop
 80050c8:	371c      	adds	r7, #28
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr
	...

080050d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b085      	sub	sp, #20
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d101      	bne.n	80050ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050e8:	2302      	movs	r3, #2
 80050ea:	e068      	b.n	80051be <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2202      	movs	r2, #2
 80050f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a2e      	ldr	r2, [pc, #184]	@ (80051cc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d004      	beq.n	8005120 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a2d      	ldr	r2, [pc, #180]	@ (80051d0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d108      	bne.n	8005132 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005126:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	68fa      	ldr	r2, [r7, #12]
 800512e:	4313      	orrs	r3, r2
 8005130:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005138:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	68fa      	ldr	r2, [r7, #12]
 8005140:	4313      	orrs	r3, r2
 8005142:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	68fa      	ldr	r2, [r7, #12]
 800514a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a1e      	ldr	r2, [pc, #120]	@ (80051cc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d01d      	beq.n	8005192 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800515e:	d018      	beq.n	8005192 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a1b      	ldr	r2, [pc, #108]	@ (80051d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d013      	beq.n	8005192 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a1a      	ldr	r2, [pc, #104]	@ (80051d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d00e      	beq.n	8005192 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a18      	ldr	r2, [pc, #96]	@ (80051dc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d009      	beq.n	8005192 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a13      	ldr	r2, [pc, #76]	@ (80051d0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d004      	beq.n	8005192 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a14      	ldr	r2, [pc, #80]	@ (80051e0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d10c      	bne.n	80051ac <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005198:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	68ba      	ldr	r2, [r7, #8]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	68ba      	ldr	r2, [r7, #8]
 80051aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2201      	movs	r2, #1
 80051b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2200      	movs	r2, #0
 80051b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80051bc:	2300      	movs	r3, #0
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3714      	adds	r7, #20
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	40012c00 	.word	0x40012c00
 80051d0:	40013400 	.word	0x40013400
 80051d4:	40000400 	.word	0x40000400
 80051d8:	40000800 	.word	0x40000800
 80051dc:	40000c00 	.word	0x40000c00
 80051e0:	40014000 	.word	0x40014000

080051e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80051ec:	bf00      	nop
 80051ee:	370c      	adds	r7, #12
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr

080051f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b083      	sub	sp, #12
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005200:	bf00      	nop
 8005202:	370c      	adds	r7, #12
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr

0800520c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800520c:	b480      	push	{r7}
 800520e:	b083      	sub	sp, #12
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005214:	bf00      	nop
 8005216:	370c      	adds	r7, #12
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr

08005220 <memset>:
 8005220:	4402      	add	r2, r0
 8005222:	4603      	mov	r3, r0
 8005224:	4293      	cmp	r3, r2
 8005226:	d100      	bne.n	800522a <memset+0xa>
 8005228:	4770      	bx	lr
 800522a:	f803 1b01 	strb.w	r1, [r3], #1
 800522e:	e7f9      	b.n	8005224 <memset+0x4>

08005230 <__libc_init_array>:
 8005230:	b570      	push	{r4, r5, r6, lr}
 8005232:	4d0d      	ldr	r5, [pc, #52]	@ (8005268 <__libc_init_array+0x38>)
 8005234:	4c0d      	ldr	r4, [pc, #52]	@ (800526c <__libc_init_array+0x3c>)
 8005236:	1b64      	subs	r4, r4, r5
 8005238:	10a4      	asrs	r4, r4, #2
 800523a:	2600      	movs	r6, #0
 800523c:	42a6      	cmp	r6, r4
 800523e:	d109      	bne.n	8005254 <__libc_init_array+0x24>
 8005240:	4d0b      	ldr	r5, [pc, #44]	@ (8005270 <__libc_init_array+0x40>)
 8005242:	4c0c      	ldr	r4, [pc, #48]	@ (8005274 <__libc_init_array+0x44>)
 8005244:	f000 f818 	bl	8005278 <_init>
 8005248:	1b64      	subs	r4, r4, r5
 800524a:	10a4      	asrs	r4, r4, #2
 800524c:	2600      	movs	r6, #0
 800524e:	42a6      	cmp	r6, r4
 8005250:	d105      	bne.n	800525e <__libc_init_array+0x2e>
 8005252:	bd70      	pop	{r4, r5, r6, pc}
 8005254:	f855 3b04 	ldr.w	r3, [r5], #4
 8005258:	4798      	blx	r3
 800525a:	3601      	adds	r6, #1
 800525c:	e7ee      	b.n	800523c <__libc_init_array+0xc>
 800525e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005262:	4798      	blx	r3
 8005264:	3601      	adds	r6, #1
 8005266:	e7f2      	b.n	800524e <__libc_init_array+0x1e>
 8005268:	080052d0 	.word	0x080052d0
 800526c:	080052d0 	.word	0x080052d0
 8005270:	080052d0 	.word	0x080052d0
 8005274:	080052d4 	.word	0x080052d4

08005278 <_init>:
 8005278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800527a:	bf00      	nop
 800527c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800527e:	bc08      	pop	{r3}
 8005280:	469e      	mov	lr, r3
 8005282:	4770      	bx	lr

08005284 <_fini>:
 8005284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005286:	bf00      	nop
 8005288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800528a:	bc08      	pop	{r3}
 800528c:	469e      	mov	lr, r3
 800528e:	4770      	bx	lr
